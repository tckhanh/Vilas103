<?xml version="1.0" encoding="utf-8" ?> 
<Demos xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="..\Demos.xsd">
  <GlobalHeader LogoPlatformSubject="ASP.NET AJAX" LogoPlatformDescription="THE WEB, YOUR WAY">
  </GlobalHeader>
  <DemoProduct Key="Integration" Url="asp" IsRootDemo="true" Title="DevExpress ASP.NET AJAX Controls" SeoTitle="ASP.NET AJAX Control Demos" SupportsTheming="false" NavItemTitle="Over 100 ASP.NET Controls">
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_Doc.aspx
    </DocUrl>

    <Intro Title="Online Demos" SeoTitle="ASP.NET AJAX Control Demos">
      <BannerTitle>
        DevExpress Controls for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        A rich set of controls built on top of Microsoft ASP.NET AJAX framework to provide outstanding performance, unmatched reliability, and great customization capabilities.
      </BannerText>
      <BannerImageUrl></BannerImageUrl>
      <BannerUrl>http://www.youtube.com/user/DeveloperExpress</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of DevExpress ASP.NET controls
      </DescriptionTitle>
      <Description>
        <![CDATA[
<p>
This website demonstrates the features and capabilities available to you when using DevExpress controls for ASP.NET. The key features include:
</p>
            ]]>
      </Description>

      <ExternalDemo Title="Webmail Client" Url="http://demos.devexpress.com/RWA/WebmailClient/" ImageUrl="~/Content/DemoIcons/WebmailClient.png" />
      <ExternalDemo Title="Hotel Booking" Url="http://demos.devexpress.com/RWA/HotelBooking/" ImageUrl="~/Content/DemoIcons/HotelBooking.png" />
      <ExternalDemo Title="Video Portal" Url="http://demos.devexpress.com/RWA/VideoPortal/" ImageUrl="~/Content/DemoIcons/VideoPortal.png" />
      <ExternalDemo Title="Event Registration" Url="http://demos.devexpress.com/RWA/EventRegistration/" ImageUrl="~/Content/DemoIcons/EventRegistration.png" />
      <ExternalDemo Title="Home Realtor" Url="http://demos.devexpress.com/RWA/HomeRealtor/TabletViewer/" ImageUrl="~/Content/DemoIcons/HomeRealtor.png" />
      <ExternalDemo Title="Touch Board" Url="http://demos.devexpress.com/RWA/TouchBoard/TabletViewer/" ImageUrl="~/Content/DemoIcons/TouchBoard.png" />
      <ExternalDemo Title="Money Monkey" Url="http://demos.devexpress.com/RWA/MoneyMonkey/" ImageUrl="~/Content/DemoIcons/MoneyMonkey.png" />
      <ExternalDemo Title="Tablet Money Monkey" Url="http://demos.devexpress.com/RWA/MoneyMonkey/Mobile/tabletviewer/" ImageUrl="~/Content/DemoIcons/MoneyMonkeyTablet.png" />

    </Intro>
  </DemoProduct>

  <DemoProduct Key="XtraCharts" Url="XtraChartsDemos" Title="DevExpress XtraCharts" SeoTitle="ASP.NET AJAX Chart Control" SupportsTheming="false" NavItemTitle="Charting" OrderIndex="4" IntegrationHighlighted="true">
    <Keywords>
      Chart, Charts, XtraChart, Charting, ChartControl, Diagram, Visualization, Analyze, DataAnalyze, Analysis, DataAnalysis
    </Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_DemoCenter_XtraChartsAsp_Doc.aspx
    </DocUrl>
    <IntegrationImageUrl>~/Content/Chart.png</IntegrationImageUrl>
    <IntegrationDescription>
      Data visualization optimized for web pages. Over 55 chart types for both 2D and 3D charting. Native integration with the Pivot Grid and Reporting Platform.
    </IntegrationDescription>
    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Chart Control">
      <BannerTitle>
        2D and 3D Charting Control for ASP.NET
      </BannerTitle>
      <BannerText>
        There are over 55 chart types for both 2D and 3D charting, featuring native integration with the DevExpress OLAP Data Mining Pivot Grid control and the DevExpress Reporting Platform.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/user/DeveloperExpress</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the XtraCharts Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            This website demonstrates some of the many features and capabilities available to you when using our <b>XtraCharts Suite</b>. These features include:
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <DescriptionTitle>About Charting</DescriptionTitle>
      <Description>
        <![CDATA[
          <p>
            The ASP.NET Charts Suite offers a comprehensive set of 2D and 3D charts to address a broad range of business requirements. Regardless of the data source or the way application information is stored, the Chart Control promises flexibility and speed in its input data consumption as well as its ability to display information on-screen or on a printed page.
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/8103/aspnet-webforms-controls/chart-control" Title="Documentation" />
      <KeyFeature Name="Rich and Elegant Chart Types for Efficient Visual Representation">
        <Description>
          <![CDATA[
            <p>The Chart Control helps you transform data to its most appropriate, concise and readable visual representation.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Flexible Data Binding">
        <Description>
          <![CDATA[
            <p>Chart your data - regardless of its source.  The data source you supply for the chart can be any object that supports the IList or IEnumerable interface.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Intuitive Design Time Tools">
        <Description>
          <![CDATA[
            <p>An easy-to-use built in chart wizard allows you to customize the main elements of a given chart.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Appearance Customization, Smart Labels, Titles and Annotations">
        <Description>
          <![CDATA[
            <p> Numerous built-in palettes (or style schemes) are available to you.</p>
            <p> You can manually specify label visibility and appearance, shadow style, and connector line angle and length. A title provides endless customization possibilities, including HTML-like text formatting.</p>
            <p>You can also create text or image annotations anchored to a chart, pane, or series point. </p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Multi-Dimensional Data Analysis and Reporting">
        <Description>
          <![CDATA[
            <p> Perform deep analysis of underlying chart data and easily compute summaries, averages, totals and custom functions. Turn information displayed within the DevExpress Pivot Grid into an interactive chart by simply specifying the Pivot Grid as the chart's data source.</p>
            <p>Built-in integration with both the XtraPrinting Library and XtraReports Suite means that charts can be embedded within any banded report, and printed or exported to numerous file formats with ease.</p>            
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Printing, Exporting, Drill-Through, Crosshairs and Tooltips">
        <Description>
          <![CDATA[
            <p>The Chart Control provides a rich client-side API allowing end-users to change chart appearance, send it to the printer or save the chart to a disk using popular file formats.</p>
            <p>The Chart Control allows end-users to dig deep into the information stored within a chart and directly interact with its contents using built-in tooltips and crosshair cursors.</p>            
            ]]>
        </Description>
      </KeyFeature>
    </Overview>
    
    <DemoGroup Key="BarViewTypes" Title="Bar Views" HighlightedTagNames="dx:WebChartControl">
      <Keywords>BarViews, ViewBars</Keywords>
      <Demo Key="BarSeries" Title="Bar" SeoTitle="2D Bar Chart">
        <Keywords>2dbars, 2dchart</Keywords>
        <Description>
          <![CDATA[<p>
              This demo illustrates a <b>Side-By-Side Bar</b> series view, which is useful when it is necessary to compare both the point values and their aggregate for the same point arguments.</p>
              <p>
              In this demo, you can show the series point labels (when the Show Labels option is enabled), and adjust their position relative to Bars (using the Label Position and Orientation drop-down lists).</p>
              <p>
              When the labels are positioned inside the Bars, you can specify the inner indent from the corresponding Bar edge (using the Label Indent editor).</p>
              <p>
              This demo is marked as "updated" because now it shows the ChartControl's capability to save a selection state for autogenerated series.</p>
              <p>
              Related Video: <a href="https://www.youtube.com/watch?v=vBOheDgVn-o">ASP.NET Charts - 2D Bar Chart</a></p>]]>
        </Description>
      </Demo>
      <Demo Key="BarStackedSeries" Title="Stacked Bar" SeoTitle="2D Stacked Bar Chart">
        <Keywords>StackedBar, BarStacked, 2dbars, 2dchart</Keywords>
        <Description>
          <![CDATA[
            <p>This demo shows the <b>Stacked Bar</b> view that allows you to visualize data as columns stacked over each other. This view is useful when comparing an individual series' values with total values an argument aggregates. </p>
            <p>You can enable series point labels (Show Labels option) and total series labels (Show Total Labels option), customize their position (Position option) and orientation (Orientation option). Also, if series point labels are inside bars, at the left or right edge, you can specify their indent (Label Indent option). To rotate a diagram, to show or hide a legend, the X-axis or the Y-axis, use the context menu.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BarFullStackedSeries" Title="Full-Stacked Bar" SeoTitle="2D Full-Stacked Bar Chart">
        <Keywords>2dbars, 2dchart</Keywords>
        <Description>
          <![CDATA[
            <p>This demo shows the <b>Full Stacked Bar</b> view that allows you to visualize data as columns stacked over each other. This view is useful when comparing an individual series' values with total values an argument aggregates. </p>
            <p>You can enable series point labels (Show Labels option) and total series labels (Show Total Labels option), customize their position (Position option) and orientation (Orientation option). Also, if series point labels are inside bars, at the left or right edge, you can specify their indent (Label Indent option). In addition, you can select whether the labels reflect the real values, or percentages (Value as Percent option). </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BarStackedSideBySideSeries" Title="Side-by-Side Stacked Bar" SeoTitle="2D Side-by-Side Stacked Bar Chart">
        <Keywords>2dbars, 2dchart</Keywords>
        <Description>
          <![CDATA[
            <p>This demo shows the <b>Side-by-Side Stacked Bar</b> view that allows you to visualize data as bars stacked in different groups. An argument combines these groups. This view is useful when comparing an individual series' values with groups' total values.</p>
            <p>You can group series either by sex or age, enable series point labels (Show Labels option) and total series labels (Show Total Labels option)</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BarFullStackedSideBySideSeries" Title="Side-by-Side Full-Stacked Bar" SeoTitle="2D Side-by-Side Full-Stacked Bar Chart">
        <Keywords>2dbars, 2dchart, StackedGroup</Keywords>
        <Description>
          <![CDATA[
            <p>This demo shows the <b>Side-by-Side Full Stacked Bar</b> view that allows you to visualize data as individual bars, stacked by groups. An argument combines these groups. These bars are normalized to fill the plot area’s height. This view is useful when comparing point values as a part of the total group value.</p>
            <p>You can group series either by sex or age, enable series point labels (Show Labels option) and total series labels (Show Total Labels option). In addition, you can choose whether the labels reflect the real values, or percentages (using the Value As Percent check box). </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="WaterfallSeries" Title="Waterfall" SeoTitle="Waterfall" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Waterfall.png">
        <Description>
          <![CDATA[
          <p>The Waterfall Chart in this demo displays the cumulative effect of sequentially added positive and negative values based on a start value.</p>
          <p>You can display the Total bar next to the diagram and insert Subtotal bars between two waterfall bars to show the intermediate results.</p>]]>
        </Description>
        <HighlightedDescription>
          The Waterfall Chart in this demo displays the cumulative effect of sequentially added positive and negative values based on a start value
        </HighlightedDescription>
      </Demo>
      <Demo Key="Bar3DSeries" Title="3D Bar" SeoTitle="3D Bar Chart">
        <Keywords>3dbars, 3dchart</Keywords>
        <Description>
          <![CDATA[<p>
                This demo shows the <b>3D Bar</b> series view.</p>
                <p>
                This view is also called the <b>3D Side-by-Side Bar View</b>, and is useful for showing the values of several series for the same points arguments.</p>
                <p>
                In this view the bars height indicates how much the values of one series differ from the values of another series at the same point.</p>
                <p>
                In this demo, you're able to change the visibility of point labels, and enable the top facet for flat-top 3D models by using the corresponding check boxes.</p>
                <p>
                To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.</p>
                <p>
                In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Bar3DStackedSeries" Title="3D Stacked Bar" SeoTitle="3D Stacked Bar Chart">
        <Keywords>3dbars, 3dchart, 3DStacked</Keywords>
        <Description>
          <![CDATA[<p>
                This demo shows the 3D <b>Stacked Bar</b> series view.</p>
                <p>
                This view is useful when it is necessary to compare both the points values and their aggregate for the same points arguments.</p>
                <p>
                In this demo, you're able to change the visibility of point labels, and enable the top facet for flat-top 3D models by using the corresponding check boxes.</p>
                <p>
                To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.</p>
                <p>
                In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Bar3DFullStackedSeries" Title="3D Full-Stacked Bar" SeoTitle="3D Full-Stacked Bar Chart">
        <Keywords>3dbars, 3dchart</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the 3D <b>Full-Stacked Bar</b> series view.
        </p><p>This view is also called the 3D 100% Stacked Bar view, and is useful for comparing the percent values of several series for the same points arguments.</p><p>
          In this demo, you're able to change the visibility of point labels, and enable the top facet for flat-top 3D models by using the corresponding check boxes.
        </p><p>
          To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.
        </p><p>
          In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.
        </p><p>
          To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.
        </p><p>
          In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="Bar3DStackedSideBySideSeries" Title="3D Side-by-Side Stacked Bar" SeoTitle="3D Side-by-Side Stacked Bar Chart">
        <Keywords>3dbars, 3dchart</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the 3D <b>Side-by-Side Stacked Bar</b> series view.
        </p><p>This view allows you to stack series having a similar StackedGroup property value into the same bars. So, this view combines advantages of both the Side-by-Side Bar and Stacked Bar view types.</p><p>In this demo, you can group series either by sex or age.
        </p><p>
          To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.
        </p><p>
          In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="Bar3DFullStackedSideBySideSeries" Title="3D Side-by-Side Full-Stacked Bar" SeoTitle="3D Side-by-Side Full-Stacked Bar Chart">
        <Keywords>3dbars, 3dchart</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the 3D <b>Side-by-Side Full-Stacked Bar</b> series view.
        </p><p>This view which allows you to stack series having a similar StackedGroup property value into the same bars. So, this view combines advantages of both the Side-by-Side Bar and Full-Stacked Bar view types.</p><p>In this demo, you can group series either by sex or age.
        </p><p>To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists. 
        </p><p>In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.  
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="ManhattanBarSeries" Title="3D Manhattan Bar" SeoTitle="3D Manhattan Bar Chart">
        <Keywords>3dbars, 3dchart, 3DManhattan</Keywords>
        <Description>
          <![CDATA[<p>
                  This demo shows the 3D <b>Manhattan Bar</b> series view.</p>
                  <p>
                  This view is useful to display series of individual bars, grouped by category.</p>
                  <p>
                  In this demo, you're able to change the visibility of point labels, and disable the top facet for flat-top 3D models by using the corresponding check boxes.</p>
                  <p>
                  To choose a 3D model used to draw series points, and to change the view’s transparency value, use the corresponding drop-down lists.</p>
                  <p>
                  In addition, you can use the <b>Perspective Angle</b> and <b>Zoom Percent</b> drop-down lists, to adjust the visual representation of the view.</p>
                  ]]>
        </Description>
      </Demo>
      <Demo Key="TornadoChart" Title="Tornado Chart" SeoTitle="Tornado Chart" IsNew="true">
        <Keywords>2dbars, 2dchart, Stacked, Tornado</Keywords>
        <Description>
          <![CDATA[
          <p>This demo shows how to use the <b>Stacked Bar</b> series view and customize the chart options to create a Tornado Chart.</p>
          <p>In this example, a calculated field is used to apply the negative sign to point values. As a result, the “Male” Stacked Bar Series points are displayed on the left, and labels show the original “Population” field value.</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="PointAndLineViewTypes" Title="Point/Line Views" HighlightedTagNames="dx:WebChartControl">
      <Keywords>PointView, LineView</Keywords>
      <Demo Key="PointSeries" Title="Point" SeoTitle="2D Point Chart">
        <Keywords>2dchart, 2Dpoint</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the <b>Point</b> series view.
        </p><p>This view is useful when it is necessary to show points from different series on the same chart plot.</p><p>Click the "Create Points" button to generate new random populations of explanatory points.</p><p>In this demo, you're able to change labels visibility, specify the type and size of series point markers and set the angle between labels and point markers.</p>]]>
        </Description>
      </Demo>
      <Demo Key="BubbleSeries" Title="Bubble" SeoTitle="2D Bubble Chart">
        <Keywords>2dchart, 2DBubble</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows a <b>Bubble</b> series view.
        </p><p>This chart, in addition to the XY point diagram capabilities, allows you to visually represent the Weight of a series point by a bubble's size.</p><p>In this demo, you can change labels' position, choose the kind of a marker and define the minimum and maximum bubble size.</p>]]>
        </Description>
      </Demo>
      <Demo Key="LineSeries" Title="Line" SeoTitle="2D Line Chart">
        <Keywords>2dchart, 2DLine</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the <b>Line</b> series view.
        </p><p>This view is useful when you need to show line trends for several series on the same diagram and to compare the values of several series for the same points arguments.</p><p>In this demo, you're able to change labels visibility, specify the type and size of series point markers and set the angle between labels and point markers.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StackedLineSeries" Title="Stacked Line" SeoTitle="2D Stacked Line Chart">
        <Keywords>2dchart, 2DStacked</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>Stacked Line</b> series view, which is useful when it's necessary to compare how much each series adds to the total aggregate value for specific arguments.</p>
          <p>
          In this demo you can toggle the visibility of series labels, as well as change the kind and size of series markers.</p>]]>
        </Description>
      </Demo>
      <Demo Key="FullStackedLineSeries" Title="Full-Stacked Line" SeoTitle="2D Full-Stacked Line Chart">
        <Keywords>2dchart, 32StepLine</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>Full-Stacked Line</b> series view, which is useful when it's necessary to compare how much each series adds to the total aggregate value for specific arguments (as percents).</p>
          <p>
          In this demo you can toggle the visibility of series labels, specify what should be displayed in series labels, as well as change the kind and size of series markers.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StepLineSeries" Title="Step Line" SeoTitle="2D Step Line Chart">
        <Keywords>2dchart, 3dStepLine</Keywords>
        <Description>
          <![CDATA[<p>
                This demo shows the <b>Step Line</b> series view.</p>
                <p>
                This view is useful when you need to show by how much values have changed for different points of the same series.</p>
                <p>
                In this demo, you're able to change labels visibility, specify the type and size of series point markers and set the angle between labels and point markers.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="SplineSeries" Title="Spline" SeoTitle="2D Spline Chart">
        <Keywords>2dchart, 3dSpline</Keywords>
        <Description>
          <![CDATA[<p>
              This demo shows the <b>Spline</b> series view.</p>
              <p>
              This view is similar to the Line chart, but plots a fitted curve through each data point in a series.</p>
              <p>
              In this demo, you're able to change labels visibility, specify the type and size of series point markers and set the angle between labels and point markers.</p><p>Also you can change the line tension percent using the corresponding combo-box.</p>
              ]]>
        </Description>
      </Demo>
      <Demo Key="ScatterLineSeries" Title="Scatter Line" SeoTitle="2D Scatter Line Chart">
        <Keywords>2dchart, 3dScatter</Keywords>
        <Description>
          <![CDATA[<p>
                This demo illustrates a Scatter Line series view, whose main characteristic is that the series' points are inter-connected by lines in the same sequence they have in the points' collection, without sorting and aggregating them by arguments. In other aspects, this view is similar to the Line view.</p>
                <p>
                In this demo, the series represents the well-known Archimedean spiral, and you also can make it display a cardioid, or a Cartesian folium, using the <b>"Function"</b> combo box. In addition, you can specify the kind and size of points' markers, disable markers, and display labels for series points.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Line3DSeries" Title="3D Line" SeoTitle="3D Line Chart">
        <Keywords>3dchart, 3dline</Keywords>
        <Description>
          <![CDATA[<p>
                This demo shows the 3D <b>Line</b> series view.</p>
                <p>
                This view is useful to display series of individual line, grouped by category.</p>
                <p>
                In this demo, you're able to change the visibility of point labels and specify the required perspective options using the Perspective Angle drop-down list.</p>
                <p>
                Also, use the Zoom Percent combo box to zoom into or out of the view.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="StackedLine3DSeries" Title="3D Stacked Line" SeoTitle="3D Stacked Line Chart">
        <Keywords>3dchart, 3DStacked</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>3D Stacked Line</b> series view, which is useful when it's necessary to compare how much each series adds to the total aggregate value for specific arguments.</p>
          <p>
          In this demo, you're able to change the visibility of point labels and specify the required perspective options using the Perspective Angle drop-down list.</p>
          <p>
          Also, use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="FullStackedLine3DSeries" Title="3D Full-Stacked Line" SeoTitle="3D Full-Stacked Line Chart">
        <Keywords>3dchart, 3dfullstacked, 3DStacked, 3dline</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>3D Full-Stacked Line</b> series view, which is useful when it's necessary to compare how much each series adds to the total aggregate value for specific arguments (as percents).</p>
          <p>
          In this demo, you're able to change the visibility of point labels, specify what should be displayed in these labels, as well as specify the required perspective options using the Perspective Angle drop-down list.</p>
          <p>
          Also, use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StepLine3DSeries" Title="3D Step Line" SeoTitle="3D Step Line Chart">
        <Keywords>3dbars, 3dchart, 3DStepLine</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Step Line</b> series view.
      </p><p>This view is useful when you need to show by how much values have changed for different points of the same series.</p><p>In this demo, you're able to change the visibility of point labels and specify the required perspective options using the Perspective Angle drop-down list.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p><p>Also you can toggle the "Inverted" option to specify whether these steps are shown as inverted or not.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Spline3DSeries" Title="3D Spline" SeoTitle="3D Spline Chart">
        <Keywords>3dchart, 3DSpline</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the 3D <b>Spline</b> series view.
        </p><p>This view is similar to the 3D Line chart, but plots a fitted curve through each data point in a series.</p><p>In this demo, you're able to change the visibility of point labels and specify the required perspective options using the Perspective Angle drop-down list.</p><p>Also, use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="PieViewTypes" Title="Pie/Doughnut Views" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="PieSeries" Title="Pie" SeoTitle="2D Pie Chart">
        <Keywords>2dchart, 2DPie</Keywords>
        <Description>
          <![CDATA[<p>
            This demo shows the series' <b>Pie View</b>, which is used to compare percentage values of different point arguments in the same series.
          </p><p>In this demo, you're able to change pie labels visibility and position, as well as to specify whether real values are shown for each point label or for the corresponding percentage.</p><p>
            Also, you may choose which pie slices should be exploded. For this, either use the <b>Exploded Points</b> drop-down list, or manually click on the required pie slice within a chart, and it will be dynamically exploded or imploded using callbacks.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="DoughnutSeries" Title="Doughnut" SeoTitle="2D Donut Chart">
        <Keywords>2dchart, 2DDonut</Keywords>
        <Description>
          <![CDATA[<p>
            This demo shows the series' <b>Doughnut View</b>, which is similar to the <b>Pie View</b>, but displays a pie with a hole of a non-zero radius.
          </p><p>In this demo, you're able to change pie labels visibility and position as well as to specify whether real values are shown for each point label or for the corresponding percentage.</p><p>
            In addition, you may change the chart hole's radius percentage using the <b>Hole Radius</b> drop-down list to see how this affects the chart's look.
          </p><p>
            Also, you may choose which pie slices should be exploded. For this, either use the <b>Exploded Points</b> drop-down list, or manually click on the required pie slice within a chart, and it will be dynamically exploded or imploded using callbacks.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="NestedDoughnutSeries" Title="Nested Doughnut" SeoTitle="2D Nested Donut Chart">
        <Keywords>2dchart, 2DNestedDonut</Keywords>
        <Description>
          <![CDATA[<p>
            This demo illustrates a <b>Nested Doughnut</b> series view, which is similar to the <b>Doughnut</b> series view, but compares series with one doughnut nested in another one.</p>
            <p>In this demo you can group series either by sex or age.  To see percentage values of different point arguments in tooltips, hover the mouse cursor over a Nested Doughnut series.   In addition, you can change the hole radius percentage and inner indent to see how this affects the nested doughnut look.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="Pie3DSeries" Title="3D Pie" SeoTitle="3D Pie Chart">
        <Keywords>3dchart, 3DPie</Keywords>
        <Description>
          <![CDATA[<p>
            This demo shows the 3D series' <b>Pie View</b>, which is used to compare percentage values of different point arguments in the same series.
          </p><p>
            Use the <b>Label Position</b> drop-down list to specify the way in which pie labels are positioned within pie slices.
          </p><p>
            Uncheck the <b>Show Labels</b> check box to hide point labels.
          </p><p>
            Leave the <b>Value as Percent</b> check box checked to display values in percents within point labels.
          </p><p>
            The <b>Exploded Points</b> and <b>Explode Distance</b> drop-down lists allow you to define which pie slices should be exploded and specify the explode distance, respectively.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="Doughnut3DSeries" Title="3D Doughnut" SeoTitle="3D Donut Chart">
        <Keywords>3dchart, 3DDoughnut</Keywords>
        <Description>
          <![CDATA[<p>
            This demo shows the 3D series' <b>Doughnut View</b>, which is similar to the <b>Pie View</b>, but displays a pie with a hole of a non-zero radius.
          </p><p>In this demo, you're able to change pie labels visibility and position, as well as to specify whether real values are shown for each point label or for the corresponding percentage.</p><p>In addition, you may change the chart hole's radius percentage to see how this affects the chart's look.</p><p>
            Also, you may choose which pie slices should be exploded. For this, use the <b>Exploded Points</b> drop-down list.
          </p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="FunnelViewTypes" Title="Funnel Views" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="FunnelSeries" Title="Funnel" SeoTitle="2D Funnel Charts">
        <Keywords>2dchart, 2DFunnel</Keywords>
        <Description>
          <![CDATA[<p>
            This demo illustrates a Funnel series view, typically used to represent stages in a sales process and show the amount of potential revenue for each stage. A funnel chart displays values as progressively decreasing proportions. The size of the area is determined by the series value as a percentage of the total of all values, which is normally equal to the maximum value among the points' collection.
          </p><p>
            In this demo, you can specify the position and text format of points' labels, enable auto-size for the series, or manually define its height-to-width ratio. In addition, you can check whether to align the series to center, and specify the distance between points.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="Funnel3DSeries" Title="3D Funnel" SeoTitle="3D Funnel Charts">
        <Keywords>3dchart, 3DFunnel</Keywords>
        <Description>
          <![CDATA[<p>
            This demo illustrates a 3D Funnel series view, which is typically used to represent stages in a sales process and show the amount of potential revenue for each stage. A funnel chart displays values as progressively decreasing proportions. The size of the area is determined by the series value as a percentage of the total of all values, normally equal to the maximum value among the points' collection.
          </p><p>
            You can specify the position and text format of points' labels, define the ratio of the funnel's hole to its radius, the distance between points, the height-to-width ratio of the series, by using the appropriate editors.
          </p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="AreaViewTypes" Title="Area Views" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="AreaSeries" Title="Area" SeoTitle="2D Area Chart">
        <Keywords>2dchart, 2darea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Area</b> series view.
      </p><p>This view is useful when you need to show trends for several series on the same diagram and also show the relationship of parts to a whole.</p><p>In this demo, you're able to change labels visibility, set the angle between labels and point markers, and specify the type and size of series point markers.</p><p>Also you may specify the transparency value to apply to all Area series simultaneously.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="AreaStackedSeries" Title="Stacked Area" SeoTitle="2D Stacked Area Chart">
        <Keywords>2dchart, 2dstacked, 2darea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Stacked Area</b> series view.
      </p><p>This view is useful when it is necessary to compare both the points values and their aggregate for the same points arguments.</p><p>In this demo, you're able to change the visibility of series points labels.</p>]]>
        </Description>
      </Demo>
      <Demo Key="AreaFullStackedSeries" Title="Full-Stacked Area" SeoTitle="2D Full-Stacked Area Chart">
        <Keywords>2dchart, 2darea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Full-Stacked Area</b> series view.
      </p><p>This view is also called the 100% Stacked Area view, and is useful for comparing the percent values of several series for the same points arguments.</p><p>In this demo, you're able to specify whether real values are shown for each point label or the representative percentage, and also change the visibility of point labels.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StepAreaSeries" Title="Step Area" SeoTitle="2D Step Area Chart">
        <Keywords>2dchart, 2dstep</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>Step Area</b> series view, which shows how much values have changed for different points of the same series.</p>
          <p>
          In this demo you can toggle the visibility of series labels, set the angle between labels and series markers, specify the type and size of series markers, as well as invert the current step algorithm.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StackedStepAreaSeries" Title="Stacked Step Area" SeoTitle="2D Stacked Step Area Chart">
        <Keywords>2dchart, 2dstep</Keywords>
        <Description>
          <![CDATA[<p>This demo shows the <b>Stacked Step Area</b> series view.</p>
          <p>With this series view, you can represent your data in the convenient form to analyze both a series point value that changes depending on arguments and a series point value part in the total value of an argument.</p>
          <p>In this demo, you can specify the visibility of labels and configure a step used in the series.</p>]]>
        </Description>
      </Demo>
      <Demo Key="FullStackedStepAreaSeries" Title="Full-Stacked Step Area" SeoTitle="2D Full-Stacked Step Area Chart">
        <Keywords>2dchart, 2dstep</Keywords>
        <Description>
          <![CDATA[<p>This demo shows the <b>Full-Stacked Step Area</b> series view.</p>
          <p>With this series view, you can represent your data in the convenient form to analyze both a series point value that changes depending on arguments and a series point value part in the total value of an argument.</p>
          <p>In this demo, you can specify the visibility of labels whose values are shown (real or in percents) and configure a step used in the series.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineAreaSeries" Title="Spline Area" SeoTitle="2D Spline Area Chart">
        <Keywords>2dchart, 2dSpline</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Spline Area</b> series view.
      </p><p>This view is similar to the Area chart, but plots a fitted curve through each data point in a series.</p><p>In this demo, you're able to change labels visibility, set the angle between labels and point markers, and specify the type and size of series point markers.</p><p>Also you may specify the transparency value to apply to all Area series simultaneously.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineAreaStackedSeries" Title="Stacked Spline Area" SeoTitle="2D Stacked Spline Area Chart">
        <Keywords>2dchart, 2dSpline</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Stacked Spline Area</b> series view.
      </p><p>This view is similar to the Stacked Area chart, but plots a fitted curve through each data point in a series.</p><p>In this demo, you're able to change the visibility of series points labels.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineAreaFullStackedSeries" Title="Full-Stacked Spline Area" SeoTitle="2D Full-Stacked Spline Area Chart">
        <Keywords>2dchart, 2dSpline, 2dstacked</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Full-Stacked Spline Area</b> series view.
      </p><p>This view is similar to the Full-Stacked Area chart, but plots a fitted curve through each data point in a series.</p><p>In this demo, you're able to specify whether real values are shown for each point label or the representative percentage, and also change the visibility of point labels.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Area3DSeries" Title="3D Area" SeoTitle="3D Area Chart">
        <Keywords>3dchart, 3dSpline, 3dArea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Area3DStackedSeries" Title="3D Stacked Area" SeoTitle="3D Stacked Area Chart">
        <Keywords>3dchart, 3dStacked, 3dArea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Stacked Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Area3DFullStackedSeries" Title="3D Full-Stacked Area" SeoTitle="3D Full-Stacked Area Chart">
        <Keywords>3dchart, 3dStacked, 3dArea</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Full-Stacked Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="StepArea3DSeries" Title="3D Step Area" SeoTitle="3D Step Area Chart">
        <Keywords>3dchart, 3dstep</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>3D Step Area</b> series view, which shows how much values have changed for different points of the same series.</p>
          <p>
          In this demo, you're able to change the visibility of point labels, invert the current step algorithm and specify the required perspective options using the Perspective Angle drop-down list.</p>
          <p>
          Also, use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineArea3DSeries" Title="3D Spline Area" SeoTitle="3D Spline Area Chart">
        <Keywords>3dchart, 3dSpline</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Spline Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineArea3DStackedSeries" Title="3D Stacked Spline Area" SeoTitle="3D Stacked Spline Area Chart">
        <Keywords>3dchart, 3dStacked, 3dspline</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Stacked Spline Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
      <Demo Key="SplineArea3DFullStackedSeries" Title="3D Full-Stacked Spline Area" SeoTitle="3D Full-Stacked Spline Area Chart">
        <Keywords>3dchart, 3dStacked, 3dspline</Keywords>
        <Description>
          <![CDATA[<p>
        This demo shows the 3D <b>Full-Stacked Spline Area</b> series view.
      </p><p>In this demo, you're able to specify the required perspective options using the Perspective Angle drop-down list, and change the visibility of point labels.</p><p>The Transparency combo box allows you to set series' transparency level.</p><p>Use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="RangeViewTypes" Title="Range Views" HighlightedTagNames="dx:WebChartControl">
      <Keywords>2dchart, 2drange</Keywords>
      <Demo Key="RangeBarSeries" Title="Range Bar" SeoTitle="2D Range Bar Chart">
        <Description>
          <![CDATA[<p>
            This demo illustrates the series' <b>Overlapped Range Bar View</b>, which is useful when it is necessary to show activity bars from different series one above another to precisely compare their duration.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="RangeBarSideBySideSeries" Title="Side-by-Side Range Bar" SeoTitle="2D Side-By-Side Range Bar Chart">
        <Keywords>2dchart, 2drange</Keywords>
        <Description>
          <![CDATA[<p>
            This demo illustrates the series' <b>Side-by-Side Range Bar View</b>, which is useful when it is necessary to show activity bars from different series grouped by their arguments.
          </p><p>In this demo, you're able to change the visibility of point labels.</p>]]>
        </Description>
      </Demo>
      <Demo Key="RangeAreaSeries" Title="Range Area" SeoTitle="Range Area Chart">
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>Range Area</b> series view, which illustrates the difference between start and end values in a convenient manner.</p>
          <p>
          In this demo you can toggle the visibility of series labels, specify what should be shown in them, unhide markers for Value1 and Value 2, as well as change their kind and size.</p>]]>
        </Description>
      </Demo>
      <Demo Key="RangeArea3DSeries" Title="3D Range Area" SeoTitle="3D Range Area Chart">
        <Keywords>3dchart, 3DRange</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>3D Range Area</b> series view, which illustrates the difference between start and end values in a convenient manner.</p>
          <p>
          In this demo you can toggle the visibility of series labels, specify what should be shown in them and specify the required perspective options using the Perspective Angle drop-down list.</p>
          <p>
          Also, use the Zoom Percent combo box to zoom into or out of the view.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="RadarViewTypes" Title="Radar/Polar Views" HighlightedTagNames="dx:WebChartControl">
      <Keywords>Radarview, polarview</Keywords>
      <Demo Key="RadarPointSeries" Title="Radar Point" SeoTitle="Radar Point Chart">
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Radar View</b> with the <b>Point Series</b> drawing style.
      </p><p>It plots the average temperature in London.</p><p>A Radar view has multiple axes along which data is plotted.</p><p>Months are charted on the angular axis while the temperature is charted on the radial axis.</p><p>A Radar view can be drawn on a circular or polygon grid.</p><p>
        This can be selected using the <b>Diagram Type</b> drop-down list. </p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="RadarLineSeries" Title="Radar Line" SeoTitle="Radar Line Chart">
        <Description>
          <![CDATA[<p>
        This demo shows the <b>Radar View</b> with the <b>Line Series</b> drawing style.
      </p><p>In this demo it plots the average temperature in London.</p><p>Months are charted on the angular axis while the temperature is charted on the radial axis.</p><p>A Radar view can be drawn on a circular or polygon grid.</p><p>
        This can be selected using the <b>Diagram Type</b> drop-down list.</p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="RadarAreaSeries" Title="Radar Area" SeoTitle="Radar Area Chart">
        <Description>
          <![CDATA[<p>
        This demo shows you a <b>Radar View</b> with the <b>Area Series</b> drawing style.
      </p><p>In this demo it plots the average temperature in London.</p><p>Months are charted on the angular axis while the temperature is charted on the radial axis.</p><p>A Radar view can be drawn on a circular or polygon grid.</p><p>
        This can be selected using the <b>Diagram Type</b> drop-down list.</p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="RadarRangeAreaSeries" Title="Radar Range Area" SeoTitle="Radar Range Area Chart">
        <Description>
          <![CDATA[<p>This demo illustrates a <b>Radar Range Area</b> series view, which plots the difference between average day and night temperatures in London.</p> 
          <p>Months are charted on the angular axis, while the temperature is charted on the radial axis.</p> 
          <p>A Radar view can be rendered on circular or polygon grid. This can be selected using the "Diagram Type" combo box.</p>]]>
        </Description>
      </Demo>
      <Demo Key="ScatterRadarLineSeries" Title="Scatter Radar Line" SeoTitle="Scatter Radar Line Chart">
        <Description>
          <![CDATA[<p>
        This demo illustrates a <b>Scatter Radar Line View</b>, which displays function values in the same order that they have in the series points collection.</p><p>
        In this demo, you can draw values of the Archimedean Spiral, Polar Rose or Polar Folium function.</p><p>
        You can also toggle the visibility of series labels and markers, as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="PolarPointSeries" Title="Polar Point" SeoTitle="Polar Point Chart">
        <Description>
          <![CDATA[<p>
        This demo shows you a <b>Polar View</b> with the <b>Point Series</b> drawing style.
      </p><p>It plots function values on the basis of angles.</p><p>In this demo, you can plot the values of Lemniscate, Cardioid or Circles function.</p><p>A Polar view can be drawn on a circular or polygon grid.</p><p>
        This can be selected using the <b>Diagram Type</b> drop-down list.
        </p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="PolarLineSeries" Title="Polar Line" SeoTitle="Polar Line Chart">
        <Description>
          <![CDATA[<p>
        This demo shows you a <b>Polar View</b> with the <b>Line Series</b> drawing style.
      </p><p>It plots function values on the basis of angles.</p><p>In this demo, you can plot the values of Lemniscate, Cardioid or Circles function.</p><p>A Polar view can be drawn on a circular or polygon grid.</p><p>
        This can be selected using the <b>Diagram Type</b> drop-down list.
        </p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="PolarAreaSeries" Title="Polar Area" SeoTitle="Polar Area Chart">
        <Description>
          <![CDATA[<p>
          This demo shows you a <b>Polar View</b> with the <b>Area Series</b> drawing style.
        </p><p>It plots function values on the basis of angles.</p><p>In this demo, you can plot the values of Lemniscate, Cardioid or Circles function.</p><p>A Polar view can be drawn on a circular or polygon grid.</p><p>
          This can be selected using the <b>Diagram Type</b> drop-down list.
          </p><p>You can also toggle the visibility of series labels and markers, specify the text direction,  as well as change their kind and size.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="ScatterPolarLineSeries" Title="Scatter Polar Line" SeoTitle="Scatter Polar Line Chart">
        <Description>
          <![CDATA[<p>
        This demo illustrates a <b>Scatter Polar Line View</b>, which displays function values in the same order that they have in the series points collection.</p><p>
        In this demo, you can draw values of the Archimedean Spiral, Polar Rose or Polar Folium function.</p><p>
        You can also toggle the visibility of series labels and markers, as well as change their kind and size.
      </p>]]>
        </Description>
      </Demo>
      <Demo Key="PolarRangeAreaSeries" Title="Polar Range Area" SeoTitle="Polar Range Area Chart">
        <Description>
          <![CDATA[<p>This demo illustrates a <b>Polar Range Area</b> series view, which plots function values on the basis of angles.</p>
          <p>In this demo, you can plot the values of Lemniscate, Cardioid or Circles function.</p>
          <p>A Polar view can be rendered on circular or polygon grid. This can be selected using the "Diagram Type" combo box.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="AdvancedViewTypes" Title="Advanced Views" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="StockSeries" Title="Stock" SeoTitle="Stock Chart">
        <Keywords>Low, High, Open, Close</Keywords>
        <Description>
          <![CDATA[<p>
        This demo illustrates the series' <b>Stock View</b>.
      </p><p>This is one of the financial series (also called as Low-High-Open-Close series), and it is used to show stock price variation over the course of a day.</p><p>The Open and Close prices are represented by left and right lines at each point, and the Low and High prices are represented by the bottom and top values of the vertical line shown at each point.</p><p>In this demo, you can choose whether to exclude holidays and weekends from the X-axis scale.</p><p>Also, you can select to which value level point labels are shown, specify if either or both Open and Close values are shown, and choose what value should be used to determine if the current value is less than its previous value (Red), or greater than (Black).</p>]]>
        </Description>
      </Demo>
      <Demo Key="CandleStickSeries" Title="Candle Stick" SeoTitle="Candle Stick Chart" IsUpdated="true">
        <Keywords>Low, High, Open, Close</Keywords>
        <Description>
          <![CDATA[
            <p>This demo illustrates the <b>Candlestick view</b> for a series.</p>
            <p>The Candle-Stick view displays financial data sets (with Open-High-Low-Close values) and stock price variation over the course of a day.</p>
            <p>Each series point consists of a rectangle with top and bottom values that correspond to the opening and closing prices of a stock. The top of the vertical thin line above the rectangle and the bottom of the line below it represent high and low stock prices.</p>
            <p>You can select which value point labels are shown (the LabelLevel option) and choose the value used to determine the reduction in price (the ReductionLevel property). If the current value is less than its previous value, the point is displayed in Red. If the value is greater than its previous value, the point is shown in Black.</p>
            <p>In this demo, use the SkipRangesWithoutPoints option to exclude all x-axis ranges that do not have points.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="GanttSeries" Title="Gantt" SeoTitle="Gantt Chart">
        <Description><![CDATA[<p>This demo illustrates the series' <b>Overlapped Gantt View</b>, which is useful when it is necessary to show activity bars from different series one above another to precisely compare their duration.</p><p><b>Note</b>: In this demo, you are able to drag and drop a <b>Progress Line</b> and see how this interactively changes the current state of <b>Completed</b> bars.</p>]]></Description>
      </Demo>
      <Demo Key="GanttSideBySideSeries" Title="Side-by-Side Gantt" SeoTitle="Side-By-Side Gantt Chart">
        <Description><![CDATA[<p>This demo illustrates the series' <b>Side-by-Side Gantt View</b>, which is useful when it is necessary to show activity bars from different series grouped by their arguments.</p><p><b>Note</b>: In this demo, you are able to correct <b>current</b> plans for <b>Project 1</b> and <b>Project 2</b>. To accomplish this, move the mouse pointer either to the start or to the end of a current plan's bars, and then drag and drop it to the desired date.</p><p>In addition, you're able to change the visibility of point labels.</p>]]></Description>
      </Demo>
      <Demo Key="BoxPlotSeries" Title="Box Plot" SeoTitle="Box and Whiskers" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/BoxPlot.png">
        <Description>
          <![CDATA[
          <p>This demo illustrates the Box Plot chart that is used to analyze statistical data. To create a Box Plot point, specify the point’s Min, Quartile1, Median, Quartile3, and Max parameters. You can also display a set of Outliers and a Mean value.</p>
          <p>To add a new data set and draw box plots based on this data, click the <b>Add New Data Set button</b>.</p>]]>
        </Description>
        <HighlightedDescription>
          <![CDATA[This demo illustrates the Box Plot chart that is used to analyze statistical data.]]>
        </HighlightedDescription>
      </Demo>

    </DemoGroup>
    <DemoGroup Key="DataAnalysis" Title="Data Analysis" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="RegressionLines" Title="Regression Line" SeoTitle="Regression Lines Data Analysis">
        <Description>
          <![CDATA[<p>
          This demo illustrates the line of linear regression analysis, which can be enabled for each value level of a series.
        </p><p>
          In this demo, points are randomly generated after you click <b>"Create Points"</b>. Then, based on the linear regression algorithm, a line is drawn across the points, providing a commonly used analytical capability. In addition, you can specify the color, dash style and thickness of the regression line.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="Trendlines" Title="Trendlines" SeoTitle="Trendlines Data Analysis">
        <Description>
          <![CDATA[<p>
          This demo illustrates trendlines created with <b>XtraCharts</b>.
        </p><p>
          Note that in this demo, holidays and weekends are excluded from the X-axis scale, using its WorkdaysOnly and WorkdaysOptions properties.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="FibonacciIndicators" Title="Fibonacci Indicators" SeoTitle="Fibonacci Indicators Data Analysis">
        <Keywords>Arcs, Fans, Retracement</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows several kinds of commonly used financial indicators, such as <b>Fibonacci Arcs</b>, <b>Fibonacci Fans</b> and <b>Fibonacci Retracement</b>.
        </p><p>
          In this demo, you can select one of these types in the <b>Kind</b> drop-down list, and choose which of the values, that are available for this kind, should be visible on a chart.
        </p><p>
          Note that in this demo, holidays and weekends are excluded from the X-axis scale, using its WorkdaysOnly and WorkdaysOptions properties.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="MovingAverage" Title="Moving Average" SeoTitle="Moving Average Data Analysis">
        <Keywords>Envelope</Keywords>
        <Description>
          <![CDATA[<p>
         This demo illustrates Moving Average and Envelope financial indicators, which are commonly used to chart data for financial analysis. Financial indicators allow analysis of economic performance and predictions of future performance.
        </p><p>
          In this demo, use the Kind selector, to choose which indicator to show (Moving Average, Envelope, or both), and the Type selector, to choose the indicator's type (Simple, Exponential, Weighted, or Triangular). To specify the number of days to be charted, use the Days Count editor. And, for the Envelope indicator, you can use the Envelope Percent editor, to define the indicator's scope.          
        </p>]]>
        </Description>      
      </Demo>
      <Demo Key="PriceIndicators" Title="Price Indicators" SeoTitle="Price Indicators Data Analysis">
        <Description>
          <![CDATA[<p>
          This demo shows the Price financial indicators. Currently the Chart Control supports the following indicators: Median Price, Typical Price, and Weighted Close.
          </p><p>
          To specify the thickness of the indicator line, use the Thickness editor. To change the line’s color and style, use the Color and Dash Style editors, respectively.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="TrendIndicators" Title="Trend Indicators" SeoTitle="Trend Indicators Data Analysis" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/TrendIndicators.png">
        <Description>
          <![CDATA[<p>
          This demo demonstrates the Trend financial indicators. The Chart Control supports the following Trend indicators: Bollinger Bands, Mass Index, and Standard Deviation.
          </p>]]>
        </Description>
        <HighlightedDescription>
          Trend indicators can accompany the ASP.NET Chart's financial series. This example demonstrates all the available Trend indicators: Bollinger Bands, Mass Index, and Standard Deviation.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Oscillators" Title="Oscillators" SeoTitle="Oscillators Data Analysis">
        <Description>
          <![CDATA[<p>
          This demo illustrates the Oscillator financial indicators. Currently the Chart Control supports the following indicators: Average True Range, Commodity Channel Index, Detrended Price Oscillator, Moving Average Convergence Divergence, Rate of Change, Relative Strength Index, Chaikins Volatility, and Williams %R.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="ErrorBars" Title="Error Bars" SeoTitle="Error Bars">
        <Description>
          <![CDATA[<p>This demo illustrates <b>Error Bars</b> indicators. These indicators represent positive and negative errors for each series point. Currently, the Chart Control supports the following Error Bars indicators.</p>
          <ul>
           <li><b>Fixed Values Error Bars</b> - this indicator's positive and negative error values are specified by constant values (this demo uses +3 and -1 values).</li>
           <li><b>Percentage Error Bars</b> - this indicator's error values are calculated as a percent of series values (this demo uses 10%).</li>
           <li><b>Standard Error Bars</b> - this indicator’s error values represent a standard error. This indicator does not have specific parameters.</li>
           <li><b>Standard Deviation Error Bars</b> - this indicator’s error values represent a standard deviation. This demo uses a multiplier of 1.</li>
           <li><b>Data Source Based Error Bars</b> - this indicator’s error values are loaded from a data source. This demo uses the "PositiveError" field for positive error values and the "NegativeError" field for negative error values.</li>
          </ul>
          <p>In this demo, you can specify which error values should be represented (positive, negative, or both of them) and error bars’ end style, select an indicator type and configure a view type for which the indicator is represented.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ViewCombinations" Title="Multiple Series Type" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="BarAndLine" Title="2D Bar and Line" SeoTitle="2D Bar and Line Charts">
        <Description>
          <![CDATA[<p>
                This demo illustrates the combination of 2D <b>Bar</b> and <b>Line</b> series views.</p>
                <p>
                XtraCharts allows an unlimited number of series of different kinds to be shown at the same time, as long as they support the same type of diagram (e.g., XY-diagram, Pie Diagram, etc.).</p><p>In this demo, you're able to change the visibility of the labels shown for each series point.</p>
                <p>
                The Crosshair Label always shows the Group Header after update.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="BarAndArea3D" Title="3D Bar and Area" SeoTitle="3D Bar and Area Charts">
        <Description>
          <![CDATA[<p>
                This demo illustrates the combination of 3D <b>Bar</b> and <b>Area</b> series views.</p>
                <p>
                XtraCharts allows an unlimited number of series of different kinds to be shown at the same time, as long as they support the same type of diagram (e.g., XY-diagram, Pie Diagram, etc.).</p>
                <p>
                In this demo, you're able to change the visibility of the labels shown for each series point.</p>
                <p>
                Also, use the <b>Zoom Percent</b> drop-down list to zoom into or out of the view.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="DataBinding" Title="Data Binding" HighlightedTagNames="dx:WebChartControl">
      <Keywords>databinding</Keywords>
      <Demo Key="SeriesBinding" Title="Binding Individual Series" SeoTitle="Series Data Binding">
        <Description>
          <![CDATA[<p>
                The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.XtraCharts.Web.WebChartControl">WebChartControl</helplink> allows its <b>Series</b> to be bound to data in two ways:</p>
                <ul>
                <li>You are manually creating a series and bind it to the required fields in the data source.</li>
                <li>The <b>WebChartControl</b> dynamically creates series based on the template settings that can be accessed using the <b>WebChartControl.SeriesTemplate</b> property.</li>
                </ul>
                <p>
                In this demo, the first approach is used.</p><p>The selected category, its minimum, maximum and average prices are displayed at the chart's top-left corner. This information is dynamically updated for the selected category.</p>
                <p>
                To do this, the <b>BoundDataChanged</b> event is handled after a new filter is applied.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="SeriesTemplateBinding" Title="Using Series Template" SeoTitle="Data Binding Using Series Templates">
        <Description>
          <![CDATA[<p>
                The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.XtraCharts.Web.WebChartControl">WebChartControl</helplink> allows its <b>Series</b> to be bound to data in two ways:</p>
                <ul>
                <li>You are manually creating a series and bind it to the required fields in the data source.</li>
                <li>The <b>WebChartControl</b> dynamically creates series based on the template settings that can be accessed using the <b>ChartControl.SeriesTemplate</b> property.</li>
                </ul>
                <p>
                In this demo, the second approach is used. The number of series is displayed at the view's top left corner.</p>
                <p>
                Use the <b>Series Data Member</b> drop-down list to select a data field whose values are used to generate and populate series.</p>
                <p>
                If the "Year" field is selected, the chart shows GDP per Country for each Year. Otherwise, if "Country" is selected, the chart shows GDP per Year for each Country.</p>
                <p>
                In this demo the text style of Crosshair Series Labels and the Crosshair Group Header have been updated.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>
          ASP.NET Chart has the capability to generate series from your data source.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Summarization" Title="Summarization" SeoTitle="Summary Function Calculations">
        <Description>
          <![CDATA[<p>
          With <b>XtraCharts</b>, it is possible to automatically calculate and display summaries for a chart's datasource fields.
        </p><p>In this demo, you can use a drop-down list above the chart to select a summary function to demonstrate.</p><p>
          Note that in addition to built-in summary functions, you can create your own custom ones with <b>XtraCharts</b>, like the <b>STDDEV</b> function in this demo.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="TagBinding" Title="Tag Property" SeoTitle="Series Tags">
        <Keywords>SeriesPoint</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates how to use the <b>Tag</b> property of the <b>SeriesPoint</b> class.
        </p><p>
          In this example, the <b>Tag</b> property stores information from the underlying datasource (a country's official name), and then its value is used to populate legend items for corresponding series points.
        </p><p>This feature is very useful when it is necessary to store some specific information associated with a particular series point.</p><p>In this demo, you're able to change the visibility of the labels shown for each series point.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Colorizer" Title="Colorizer" SeoTitle="Colorizer">
        <Keywords>Series Point, Color</Keywords>
        <Description>
          <![CDATA[<p>
          This demo illustrates the capability of the chart control to color its series based on bound data.
        </p><p>
          In this demo, the chart control shows the Happy Planet Index (HPI) for G20 on the Bubble chart. The size of bubbles is 
          proportional to the country population and their color is determined depending on the HPI value. The data for this demo
          is provided by www.happyplanetindex.org .
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="DataFiltering" Title="Data Filtering" SeoTitle="Data Filtering">
        <Keywords>Data Filtering</Keywords>
        <Description>
          <![CDATA[<p>
          This demo shows the Chart Control's capability to filter its data via the Criteria Language. This approach is common for all data-aware DevExpress controls to filter their data. It allows using criteria building components like FilterControl to provide filtering conditions.
        </p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ChartElements" Title="Chart Elements" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="LinearPaneLayout" Title="Linear Pane Layout" SeoTitle="Linear Pane Layout">
        <Description>
          <![CDATA[<p>
                The Chart Control can display its Cartesian series in several panes.
                End-users can collapse these panes to hide presently unnecessary data.
                Note that each pane can plot one or more XY-series, and can share either the X or Y axis with other panes.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="GridPaneLayout" Title="Grid Pane Layout" SeoTitle="Grid Pane Layout">
        <Description>
          <![CDATA[<p>
                The Chart Control can display its Cartesian series in several panes.
                The flexible Grid Layout feature allows you to design complex pane layouts, for example, like in this demo.
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="ChartTitles" Title="Chart Titles" SeoTitle="Rich Text Formatting in Chart Titles">
        <Description>
          <![CDATA[<p>This demo illustrates chart titles. With XtraCharts, it is possible to create an unlimited number of titles on any chart side and fully customize their appearance.</p><p> To customize any chart title, first select it and then change its alignment, dock or text. Note that you can use some HTML tags for text formatting:</p><ul><li>&lt;b&gt;bold&lt;/b&gt;</li><li>&lt;i&gt;italic&lt;/i&gt;</li><li>&lt;u&gt;underlined&lt;/u&gt;</li><li>&lt;color=blue&gt;color&lt;/color&gt;</li><li>&lt;size=+2&gt;size&lt;/size&gt;</li></ul><p>
          To define whether or not the word-wrapping should be applied to lengthy chart titles, use the appropriate check box.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="SeriesTitles" Title="Series Titles" SeoTitle="Series Titles">
        <Description>
          <![CDATA[<p>This demo illustrates how to show individual titles for each Pie (or Doughnut) series.</p><p>
          These titles can be specified using the <b>Titles</b> property of a particular pie/doughnut series view, or automatically generated using a display pattern for a title, which is added to a Titles collection of a series template.
        </p><p>
          In this demo, every series title is generated using the <b>{S}</b> pattern, where {S} is the current series name placeholder, obtained from the underlying datasource.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="SecondaryAxes" Title="Secondary Axes" SeoTitle="Secondary Axes in 2D Charts">
        <Description><![CDATA[<p>This demo illustrates how to add secondary axes to your chart.</p><p>This may be required, for instance, when it is necessary to show arguments data of a single series using a particular axis, and arguments data of another series using a different axis.</p><p>In this demo you're able to show or hide both X and Y secondary axes, to see their visibility in effect.</p>
        <p>
        The Crosshair Label always shows the Group Header after update.
        </p>
        ]]></Description>
      </Demo>
      <Demo Key="ScaleBreaks" Title="Scale Breaks" SeoTitle="Axis Scale Breaks">
        <Description>
          <![CDATA[<p>
          This demo illustrates how an axis range can be divided by scale breaks, to remove useless space that appears when series points’ values have a significant difference in ranges.
        </p><p>
          In this demo, you can choose to enable automatic scale breaks, and define a limit for their count (up to four). The appearance of scale breaks is determined by their style, size, and color.
        </p>
        ]]>
        </Description>
      </Demo>
      <Demo Key="Legend" Title="Legend" SeoTitle="Chart Legend">
        <Description><![CDATA[<p>This demo illustrates how you can customize a legend in XtraCharts.</p><p>Try to specify different values for a legend's maximum height and width (in percents respective to a chart's size) and see how they are in effect in arranging legend items.</p><p>In addition, in this demo you're able to specify a legend's alignment, direction, and how legend items are spaced in case they're arranged into several columns.</p>]]></Description>
      </Demo>
      <Demo Key="LegendCheckboxes" Title="Check Boxes in Legend" SeoTitle="Check Boxes in Chart Legend">
        <Description><![CDATA[<p>This demo illustrates the capability to show legend check boxes, which are used to toggle the visibility of various chart elements.  Note that when you disable a series check box, the corresponding series trend is automatically disabled as well.</p><p>In the demo, you can change legend marker appearance. For this, select the desired marker type in the "<b>Legend Marker Mode</b>" drop-down list. You can also deactivate check boxes for certain elements – e.g., disable the "<b>Checkable Indicators</b>" option to show markers instead of check boxes for financial indicators.</p>]]></Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Annotations" Title="Annotations" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="AnnotationLayout" Title="Annotation Layout" SeoTitle="Annotation Layout">
        <Description>
          <![CDATA[<p>
          This demo illustrates different image and text annotations anchored to the chart, pane and series points.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="TextAnnotation" Title="Text Annotation" SeoTitle="Text Annotations">
        <Description>
          <![CDATA[<p>
          This demo illustrates text annotations anchored to series points and highlighting points having the minimum and maximum values. To create random points, click the "Generate Points" button.
        </p><p>In this demo, you can choose a shape and connector style for the annotations, and adjust the annotation's rotation angle.This demo also shows HTML formatting support in text annotations.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="ImageAnnotation" Title="Image Annotation" SeoTitle="Image Annotations">
        <Description>
          <![CDATA[<p>
          This demo illustrates image annotations anchored to series points and highlighting points having the minimum and maximum values. To create random points, click the "Generate Points" button.
        </p><p>In this demo, you can choose a shape and connector style for the annotations, and adjust the annotation's rotation angle.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ResolveOverlapping" Title="Resolve Labels Overlapping" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="ResolveOverlappingAxisLabel" Title="Resolve Overlapping for Axis Labels" SeoTitle="Smart Axis Labels in Chart">
        <Description>
          <![CDATA[<p>
           In this demo you can see the work of a resolve overlapping algorithm that prevents intersection of axis labels by making labels staggered. In addition, this algorithm provides rotation and hiding overlapped axis labels. 
           </p><p>You can also disable/ enable the Resolver Overlapping option and specify the resolve overlapping indent between neighboring axis labels to achieve better results. 
          </p>]]>
        </Description>
      </Demo>
      <Demo Key="ResolveOverlappingLine" Title="Resolve Overlapping for Line" SeoTitle="Smart Labels in 2D Line Chart">
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>XtraCharts</b> resolve overlapping feature, which is intended to keep labels from overlapping.
        </p><p>
          In this demo, you can choose an overlapping resolving mode (a particular algorithm to be applied to points' labels), using the <b>"Mode"</b> combo box, and specify the angle at which labels are rotated, and the length of their lines. If any mode other than <b>"None"</b> is applied, you can also specify the minimum indent between adjacent labels.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="ResolveOverlappingPie3D" Title="Resolve Overlapping for 3D Pie" SeoTitle="Smart Labels in 3D Pie Chart">
        <Description>
          <![CDATA[<p>
          This demo illustrates the <b>3D Pie</b> diagram resolve overlapping feature, which is intended to avoid labels overlapping.
        </p><p>In this demo, you can check whether to resolve overlapping, and, if so, to define the required indent value, using the appropriate controls above the chart.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="CustomDraw" Title="Custom Draw" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="DiagramToPoint" Title="XY-Diagram Custom Paint" SeoTitle="Custom Drawing on a Chart">
        <Description><![CDATA[<p>The following example demonstrates how to implement custom painting on an XY-Diagram. For this, the ChartControl.CustomPaint event and XYDiagram.DiagramToPoint method should be used.</p><p>In this demo, you see three clusters of points, and can select any of them. Also, you can turn the "Auto Mode" option off and manually select a region on a chart - in this case the custom cluster bounds will be painted on a diagram.</p>]]></Description>
      </Demo>
      <Demo Key="RadarDiagramToPoint" Title="Radar Diagram Custom Paint" SeoTitle="Custom Drawing on a Radar Chart">
        <Description><![CDATA[<p>The following example demonstrates how to implement custom painting on a Radar Diagram. For this, the ChartControl.CustomPaint event and RadarDiagram.DiagramToPoint and PointToDiagram methods should be used.</p><p>In this demo, you can see three moving targets painted on a radar diagram. Simply put the cross over every target and click it to hit.</p>]]></Description>
      </Demo>
      <Demo Key="CustomDrawSeriesPoints" Title="Series Points" SeoTitle="Custom Drawing of Series Points">
        <Description>
          <![CDATA[<p>This demo illustrates how to implement custom drawing of series points in the Chart control for ASP.NET. Thanks to the WebChartControl's CustomDrawSeriesPoint event, it's possible to get the color name of the series points and show it in series labels. Note that every interval of point values is represented by special chart elements – Strips. 
                      This demo is marked as "updated" because the SeriesPoint.Color property has been introduced instead of series draw options to custom paint every series point.</p>]]>
        </Description>
      </Demo>
      <Demo Key="CustomDrawAxisLabels" Title="Axis Labels" SeoTitle="Custom Drawing of Axis Labels">
        <Description>
          <![CDATA[<p>
          This demo illustrates the capability to individually adjust the appearance of axis label items.
        </p><p>
          In this demo, the values along the Y-axis have a different color and font size,  depending on whether they are equal to, less than, or greater than zero.  You can restore their default appearance, using the <b>"Custom Draw"</b> check box.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="CustomDrawLegend" Title="Legend Items" SeoTitle="Custom Drawing of a Legend">
        <Description>
          <![CDATA[<p>
          This demo illustrates the capability to provide image legend markers for series points.
        </p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Miscellaneous" Title="Miscellaneous" HighlightedTagNames="dx:WebChartControl">
      <Demo Key="RenderFormat" Title="Vector Image Rendering" SeoTitle="Vector Image Rendering">
        <Description>
          <![CDATA[<p>This demo illustrates the Chart control's capability to render its content to a vector image. </p>
          <p>When the render format is changed, it is not visible.
Zoom in the page to see the difference.
The Png-rendered chart is blurred when the Svg-rendered looks great.</p>
]]>
        </Description>
        <HighlightedDescription>
          The ASP.NET Chart has the capability to render the client-side representation of a chart to a vector image.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Multiselection" Title="Multi-Selection" SeoTitle="Multi-Selection">
        <Description>
            <![CDATA[<p>This demo illustrates the use of the Chart control’s multi-select feature. Use mouse or touch gestures to select world regions (pie segments) and view sales by years for these regions in the Bar chart.</p>
          <p>You can modify selection mode to one of the following: </p>
          <ul>
          <li>Single: Select a single pie segment.</li>
          <li>Extended: Select multiple pie segments (SHIFT key is pressed).</li>
          <li>Select/Deselect: Select/deselect individual pie segments (CTRL key is pressed).</li>
          <li>None: Selection is disabled.</li>
      </ul>
<p>To deselect a pie segment, click any region outside the Pie chart area. </p>
]]>
        </Description>
        <HighlightedDescription>
          The ASP.NET Chart control has the ability to select several data points.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Tooltips" Title="Tooltips" SeoTitle="Chart Tooltips">
        <Description><![CDATA[<p>This demo illustrates how to implement custom tooltips for series points. </p>]]>
          <![CDATA[<p> In this demo, a tooltip appears for each bar and shows sales volume by year for each person. You can choose one of the following tooltip positions: Mouse (a tooltip is placed near the mouse pointer), Relative (a tooltip is placed near the element, for which it was invoked) and Free (a tooltip is always placed in the predefined position).
          </p><p>In addition, you can choose the tooltip open mode either on click (a tooltip appears when a particular chart element is clicked) or on hover (a tooltip appears when hovering over a specific chart element).
          </p>]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Charts (ASPxCharts) Suite provides built-in tooltips to display additional information for hovered chart elements.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="DateTimeMeasureUnits" Title="Date-Time Scale" SeoTitle="Date-Time Scale Customization">
        <Description>
          <![CDATA[<p>This demo illustrates how a chart can display date-time values according to the currently selected measure unit and grid alignment. This allows you to maintain date-time values at different detail levels.
          </p><p>To change a measure unit, switch the scale mode from Automatic (in which the most optimal unit of measure for an axis is calculated automatically based on input data) to Manual (in which you can specify a measure unit and aggregate function). To disable data aggregation, select the Continuous scale mode. </p>]]></Description>
      </Demo>
      <Demo Key="TimeSpanScale" Title="Time-Span Scale" SeoTitle="Time-Span Scale Customization" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/TimeSpanScale.png">
        <Description>
          <![CDATA[<p>This demo illustrates a chart that displays time-span values. In this demo, the y-axis shows time-span values with a continuous time-span scale.</p>]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates a chart that displays time-span values.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ChartDesigner" Title="Chart Designer" SeoTitle="Chart Runtime Designer">
        <Description>
          <![CDATA[<p>This demo illustrates how to use the ASP.NET Chart designer to customize the basic chart and series options at runtime.</p>
                   <p>To open the chart designer, click the Show Chart Designer.</p>
                   <p>In the chart designer, you can customize Area and Population series (e.g., change their name, view and labels layout), legend (e.g.,change text color, direction, alignment, visibility and font) and chart axes. You can also modify  the chart title (e.g.,  change its text, text color, dock, alignment, visibility and font).</p>
                   <p>To customize a chart element, expand the chart element in the Chart Structure and locate the corresponding properties in the Properties grid.</p>
                   <p>To save changes and close the designer, click the Save and Close button.</p>]]>
        </Description>
      </Demo>
      <Demo Key="EqualSizeForPieAndDoughnut" Title="Equal Size for Pies/Doughnuts" SeoTitle="Equal Size for Pie and Donut">
        <Description>
          <![CDATA[<p>This demo illustrates the equal size feature for Pie/Doughnut series views.</p>]]>
          <![CDATA[<p>To see this feature in action, click "Equal Size" and all pies (doughnuts) will be equal by their minimum size.</p>]]>
          <![CDATA[<p>In this demo, you can also change the minimum allowed size as a percentage for the "Condiment" series.</p>]]>
        </Description>
      </Demo>
      <Demo Key="HitTesting" Title="Hit-testing" SeoTitle="Hit testing">
        <Description>
          <![CDATA[<p> 
          This demo illustrates the interactive capabilities of <b>XtraCharts</b>, in particular, a capability to access any chart's element by hit-testing.
        </p><p>
          In this demo, after the mouse cursor crosses over a chart's element, a tooltip appears which specifies the object which has been highlighted, and shows its underlying data (if any). If there are multiple objects layered under a test-point, their hierarchy is reflected. This demo is marked as "updated" because a hyperlink element has become accessible by hit-testing.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="DrillDown" Title="Drill Down" SeoTitle="Drill-down and drill-through">
        <Description>
          <![CDATA[<p>
          This demo shows the Chart Control's capability to use nested series templates to display drill down data. Note that the Chart Control displays different data slices when you click an axis label and a series point. Use the new Breadcrumbs element to navigate back to master data.
        </p>]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates the Chart Control's capability to display a drill down chart that you can click to see detail charts.
        </HighlightedDescription>
      </Demo>
      <Demo Key="SegmentColorizer" Title="Segment Colorizer" SeoTitle="Segment Colorizer, Multi-Colored Line" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/SegmentColorizer.png">
        <Description>
          <![CDATA[<p>
          This demo illustrates the Segment colorizers you can apply to the Line Series and its descendants. 
          </p><p>The Range Segment colorizer allows you to specify a line's color for each value range. The Trend Segment colorizer changes a line's color when a point value increases or decreases. 
          </p><p>Use the View option in the Options panel to change the series view. To switch between colorizers, use the Segment Colorizer setting.
          </p>]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates the Segment colorizers you can apply to the Line Series and its descendants.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Histogram" Title="Histogram" SeoTitle="Histogram" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/Histogram.png">
        <Description>
          <![CDATA[
          <p>This demo shows how to plot a histogram that groups series points by their arguments.</p>
          <p>Use the Interval Division Mode option to specify how to divide an axis scale into intervals. To re-create points, use the Generate Points button. The Chart Type option changes the series type used to display the histogram.</p>
          ]]>
        </Description>
        <HighlightedDescription>
          The ASP.NET Charts Suite allows you to create histograms based on a series's data.
        </HighlightedDescription>
      </Demo>
      <Demo Key="EmptyPoints" Title="Empty Points" SeoTitle="Skipping Empty Data Points">
        <Description>
          <![CDATA[<p>
          This demo illustrates how <b>XtraCharts</b> processes missing values, which are often caused by skipped tests or measurements.
        </p><p>These values are transformed into empty points represented by breaks in line or area graphs or missing points, bars etc. in other series view types.</p><p>
          In this demo, you're able to change the current series view type using the <b>View Type</b> drop-down list to see how empty points are represented in different series views.
        </p><p>Also, you may change the visibility of the labels shown for each series point.</p>]]>
        </Description>
      </Demo>
      <Demo Key="TopNOptions" Title="&quot;Top N&quot; and &quot;Others&quot;" SeoTitle="Top N Values, Filtering">
        <Description>
          <![CDATA[<p>
          This demo illustrates the XtraCharts capability to show only <b>Top N</b> values and aggregate the rest into the <b>Others</b> category.
        </p><p>
          In this demo, you can use the Mode drop-down list to define a rule for values to fall within <b>Top N</b> or <b>Others</b> category. Also, you can choose whether to display the <b>Others</b> argument, and define a custom name for it.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="LogarithmicScale" Title="Logarithmic Scale" SeoTitle="Logarithmic Data Scale">
        <Description><![CDATA[<p>This demo illustrates the logarithmic scale feature.</p><p>This feature is usually required when it is necessary to show different values, if some of them are much greater than others.</p><p>In this demo, you can turn the logarithmic scale on and off, and also select the required logarithmic base.</p>]]></Description>
      </Demo>
      <Demo Key="DisplayPatterns" Title="Display Patterns" SeoTitle="Text Patterns">
        <Description><![CDATA[<p>This demo shows how to use patterns to customize a text of series labels, legend items, and axis labels.</p><p>In this demo you can use a predefined set of patterns from a drop-down list  (e.g., {A} - to show arguments;  {V} - to show values;  {S} - to show series name), or specify a custom  pattern by combining patterns in any order with prefixes, suffixes and postfixes.
        </p>]]></Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxperience.DockAndPopups" Url="ASPxDockAndPopupsDemos" Title="DevExpress Dock and Popups" SeoTitle="ASP.NET AJAX Dock and Modal Popups" NavItemTitle="Dock and Popups" OrderIndex="16">
    <Keywords>
      aspxperience, devexpress.web
    </Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxperience_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Doc_and_Modal_Popups.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Dock and Modal Popups">
      <BannerTitle>
        Docking and Popup Windows for ASP.NET
      </BannerTitle>
      <BannerText>
        A collection of controls that allow you to create interactive, touch-enabled web applications such as web dashboards
      </BannerText>
      <BannerImageUrl>
        ~/Content/VideoBanner.png
      </BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=kglFanQjKM4</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxperience Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxperience Suite</b>. 
                These features include: 
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress Dock and Popup Controls Suite is a collection of controls that allow you to create interactive, touch-enabled web applications.
          </p>
        ]]>
      </Description>
    </Overview>

    <DemoGroup Key="Docking" Title="Docking" SeoTitle="ASP.NET AJAX Docking Controls" HighlightedTagNames ="dx:ASPxDockManager dx:ASPxDockPanel dx:ASPxDockZone">
      <Keywords>ASPxDockingControl, Dock, Widget, Layout, yahoo, dashboard, widgetpage, widgetspage, zones, ASPxDockPanel, ASPxDockZone, ASPxDockManager</Keywords>
      <Overview Title="Overview">
        <DescriptionTitle>About Docking</DescriptionTitle>
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Docking Suite consists of three components: <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>. End users can move content placeholders (dock panels) between particular areas (dock zones) in a web page. Dock manager allows you to provide centralized programmatic control over all dock panels and dock zones contained in a page.
            </p>
            <p>
              The Docking Suite delivers intuitive user experiences on both tablets and desktop browsers.  With built-in touch support for iPad and Android, you can create executive dashboards and touch boards with a "widget" style layout.
            </p>
            <p>
              The following code demonstrates how to add docking functionality to your application. For this purpose, the markup contains a dock zone and a panel that is docked to the zone. For the panel, the header and image content are specified.
            </p>
            <code lang="html">
              <dx:ASPxDockZone runat="server" ID="ASPxDockZone1" 
                ZoneUID="DockZone" Height="220px" Width="250px">
              </dx:ASPxDockZone>
              <dx:ASPxDockPanel runat="server" ID="ASPxDockPanel1" 
                OwnerZoneUID="DockZone" HeaderText="2D Bubble"
                ShowCloseButton="false" Height="220px" Width="250px">
                  <ContentCollection>
                      <dx:PopupControlContentControl>
                          <dx:ASPxImage ID="ASPxImage1" runat="server" 
                            ImageUrl="~/Images/2DBubble.png" Height="140px"/>
                      </dx:PopupControlContentControl>
                  </ContentCollection>
              </dx:ASPxDockPanel>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=-8r6T-0IY8Y" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Full Panel Control">
          <Description>
            <![CDATA[
             You can specify whether or not end-users can drag, resize, and dock or undock a panel.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Customizable Header and Footer Content">
          <Description>
            <![CDATA[
             The header and footer elements allow you to display a glyph and text (or a hyperlink). Note that you can also use templates for more flexible header and footer content customization.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Forbidden Zones" DemoUrl="~/Docking/ForbiddenZones.aspx">
          <Description>
            <![CDATA[
             DockPanels can be associated with a set of forbidden DockZones, allowing you to prevent end-users from docking a specific panel to specific zones.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="AJAX Support" DemoUrl="~/Docking/Callbacks.aspx">
          <Description>
            <![CDATA[
             Panel content can be loaded on demand via callbacks (e.g., when it is invoked for the first time).
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Layout Management" DemoUrl="~/Docking/LayoutManagement.aspx">
          <Description>
            <![CDATA[
             The ASPxDockManager component allows you to manage all panels and zones on a page.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Widgets" Title="Widgets" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/Docking.png" HighlightedTitle="Docking - Widgets">
        <Description>
          <![CDATA[
              <p>
              This demo illustrates how web gadgets are implemented using docking components provided by the DevExpress ASP.NET Docking (ASPxDocking) Suite.
              </p> 
              <p>
              The ASPxDocking Suite offers three components - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>. They allow you to manage content placeholders (dock panels), which can be moved by end-users between specific areas (dock zones) of a web page. A dock panel can either be docked to a dock zone or made to float. Dock zones can be placed at any part of a page, and their orientation and size are fully customizable. Dock manager allows you to provide centralized programmatic control over all dock panels and dock zones within a page.
              </p>
          ]]>
        </Description>
        <HighlightedDescription>Three components are used to manage dock panels, so that end-users can move these panels in an application and customize their view. This demo illustrates how web gadgets are implemented using these components included in the DevExpress ASP.NET Docking (ASPxDocking) Suite.</HighlightedDescription>
        <SourceFile>~/Docking/Widgets/CalendarWidget.ascx</SourceFile>
        <SourceFile>~/Docking/Widgets/DateTimeWidget.ascx</SourceFile>
        <SourceFile>~/Docking/Widgets/MailWidget.ascx</SourceFile>
        <SourceFile>~/Docking/Widgets/NewsWidget.ascx</SourceFile>
        <SourceFile>~/Docking/Widgets/TradingWidget/TradingWidget.ascx</SourceFile>
        <SourceFile>~/Docking/Widgets/WeatherWidget/WeatherWidget.ascx</SourceFile>
        <SourceFile>~/Docking/CSS/Widgets.css</SourceFile>

      </Demo>
      <Demo Key="ForbiddenZones" Title="Forbidden Zones">
        <Description>
          <![CDATA[
              <p>
              This example demonstrates the forbidden zones feature, which allows you to control a panel's ability to selectively dock to specific zones.
              </p>
              <p>
              Using a dock panel's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel.ForbiddenZones">ForbiddenZones</helplink> property, you can specify prohibited zones for the panel - the zones to which the panel cannot be docked. It is also possible to provide different appearances for the allowed and forbidden zone states using the dock zone's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DockZoneStyles.DockingAllowedStyle">Styles.DockingAllowedStyle</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DockZoneStyles.DockingForbiddenStyle">Styles.DockingForbiddenStyle</helplink> properties, respectively. These appearances are used to highlight zones during panel dragging, and to indicate whether a particular zone allows or prohibits panel docking.
              </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Callbacks" Title="Callbacks (AJAX)">
        <Description>
          <![CDATA[
              <p>
              The DevExpress ASP.NET Dock Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>) has the capability to load panel content on demand via callbacks. Several content loading modes are available using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel.LoadContentViaCallback">LoadContentViaCallback</helplink> property:
              </p>
              <ul>
              <li>
              None - The content is always (initially) rendered inside a dock panel (the default behavior).
              </li>
              <li>
              OnPageLoad - Panel content loading starts immediately after the entire page has been loaded.
              </li>
              <li>
              OnFirstShow - Panel content loading starts when a dock panel is invoked for the first time.
              </li>
              <li>
              OnDock - Panel content loading starts each time a panel is docked to a dock zone. 
              </li>
              <li>
              OnDockStateChange - Panel content loading starts each time a panel's dock state is changed (i.e., a docked panel becomes floating or a float panel docks to a zone). 
              </li>
              <li>
              OnFloating - Panel content loading starts each time a panel is made floating.
              </li>
              </ul>
              <p>
              Using a postponed load of panel content, you can improve the response time of your web page on its initial load. You can also update the content of a dock panel programmatically on demand.
              </p>
              <p>
              Note that in this example, callback processing is intentionally paused on the server side for half a second in order to make the Loading Panel visible during this time.
              </p>
          ]]>
        </Description>
        <SourceFile>~/Docking/Callbacks/DesignDepartmentEmployees.ascx</SourceFile>
        <SourceFile>~/Docking/Callbacks/DevelopmentDepartmentEmployees.ascx</SourceFile>
        <SourceFile>~/Docking/Callbacks/FloatModeContent.ascx</SourceFile>
      </Demo>
      <Demo Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
              <p>
              This example demonstrates the capabilities of our client-side event management technology. Move the panels to initiate client-side events. The main control-specific client events related to panel docking are traced in this demo.
              </p>
              <p>
              All controls included in the DevExpress ASP.NET Docking (ASPxDocking) Suite (such as <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) provide advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all key elements of the panel docking functionality. Thus, they give you the ability to completely control the client-side behavior of dock panels and zones.
              </p>
              <p>
              The following client events are demonstrated in this demo:
              </p>
              <ul>
              <li>Init (common to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Occurs on the client side after a client control object has been initialized, but prior to its display in the browser.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.StartDragging">StartDragging</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.EndDragging">EndDragging</helplink> (specific to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>); <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockManager.StartPanelDragging">StartPanelDragging</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockManager.EndPanelDragging">EndPanelDragging</helplink> (specific to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Allow you to respond to the corresponding end-user actions performed on a panel.</li>
              <li>BeforeDock, AfterDock (common to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Fire before and after a panel is docked to a zone; you can cancel panel docking, if required.</li>
              <li>BeforeFloat, AfterFloat (common to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Fire before and after a panel is made to float; you can cancel making a panel float, if required.</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.PopUp">PopUp</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.CloseUp">CloseUp</helplink> (specific to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>); <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockManager.PanelPopUp">PanelPopUp</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockManager.PanelCloseUp">PanelCloseUp</helplink> (specific to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Allows you to respond to dock operations (opening or closing a dock panel).</li>
              </ul>
              <p>
              To learn more about client-side events, refer to the  <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
              </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
              <p>
              This example demonstrates how to manipulate dock panels programmatically on the client using the extended client-side functionality from DevExpress. The client-side programmatic interface is available for a control if any of the following is true: 
              </p>
              <ul>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to <b>true</b>;</li>
              <li>Any client-side event (available via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel.ClientSideEvents">ClientSideEvents</helplink> property) is handled;</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ClientInstanceName">ClientInstanceName</helplink> property is defined.</li>
              </ul>
              <p>
              This demo allows the selected dock panel's characteristics to be modified dynamically via client code, depending on the rightmost panel's settings. 
              </p>
              <p>
             In this demo, an individual dock panel's visibility and visible index are modified via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.SetVisible(visible)">SetVisible</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.SetVisibleIndex(visibleIndex)">SetVisibleIndex</helplink> client methods. A panel's dock state (docked or float) is obtained using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.IsDocked">IsDocked</helplink> method. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.Dock(zone)">Dock</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDockPanel.MakeFloat">MakeFloat</helplink> client methods are used to dock a panel or make it float.
              </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[
              <p>This sample demonstrates a few of the server-side capabilities available to you when using controls from the DevExpress ASP.NET Docking (ASPxDocking) Suite. The demo allows the selected dock panel's characteristics to be modified dynamically in client code depending on the rightmost panel's settings.</p>
              <p>The main control-specific server events related to panel docking are also traced in this demo. Move the dock panels to initiate server-side events and display information about the raised events in the Event monitor (the panel below the tiles).</p>
              <p>
               The following server events are demonstrated in this demo:
              </p>
              <ul>
              <li>BeforeDock, AfterDock (common for <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockZone">ASPxDockZone</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Fire before and after a panel is docked to a zone; you can cancel panel docking if required.</li>
              <li>BeforeFloat, AfterFloat (common for <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockPanel">ASPxDockPanel</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager">ASPxDockManager</helplink>) - Fire before and after a panel is made to float; you can cancel making a panel float, if required.</li>
              </ul>
          ]]>
        </Description>
      </Demo>
      <Demo Key="LayoutManagement" Title="Layout Management">
        <Description>
          <![CDATA[
              <p>
             This demo creates a simple application scenario to illustrate how components from the DevExpress ASP.NET Docking (ASPxDocking) Library can be used for two different purposes: to visualize data blocks on a page using a fixed layout and to customize the layout of these data blocks from an external page.
              </p>
              <p>
              Both pages (presentation and customization) use the same set of DevExpress docking controls in this sample. The dock panel layout defined on the customization page is preserved and synchronized with the presentation page by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDockManager.ClientLayout">ClientLayout</helplink> event of ASPxDockManager components.
              </p>
            ]]>
        </Description>
        <SourceFile>~/Docking/LayoutManagement/EditLayout.aspx</SourceFile>
        <SourceFile>~/Docking/LayoutManagement/EditLayout.aspx.cs</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="LoadingPanel" Title="Loading Panel" SeoTitle="ASP.NET Loading Panel" HighlightedTagNames ="dx:ASPxLoadingPanel">
      <Demo Key="Example" Title="Example">
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the use of the DevExpress ASP.NET Loading Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxLoadingPanel">ASPxLoadingPanel</helplink>) control in modal mode.
				</p>
                <p>
					Depending on the check box setting, the ASPxLoadingPanel can be displayed over the entire page or a specified HTML element. It is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxLoadingPanel.ContainerElementID">ContainerElementID</helplink> property.
				</p>
                <p>
					In this demo, the ASPxLoadingPanel is displayed for a few seconds and hidden dynamically using client code in response to clicks on the <b>Show Loading Panel</b> button.
				</p>
                ]]>
        </Description>
        <HighlightedDescription>Display a “loading” message to an end-user when required, using the DevExpress ASP.NET Loading Panel (ASPxLoadingPanel) control. This demo shows how the ASPxLoadingPanel can display and hide a loading panel via client code in response to an end-user’s actions.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="HintControl" Title="Hint Control" SeoTitle="ASP.NET AJAX Hint Control" HighlightedTagNames="dx:ASPxHint">
      <Keywords>ASPxHint, hint, tooltip, popover</Keywords>
      <Overview Title="Overview">
        <DescriptionTitle>About Hint</DescriptionTitle>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Hint control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint">ASPxHint</helplink>) can be rendered on demand and displays within a box with an arrow targeting the specified UI element on a web page.
          </p>
          <p>
            The markup fragment below demonstrates how to add the <b>ASPxHint</b> to your project, specify its target element selector and content.
          </p>
            <code lang="html">
              <dx:ASPxHint ID="Hint" runat="server" TargetSelector=".hintArea" Content="Hint control" />
            </code>
        ]]>
        </Description>
      <KeyFeature Name="Customizable Content" DemoUrl="~/HintControl/LoadContentOnDemand.aspx">
          <Description>
            <![CDATA[
            It is possible to specify custom content for a hint either on the server or client side programmatically. 
            ]]>
          </Description>
        </KeyFeature>
      <KeyFeature Name="Hint Position" DemoUrl="~/HintControl/Features.aspx">
          <Description>
            <![CDATA[
            The Hint Control can display on any side (left, right, top, bottom) of the target element.  
            ]]>
          </Description>
        </KeyFeature>
      <KeyFeature Name="Trigger Action" DemoUrl="~/HintControl/Features.aspx">
          <Description>
            <![CDATA[
            Hint Control allows specifying which action triggers a hint (hover, click, focus, programmatic).
            ]]>
          </Description>
        </KeyFeature>
      <KeyFeature Name="Rich Client-Side Functionality" DemoUrl="~/HintControl/LoadContentOnDemand.aspx">
          <Description>
            <![CDATA[
            A comprehensive client-side API is available for Hint Control that gives you full control over the hint's behavior on the client side.
            ]]>
          </Description>
        </KeyFeature>
        
      </Overview>
      <Demo Key="Features" Title="Features">
          <Description>
            <![CDATA[
            
            <p>
              The DevExpress ASP.NET Hint Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint">ASPxHint</helplink>) provides the capability to generate its content on demand and display it within a box with an arrow targeting the specified UI element on a web page.
            </p>
            
            <p>
              This demo illustrates the primary features provided by the ASPxHint in action.
            </p>
            

            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.ShowCallout">ShowCallout</helplink>. This option specifies whether a hint callout displays.
            </p>
            
            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.Animation">Animation</helplink>. This option enables animation when a hint appears. 
            </p>
            
            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.Title">Title</helplink>. Use this option to specify the hint title text. 
            </p>
            
            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.TriggerAction">TriggerAction</helplink>. Use this option to specify a trigger action to show a hint.        
            </p>
            
		        <ul>
			        <li>
			          <b>None</b> - No actions display a hint.
			        </li>
			
			        <li>
			          <b>Hover</b> - A hint displays when a user hover a page UI element.
			        </li>
			
			        <li>
			          <b>Click</b> - A hint displays when a user clicks a page UI element.
			        </li>
		        </ul>           
       
            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.AppearAfter">AppearAfter</helplink>. This option specifies the delay in displaying a hint.
            </p>
            
            <p>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.DisappearAfter">DisappearAfter</helplink>. This option specifies the delay after which a hint disappears.
            </p>    
            
            
            ]]>
          </Description>
      </Demo>
      <Demo Key="LoadContentOnDemand" Title="Load Content on Demand">
          <Description>
              <![CDATA[
      
            <p>
              This demo illustrates how to create and populate a hint programmatically on the client side using our client-side functionality. A hint with the detailed information displays on the left of the cell when the user clicks any cell in the "Details" column.
            </p>
            
            <p>
              The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHint.Register.static(targetSelector-options)">Register</helplink> function is used to register a hint functionality for each cell in the specified column, and its first argument is a target element selector - '[data-visibleindex]'. It specifies that a hint displays for grid cells that have the <b>"data-visibleindex"</b> attribute. The <b>onShowing</b> client event is used to to provide the custom-generated content that is stored in the <b>e.contentElement</b> event argument. The <b>position</b> and <b>triggerAction</b> function's arguments specify the position of a hint and the action that triggers it.
            </p>
      
      ]]>
          </Description>
      </Demo>
      <Demo Key="Ellipsis" Title="Hint for Text Ellipsis">
        <Description>
          <![CDATA[
          
        <p>
          This demo illustrates how to use <b>ASPxHint</b> instead of standard tooltips. A hint with the full text displays when the mouse pointer hovers over grid cells that contain truncated values and display an ellipsis ('...'). These cells are also automatically highlighted. Resize any column to see these features.
        </p>
        
        <p>
          In this demo, the <b>.dx-ellipsis[title]</b> style class applies to highlight cells with the ellipsis. The ASPxHint's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.TargetSelector">TargetSelector</helplink> property (whose value is set to .dxgv) specifies that a hint displays for grid cells with the specified style class applied. A web page element's <b>title</b> attribute value defines a hint’s content.
        </p>
      
      ]]>
        </Description>
      </Demo>
      <Demo Key="ChoosingSeat" Title="Choosing a Seat" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/Hint.png" HighlightedTitle="Hint Control - Choosing a seat">
        <Description>
          <![CDATA[
          
        <p>
          This demo illustrates how to use ASPxHint to show ticket prices for different seats. Hover over a seat to see its price.
        </p>
        
        <p>
          In this demo a hint displays for web page elements that have the <b>title</b> attribute that is controlled by the ASPxHint's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHint.TargetSelector">TargetSelector</helplink> property. A web page element's <b>title</b> attribute value specifies the content of a hint.
        </p>
        
        
      ]]>
        </Description>
        <HighlightedDescription>This demo illustrates how to implement a model of a cinema hall and show ticket prices for different seats using ASPxHint.</HighlightedDescription>
        <SourceFile>~/HintControl/CinemaLayout.ascx</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="PopupControl" Title="Popup Control" SeoTitle="ASP.NET AJAX Popup Window Control" HighlightedTagNames ="dx:ASPxPopupControl">
      <Keywords>window, dialog</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Popup Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>) makes it easy to display fully customizable popup windows and hints within your web application.
            </p>
            <p>
              The markup fragment below demonstrates how to add the ASPxPopupControl to your project, specify the popup element ID and “window close” action, and enable window dragging. The window content collection is populated with a DIV element. Additionally, the markup specifies that the popup window will automatically be displayed when a client browser loads the page.
            </p>
            <code lang="html">
              <dx:ASPxPopupControl ID="ASPxPopupControl1" runat="server"
                PopupElementID="popupArea" CloseAction="CloseButton" 
                AllowDragging="true" ShowOnPageLoad="true">
                  <ContentCollection>
                      <dx:PopupControlContentControl runat="server">
                          <div>Content</div>
                      </dx:PopupControlContentControl>
                  </ContentCollection>
              </dx:ASPxPopupControl>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=RVLtw9QXOg4" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3582/aspnet-webforms-controls/docking-and-popups/popup-control" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/PopupControl/DataBinding.aspx">
          <Description>
            <![CDATA[
             The ASPxPopupControl supports standard data binding to any object that implements the IListSource, IEnumerable or IDataSource interface.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Header Buttons" DemoUrl="~/PopupControl/HeaderButtons.aspx">
          <Description>
            <![CDATA[
             The ASPxPopupControl provides the ability to display special buttons in its header: Pin, Refresh, Collapse, Maximize and Close.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Load Content on Demand" DemoUrl="~/PopupControl/LoadOnDemand.aspx">
          <Description>
            <![CDATA[
             The ASPxPopupControl can load the content of popup windows on demand. Using a postponed load, you can enhance the response time of your web page on its initial load. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Customizable Header and Footer Content">
          <Description>
            <![CDATA[
             Window header and footer elements allow you to display a glyph and text (or a hyperlink). You can also use templates for more flexible header and footer content customization.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Horizontal and Vertical Alignment Settings">
          <Description>
            <![CDATA[
             You can specify how a popup window should be aligned relative to the HTML source element.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Transparency" DemoUrl="~/PopupControl/Templates.aspx">
          <Description>
            <![CDATA[
             The ASPxPopupControl supports the transparency feature, which allows you to create custom-shaped popup windows. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Modal Mode" DemoUrl="~/PopupControl/ModalWindow.aspx">
          <Description>
            <![CDATA[
             The ASPxPopupControl's popup windows can be used in modal mode, which is useful when you require an end-user to interact with a modal dialog before returning to the main window.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Description>
          <![CDATA[<p>
					This demo illustrates how the DevExpress ASP.NET Popup Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>) can be bound to a data source. The ASPxPopupControl supports standard data binding. In this instance, any object that implements the IListSource, IEnumerable or IDataSource interface (e.g., SqlDataSource, XmlDataSource) may be used as a data source for this control. 
				</p><p>
					In this demo, the popup control is bound to a standard XmlDataSource type data source. It supplies the popup control with data from a specific Charts.xml file. The ASPxPopupControl requires data to be represented as the contents of different elements within popup windows. Use the XPath property to obtain the desired data sample.
				</p><p>
					In this demo, the contents of each popup window are defined by placing a standard Image web control onto a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.WindowContentTemplate">WindowContentTemplate</helplink> type template. The ImageUrl property of the Image control is bound directly to the XmlDataSource's node using the Container.EvalDataItem(&lt;expression&gt;) method. (See ASPX code)
				</p><p>
					The window's footer is defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.WindowFooterTemplate">WindowFooterTemplate</helplink> by using the Label web control whose Text property binds to the data of the corresponding xml node using the Container.EvalDataItem(&lt;expression&gt;) method. (See ASPX code)
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Keywords>PopupHorizontalAlign, position, header, footer, PopupVerticalAlign, Opacity, allowdragging, allowresize, sizegrip</Keywords>
        <Description>
          <![CDATA[
				<p>This demo allows you to see some of the features provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> in action. Use the options listed on the right to change various layout and behavior property settings of the ASPxPopupControl, and click <b>Apply</b> to assign them to it. To invoke the ASPxPopupControl, click the PopupElement button displayed on the left.</p>

				<p>All of the options available in this demo are described below.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowCloseButton">ShowCloseButton</helplink>. This option specifies if a button allowing end-users to close a popup window is displayed within a window header.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowShadow">ShowShadow</helplink>. This option enables a shadow effect for a popup window.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowHeader">ShowHeader</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowFooter">ShowFooter</helplink>. Use these options to toggle the visibility of a popup window's header and footer.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupHorizontalAlign">PopupHorizontalAlign</helplink>. This option specifies the horizontal alignment of a popup window, relative to the corresponding web control/HTML element. Option values include the following.</p>
				  <ul>
				    <li>NotSet. A popup window is displayed on the x-coordinate of the mouse cursor position.</li>
				    <li>OutsideLeft. A popup window is displayed to the left of the corresponding HTML element, so that the x-coordinate of the window's right border equals the x-coordinate of the element's left border.</li>
				    <li>LeftSides. A popup window is displayed so that the x-coordinate of the window’s left border equals the x-coordinate of the corresponding HTML element's left border.</li>
				    <li>Center. A popup window is displayed so that it and its corresponding element are centered horizontally.</li>
				    <li>RightSides. A popup window is displayed so that the x-coordinate of the window’s right border equals the x-coordinate of the corresponding HTML element's right border.</li>
				    <li>OutsideRight. A popup window is displayed to the right of the corresponding HTML element so that the x-coordinate of the window's left border equals the x-coordinate of the element's right border.</li>
				    <li>WindowCenter. A popup window is displayed so that it is horizontally aligned with the center of the browser.</li>
				  </ul>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupVerticalAlign">PopupVerticalAlign</helplink>. This option specifies the vertical alignment of a popup window with respect to the corresponding web control/HTML element. Choose one of the following option values.</p>
				  <ul>
				    <li>NotSet. A popup window is displayed on the y-coordinate of the mouse cursor position.</li>
				    <li>Above. A popup window is displayed above the corresponding HTML element, so that the y-coordinate of the window's bottom border equals the y-coordinate of the element's top border.</li>
				    <li>TopSides. A popup window is displayed so that the y-coordinate of the window’s top border equals the y-coordinate of the corresponding HTML element's top border.</li>
				    <li>Middle. A popup window is displayed so that it and its corresponding element are centered vertically.</li>
				    <li>BottomSides. A popup window is displayed so that the y-coordinate of the window’s bottom border equals the y-coordinate of the corresponding HTML element's bottom border.</li>
				    <li>Below. A popup window is displayed below the corresponding HTML element so that the y-coordinate of the window's top border equals the y-coordinate of the element's bottom border.</li>
				    <li>WindowCenter. A popup window is displayed so that it is vertically aligned in the center of the browser.</li>
				  </ul>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupHorizontalOffset">PopupHorizontalOffset</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupVerticalOffset">PopupVerticalOffset</helplink>. Use these options to specify a popup window's horizontal and vertical offsets relative to the corresponding element in pixels. The options accept both positive and negative values.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.Opacity">Opacity</helplink>. This option allows you to customize the level of transparency for a popup window and its controls. The option accepts values ranging from 0 (the window is transparent and completely invisible) to 100 (the window is opaque).</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.PopupAnimationType">PopupAnimationType</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.CloseAnimationType">CloseAnimationType</helplink>. These properties specify the type of animation used to show and hide a popup window. </p>
<ul>
    <li>Fade. A popup window is displayed/hidden using a fade-in/fade-out effect.</li>
    <li>Slide. A popup window is displayed/hidden using a slide effect.</li>
</ul>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowDragging">AllowDragging</helplink>. Enable this option to allow a popup window to be dragged within the bounds of the client browser's window.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.DragElement">DragElement</helplink>. Choose which part of a popup window starts the drag operation: the header (a popup window can be dragged by its header) or the window (dragging can be initiated by clicking anywhere within a popup window's client area).</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowResize">AllowResize</helplink>. Enable this option to allow a popup window to be sized. Use the option in combination with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ResizingMode">ResizingMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowSizeGrip">ShowSizeGrip</helplink> options. A popup window's size limits can be specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MinHeight">MinHeight</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MinWidth">MinWidth</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MaxHeight">MaxHeight</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.MaxWidth">MaxWidth</helplink> properties.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ResizingMode">ResizingMode</helplink>. This option controls whether a popup window is redrawn dynamically during the resizing operation (the <b>Live</b> value) or whether the window is redrawn after the resizing operation is finished (the <b>Postponed</b> value).</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowSizeGrip">ShowSizeGrip</helplink>. Use this option to toggle the visibility of a size grip element that, when dragged, allows end-users to size a popup window. The size grip can always be displayed (the <b>True</b> value), never be displayed (the <b>False</b> value), or displayed depending on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowResize">AllowResize</helplink> property setting (the <b>Auto</b> value).</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ScrollBars">ScrollBars</helplink>. This option specifies the visibility of scrollbars within a popup window. Choose one of the following option values.<p>
				  <ul>
				    <li>None. No scrollbars are displayed within the popup window.</li>
				    <li>Horizontal. The popup window only displays the horizontal scrollbar.</li>
				    <li>Vertical. The popup window only displays the vertical scrollbar.</li>
				    <li>Both. The popup window displays both horizontal and vertical scrollbars.</li>
				    <li>Auto. The popup window automatically displays a horizontal and/or vertical scrollbar if its content does not fit the popup window.</li>
				  </ul>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.CloseAction">CloseAction</helplink>. Use this option to specify the client action that closes a popup window. The option values include the following:<p>
				  <ul>
				    <li>None. The popup window can only be closed in code via a specific client script method.</li>
				    <li>CloseButton. The popup window can only be closed by pressing the <b>Close</b> button displayed within the window's header.</li>
				    <li>OuterMouseClick. The popup window is closed by clicking outside the window's region.</li>
				    <li>MouseOut. The popup window is closed if the mouse pointer moves out of the window region. To specify the hide delay (in milliseconds), use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.DisappearAfter">DisappearAfter</helplink> option.</li>
				  </ul>
          <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.CloseOnEscape">CloseOnEscape</helplink>. This option specifies if a popup window is closed when an end-user presses the ESC key.</p>
				  <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupAction">PopupAction</helplink>. Use this option to specify the client action that invokes a popup window. Choose from one of the following option values:</p>
				  <ul>
				    <li>None. A popup window can be invoked only in code via a specific client script method.</li>
				    <li>LeftMouseClick. A popup window can be invoked by clicking a corresponding web control or HTML element, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupElementID">PopupElementID</helplink> property.</li>
				    <li>RightMouseClick. A popup window can be invoked by right-clicking a corresponding web control or HTML element, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupElementID">PopupElementID</helplink> property.</li>
				    <li>MouseOver. A popup window is invoked when the mouse pointer enters a region occupied by a corresponding web control or HTML element, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupElementID">PopupElementID</helplink> property. To specify the display delay (in milliseconds), use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.AppearAfter">AppearAfter</helplink> option.</li>
				  </ul>
]]>
        </Description>
      </Demo>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Popup_Adaptive.png" HighlightedTitle="Popup Control - Adaptive Layout">
        <Description>
          <![CDATA[
            <p>
            DevExpress ASP.NET Popup allows building adaptive page layouts. When a user resizes a browser window, the popup control adapts its size to a window's resolution using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink> property. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings">PopupControlAdaptivitySettings</helplink> object provides settings used to customize the ASPxPopup control in adaptivity mode. 
            </p>
            <p>
            In this demo, the popup control's fields are positioned one under another and in one column when a browser window's width changes.
            </p>
            ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASPxPopup control can automatically change its size to suit the target browser size and resolution.</HighlightedDescription>
        <SourceFile>~/PopupControl/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="HeaderButtons" Title="Header Buttons" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Popup_HeaderButtons.png" HighlightedTitle="Popup Control - Header Buttons">
        <Keywords>pin,maximize,Collapse,close,refresh</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Popup Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>) provides the ability to display special buttons in its header.
</p>
<ul><li>
Pin button – Allows end-users to pin and unpin a window. 
</li><li>
Refresh button – Allows end-users to refresh window content. 
</li><li>
Collapse button – Allows end-users to collapse and expand a window. 
</li><li>
Maximize button – Allows end-users to maximize and restore a window. 
</li><li>
Close button – Allows end-users to close a window. 
</li></ul>
<p>
The header only displays the Close button by default. You can manage button visibility using corresponding properties: <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowPinButton">ShowPinButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowRefreshButton">ShowRefreshButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowCollapseButton">ShowCollapseButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowMaximizeButton">ShowMaximizeButton</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ShowCloseButton">ShowCloseButton</helplink>.
</p> 
<p>
Use the check boxes on the right of the page to switch button visibility and try the buttons in action.
</p>
              ]]>
        </Description>
      <HighlightedDescription>This demo shows the ASPxPopupControl ability to display special buttons in its header: Pin, Refresh, Collapse, Maximize and Close.</HighlightedDescription>
      
      </Demo>
      <Demo Key="LoadOnDemand" Title="Load Content on Demand" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Popup_LoadOnDemand.png" HighlightedTitle="Popup Window - Load Content on Demand">
        <Keywords>ajax, callback, lazy</Keywords>
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> has the capability to load the content of popup windows on demand. Several content loading modes are available from the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.LoadContentViaCallback">LoadContentViaCallback</helplink> property.</p>
            <ul>
            <li>None - The content is always (initially) rendered inside popup windows (the default behavior).</li>
            <li>OnPageLoad - The loading of popup window content starts immediately after the entire page has loaded.</li>
            <li>OnFirstShow - The loading of popup window content starts when a popup window is invoked for the first time.</li>
            </ul>
            <p>Using a postponed load of popup window content, you can enhance the response time of your web page on its initial load. You can also update the content of popup windows programmatically, on demand.</p>
            <p>Note that in this example, we intentionally pause callback processing on the server side for a second, in order to make the 'Loading Panel' visible during this time.</p>
            ]]>
        </Description>
      <HighlightedDescription>The Popup Control can load the content of popup windows on demand. Using a postponed load, you can enhance the response time of your web page on its initial load.</HighlightedDescription>
      </Demo>
      <Demo Key="MultipleInvokerElements" Title="Multiple Invoker Elements" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Popup_MultiElements.png" HighlightedTitle="Popup Control - Multiple Invoker Elements">
        <Description>
          <![CDATA[
				<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> allows you to specify several web controls or HTML elements whose specific mouse action (defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupAction">PopupAction</helplink> property) invokes a popup window. The list of invoker element IDs, which are separated by a semicolon (;), can be set from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.PopupElementID">PopupElementID</helplink> property. 
				</p>
				<p>Using the ASPxPopupControl client-side functionality, you can perform the following actions with invoker elements.
				</p>

				<ul>
				   <li>Specify elements that invoke a popup window.</li>
				   <li>Get the current invoker element.</li>
				   <li>Show a popup window for a specified element in a list.</li>
				</ul>
				<p>In this demo, ASPxPopupControl is linked to four elements – images. When you hover over an image, the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.PopUp">PopUp</helplink> event is invoked. In the event handler, the popup control gets the current invoker element via the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.GetCurrentPopupElement">GetCurrentPopupElement</helplink> method, and displays the corresponding large image as window content.
				</p>
				<p>You can also try this functionality in the <a href="http://www.devexpress.com/Support/Center/p/E4023.aspx">ASPxPopupControl - How to define multiple invoker elements on the client to implement image zooming for a set of images</a> example.
				</p>
            ]]>
        </Description>
        <HighlightedDescription>Invoke a popup window based on end-user actions using the DevExpress ASP.NET Popup Control (ASPxPopupControl). This demo illustrates how a popup window is displayed when an image is hovered by the mouse pointer.</HighlightedDescription>
      </Demo>
      <Demo Key="ModalWindow" Title="Modal Window" SeoTitle="Modal Dialog" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Popup_ModalWindow.png" HighlightedTitle="Popup Control - Modal Dialog">
        <Description>
          <![CDATA[<p>
					This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>'s popup windows can be used in modal mode. This window mode is useful when you require an end-user to interact with the modal dialog (e.g., input and submit login credentials) before returning to the main window. The modal mode's availability can be controlled by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl.Modal">Modal</helplink> property of a popup control or a specific popup window. An unlimited number of nested modal windows is supported.
				</p><p>In this demo, click the <b>Show Modal Window</b> button to invoke the first modal dialog window. The second modal window can be displayed by clicking the <b>Create Account</b> link within the dialog.</p>]]>
        </Description>
              <HighlightedDescription>This demo shows how to use the Popup Control to display fully customizable modal dialogs.</HighlightedDescription>
      </Demo>
      <Demo Key="ContentUrl" Title="Content URL" SeoTitle="HTML Page in Popup Window">
        <Keywords>iframe</Keywords>
        <Description>
          <![CDATA[<p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> allows you to display the content of other web pages by specifying their URLs. The control’s <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ContentUrl">ContentUrl</helplink> property is used to load a specific web page into the ASPxPopupControl.
				</p><p>
					In this demo, the ASPxPopupControl's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.ContentUrl">ContentUrl</helplink> property is assigned with the navigation location of a specific web page that emulates a feedback form. The page content is loaded into the popup control's window automatically.
				</p><p>
					This demo also illustrates the resizing feature of the ASPxPopupControl. This feature is enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowResize">AllowResize</helplink> property to <b>true</b>. The popup control's window can be resized by using the size grip or by dragging the window's edges.
				</p>]]>
        </Description>
        <SourceFile>~/PopupControl/ContentUrlFeedForm.aspx.cs</SourceFile>
        <SourceFile>~/PopupControl/ContentUrlFeedForm.aspx.vb</SourceFile>
        <SourceFile>~/PopupControl/ContentUrlFeedForm.aspx</SourceFile>
      </Demo>
      <Demo Key="Transparency" Title="Transparency">
        <Description>
          <![CDATA[<p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> supports the Transparency feature, which means you can create custom-shaped popup windows. For this purpose, set the control's BackColor property to 'Transparent' and provide the appropriate background image.
				</p><p>
					In this demo, puzzle elements are represented by ASPxPopupControl instances. Each puzzle element's shape is defined by a specific partially transparent .png image, which is set as the background image of the corresponding popup control (via the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxWebControl.BackgroundImage">BackgroundImage</helplink> property). The BackColor property of each popup control is set to 'Transparent'. To allow popup windows to be dragged, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.AllowDragging">AllowDragging</helplink> property is set to <b>true</b> and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.DragElement">DragElement</helplink> property is set to <b>Window</b>, for each popup control.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Keywords>customization</Keywords>
        <Description>
          <![CDATA[<p>
					This example demonstrates the use of the template technology within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>. The look of header and footer elements of a popup control's window can be completely modified by creating a specific template that defines how the corresponding window element will be rendered by a client browser.
				</p><p>
					The template types provided by the ASPxPopupControl and supplemented with the ability to define the contents of the control's window (by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.Controls">Controls</helplink> property or the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.SetWindowContentHtml(window-html)">SetWindowContentHtml</helplink> method) allow you to completely customize the popup window's appearance and layout. In this demo, the default popup window functionality is enhanced by specific <b>Help</b> and <b>Close</b> buttons placed in the window's header by using a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.HeaderTemplate">HeaderTemplate</helplink> type template. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.FooterTemplate">FooterTemplate</helplink> type template is used to define the color palette (which allows the background color of the window's content to be changed) and display text (which is displayed or hidden dynamically in response to a click on the <b>Help</b> button).
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
            <p>
              This sample demonstrates the capabilities of our client-side event technology. All available client-side events are traced in this demo. Click the icon next to a product name to invoke the corresponding popup control window.</p>
              <p>Client-side events are triggered in response to specific user actions performed on the client side (e.g., when invoking or hiding a popup window).</p>
            <p>
              To learn more about client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
            </p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[<p>
					This example demonstrates how to manipulate a popup control programmatically on the client side using our extended client-side functionality. The client-side programmatic interface is available if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to <b>true</b>, or if there is a handler assigned to any client-side event. 
				</p><p>
					In this demo, each popup control window is identified using its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupWindow.Name">Name</helplink> property. In order to obtain a specific popup window by its name on the client side, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.GetWindowByName(name)">GetWindowByName</helplink> method is used. A specific popup window can be invoked or hidden on the client side by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.ShowWindow(window)">ShowWindow</helplink> or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.HideWindow(window)">HideWindow</helplink> method. (See the SetHintVisible function in the JS code.)
				</p><p>
					In order to show or hide a default window, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Show">Show</helplink> or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.Hide">Hide</helplink> method can be used. (See the SetErrorVisible function in the JS code.) 
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControlBase.SetContentHtml(html)">SetContentHtml</helplink> method is used in this demo to display the HTML code representing the default popup window's content. (See the SetErrorString function in the JS code.) The content of a specific popup window can be obtained on the client side via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.GetWindowContentHtml(window)">GetWindowContentHtml</helplink> method, and defined via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupControl.SetWindowContentHtml(window-html)">SetWindowContentHtml</helplink> method.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[<p>
This sample demonstrates a few of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>'s server-side capabilities. Enter text into the memo field, and click the <b>Create Note</b> button to create and display a popup window containing the text entered.
				</p><p>
Each newly created popup window overlaps those preceding it. You can drag a window by its header or close the window by clicking the window's <b>Close</b> button. Note that the position and state of a popup window is preserved between postbacks. The code of the Button1_Click event handler (see the VB or C# code) demonstrates how an individual popup window is created, and how its content text, footer text and position are defined. 
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames ="dx:ASPxPopupControl">
      <Demo Key="RightToLeft" Title="Right to Left Layout">
        <Description>
          <![CDATA[
<p>
Our visual controls provide support for right-to-left languages such as Arabic and Hebrew. Thus, you can completely rely on our web controls when creating international web pages that include support for right-to-left reading order, and the mirroring of UI elements.
</p>

<p>
To switch a control to right-to-left display, enable a single property - RightToLeft. When this property is enabled, the text flows from right to left in the control, and the control itself is mirrored (the layout of the UI elements is reversed).
</p>

<p>
If you need to apply right-to-left representation to all DevExpress web controls within your web application, you can enable our special configuration option within the Web.config file, instead of changing each control's RightToLeft property. This special option is the <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> option, which can be accessed within the 'settings' group of the <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section in the Web.config file.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

  </DemoProduct>

  <DemoProduct Key="ASPxEditors" Url="ASPxEditorsDemos" Title="DevExpress ASPxEditors" SeoTitle="ASP.NET AJAX Data Editors" NavItemTitle="Data Editors" OrderIndex="13">
    <Keywords>
      editing, form, input, devexpress.web.ASPxEditors, aspxeditors
    </Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxEditors_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Editors.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Data Editors">
      <BannerTitle>
        Data Editors for ASP.NET
      </BannerTitle>
      <BannerText>
        Unmatched data editing options. Over 20 advanced editors that can be used either standalone or within container controls.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=SdTfyMuyphE</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the DevExpress Data Editors
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our ASP.NET editors. These features include:
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET Data Editors provide a powerful collection of over 20 stand-alone data edit and multi-purpose controls available for both bound and unbound modes.
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/Products/NET/Controls/ASP/Editors/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/7897/aspnet-webforms-controls/data-editors" Title="Documentation" />
      <KeyFeature Name="Advanced Masked Input" DemoUrl="~/Features/MaskedInput.aspx">
        <Description>
          <![CDATA[
             DevExpress ASP.NET data editors make data entry validation simple by supporting masked input.  
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Display Value Formatting" DemoUrl="~/Features/DisplayFormat.aspx">
        <Description>
          <![CDATA[
             Editor display values can be formatted using standard formatting mechanisms, and editors with blank values can display input watermarks.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Built-in Validation Engine" DemoUrl="~/Validation/Inplace.aspx">
        <Description>
          <![CDATA[
             With just a few option settings, you can enable built-in data input validation. Automatic client and server-side validation is supported. The data editors provide two built-in error indication options including error frames and error icons.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Rich Client-Side Functionality" DemoUrl="~/Features/EnableOnClient.aspx">
        <Description>
          <![CDATA[
             A comprehensive client-side API is available for DevExpress editors. This functionality, coupled with the ability to handle a rich set of client events, gives you total control over the behavior on the client side. 
            ]]>
        </Description>
      </KeyFeature>
    </Overview>
    
    <DemoGroup Key="Features" Title="Common Features" HighlightedTagNames="dx:ASPxSpinEdit dx:ASPxDateEdit dx:ASPxTimeEdit dx:ASPxTextBox dx:ASPxComboBox dx:ASPxGridView dx:ASPxGridLookup dx:ASPxMemo dx:ASPxRadioButtonList dx:ASPxButtonEdit dx:ASPxButton dx:ASPxListBox dx:ASPxRadioButton">
      <Demo Key="Overview" Title="Overview">        
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Data Editors provide a powerful collection of over 20 stand-alone data edit and multi-purpose controls available for both bound and unbound modes.
            </p>
          ]]>
        </Description>        
      </Demo>
      <Demo Key="DisplayFormat" Title="Display Format"  >
        <Keywords>DisplayFormatString, formatstring</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property can be used for editors of different types.
                </p>
                <p>
                    The Display Format property (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink>) specifies the pattern used to format the value of an editor for display purposes, when the editor is not focused. Display values can be formatted using the standard formatting mechanism described in MSDN. For more information about composing format patterns, see the following MSDN topic: <a target="_blank" href="http://msdn.microsoft.com/en-us/library/fbxft59x.aspx">Formatting Types</a>.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>The Display Format property (DisplayFormatString) allows you to format an editor’s data after it has been input by an end-user. The formatting takes effect once the editor loses focus. This demo illustrates the various types of display formats and the patterns associated with them.</HighlightedDescription>
      </Demo>
      <Demo Key="NullText" Title="Null Text" SeoTitle="Null Text Watermark">
        <Keywords>emptytext</Keywords>
        <Description>
          <![CDATA[
<p>
This demo illustrates how to use an editor's <b>NullText</b> property to display prompt text (watermark) in its edit box. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TextEditProperties.NullTextDisplayMode">NullTextDisplayMode</helplink> property specifies whether the null text is displayed in the editor depending on its focus state (if the editor's value is null). Note that the null text does not display in the focused editor if a mask is applied (see the <b>Time</b> editor in the demo).
</p><p>
DevExpress editors can display a <b>Clear</b> button that allows you to clear the editor value when it is not empty. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ClearButton.DisplayMode">DisplayMode</helplink> property controls the <b>Clear</b> button availability.
</p>
                ]]>
        </Description>
        <HighlightedDescription>A Clear button, which allows end-users to clear an editor in one click, can be displayed in a DevExpress editor when the editor is hovered or focused, and is not empty. This demo shows the Clear button in different editor types. </HighlightedDescription>
      </Demo>
      <Demo Key="Caption" Title="Caption" SeoTitle="Caption - Show Label Prompt">
        <Keywords>caption, label, prompt</Keywords>
        <Description>
          <![CDATA[
               <p>DevExpress editors allow you to specify an editor's caption, which can be positioned and aligned relative to an editor. To customize the caption settings, you can use the following properties.</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEditBase.Caption">Caption</helplink> – specifies the caption text. You can change the caption on the client side using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEditBase.SetCaption(caption)">SetCaption</helplink> method.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettingsBase.Position">Position</helplink> – specifies the position of a caption related to the editor.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettingsBase.HorizontalAlign">HorizontalAlign</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettingsBase.VerticalAlign">VerticalAlign</helplink> – specify the horizontal and vertical alignment of a caption.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettingsBase.ShowColon">ShowColon</helplink> – specifies whether the colon sign is displayed after caption text.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettings.RequiredMark">RequiredMark</helplink> – specifies the text displayed after a caption when the editor value is required.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettings.OptionalMark">OptionalMark</helplink> – specifies the text displayed after a caption when the editor value is optional.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditorCaptionSettings.RequiredMarkDisplayMode">RequiredMarkDisplayMode</helplink> – specifies which mark should be displayed after a caption. This property can be set to the following values.
<ul>
<li><b>Optional</b> - The "optional" mark is displayed after a caption.</li>
<li><b>Required</b> - The "required" mark is displayed after a caption.</li>
<li><b>Hidden</b> - Neither the "optional" mark nor the "required" mark is displayed after a caption.</li>
<li><b>Auto</b> - If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RequiredFieldValidationPattern.IsRequired"> IsRequired</helplink> property is set to <b>true</b>, the "required" mark is displayed after a caption.</li>
</ul> 

</li>
</ul>
<p>This demo illustrates how a DevExpress editor’s caption can be customized for editors of different types.</p>
                ]]>
        </Description>
        <HighlightedDescription>DevExpress editors allow you to specify an editor's caption, which can be positioned and aligned relative to an editor. This demo illustrates the DevExpress editor’s caption, which can be customized for editors of different types.</HighlightedDescription>
      </Demo>
      <Demo Key="ClearButton" Title="Clear Button" SeoTitle="Clear Button for ASP.NET AJAX Controls">
        <Keywords>clear, clear button, null item, blank, null value</Keywords>
        <Description>
          <![CDATA[
<p>
The <b>Clear</b> button allows end-users to clear an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> value, i.e., to set the editor value to null. Therefore, you don't need to create a null (blank) item. The button is displayed when the editor is not empty.
</p>
<p>
The <b>Clear</b> button availability is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ClearButton.DisplayMode">DisplayMode</helplink> property. By default, the property is set to <b>Auto</b> to display the button on touch devices only when the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.DropDownStyle">DropDownStyle</helplink> property is not set to <b>DropDownList</b>.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="MaskedInput" Title="Masked Input"
          HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Mask.png">
        <Keywords>UseMaskBehavior, MaskSettings, masking, symbols</Keywords>
        <Description>
          <![CDATA[
                <p>
                    DevExpress editors allow you to use masks during editing. Masks are useful when a string entered by an end-user should match a specific format. For instance, you may require a text editor to only accept date/time values in a 24-hour format, only accept numeric values, or only accept numbers that are automatically inserted into the placeholders of a telephone number. 
                </p>
                <p>
                    Masked input is supported by the following editor types:
                </p>
                <ul>
                    <li>
                        Text box editors (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox">ASPxTextBox</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButtonEdit">ASPxButtonEdit</helplink>).<br />
                        Text box mask settings can be accessed via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox.MaskSettings">MaskSettings</helplink> property.  
                        The editor’s mask can be specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MaskSettings.Mask">MaskSettings.Mask</helplink> property.
                    </li>
                    <li>
                        Date editors (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink>).<br />
                        To enable masked input within a date editor, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.UseMaskBehavior">UseMaskBehavior</helplink> property should be set to <b>true</b>. 
                        The mask can be defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormatString">EditFormatString</helplink> property if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormat">EditFormat</helplink> property is set to 'Custom'.
                    </li>
                </ul>
                <p>
                    In this demo, see how masked input behavior is implemented by entering data into the various types of editors.
                </p>
                <p>See also: <a href="https://docs.devexpress.com/AspNet/5744/aspnet-webforms-controls/data-editors/common-concepts/mask-editing/mask-types" target="_blank">Documentation - Mask Types</a></p>
                ]]>
        </Description>
        <HighlightedDescription>A masked input helps you restrict a control’s input and conform to a specific format. This demo illustrates various types of masked input and the validation settings associated with them.</HighlightedDescription>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>eval, bind, databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
                   This demo illustrates how different types of editors can be bound to data using standard data-binding expressions when residing within templates of a Detail View control. In the binding expressions, the Eval and Bind methods are used to bind editors to specific data field values and submit data changes made within the editor back to the database.
                </p>
                <p>
                    Note that the combo box editor used in this demo is additionally bound to a separate data source from which its item list is obtained dynamically.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="NativeMode" Title="Native Mode">
        <Description>
          <![CDATA[
                <p>
                    By default, most editors in the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) and Editors Library are rendered using a specially designed custom layout implemented with the help of standard HTML elements such as HTML tables, divs, spans, etc. This allows the editor's appearance to be fully customized by applying a specific style to each composite editor element. 
                </p>
                <p>
                    In some cases, the application logic may require rendering editors as native HTML INPUT elements. This demo illustrates how our editors (such as the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox">ASPxTextBox</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMemo">ASPxMemo</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton">ASPxButton</helplink>) support native rendering. 
                    In order to use an editor in native mode, set the Native property to <b>true</b>. In native mode, an editor's render size can be reduced significantly, improving the overall performance of the editor.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="EnableOnClient" Title="Enable on Client">
        <Keywords>clientenable, clientdisable</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how the availability of an editor can be controlled on the client side using the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEditBase.SetEnabled(value)">SetEnabled</helplink> method.
                </p>
                <p>
                    In this example, the choices in the second combo box (“Product”) change dynamically, based on the user’s selection in the first combo box (“Technology”). The Product combo box is not enabled until a selection is made in the Technology combo box, and the third combo box (“Version”) is not enabled until a product is selected in the Product combo box.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="DetectingChanges" Title="Detecting Changes (Dirty Form)" SeoTitle="Detecting Changes" 
            HighlightedTagNames="dx:ASPxCheckBoxList dx:ASPxTrackBar dx:ASPxTokenBox dx:ASPxGlobalEvents">
        <Keywords>dirty, form, detecting changes</Keywords>
        <Description>
          <![CDATA[
                <p>
                  This demo illustrates how to detect changes in a form and notify a user to save/cancel these changes before leaving the page.
                </p>
                <p>
                  For this, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.AttachEditorModificationListener.static(handler-predicate)">ASPxClientEdit.AttachEditorModificationListener</helplink> method to attach a handler to the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit">ASPxClientEdit</helplink>'s event which indicates whether a user modified the form's field values since the previous save. The new <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTextEdit.UserInput">ASPxTextEdit.UserInput</helplink> event allows tracking any changes within an editor.
                </p>
                <p>
                  After updating a form, the "Save Changes" and "Cancel Changes" buttons become available. When a user attempts to close the page without saving the changes, it raises the <a href="https://www.google.ru/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwi3wtq4npDXAhWHQpoKHdEjCJ4QFggmMAA&url=https%3A%2F%2Fwww.w3schools.com%2Fjsref%2Fevent_onbeforeunload.asp&usg=AOvVaw1rTu-bngVQ0q0P-A4PR9kG">onbeforeunload</a> event, and the "Confirm" dialog is shown.
                </p>
                ]]>
        </Description>
        <SourceFile>~/Scripts/DirtyForm.js</SourceFile>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Validation" Title="Validation" HighlightedTagNames="dx:ASPxSpinEdit dx:ASPxDateEdit dx:ASPxTextBox dx:ASPxTextBox dx:ASPxComboBox dx:ASPxGridLookup dx:ASPxMemo">
      <Keywords>valide, validate, invalidate</Keywords>
      <Demo Key="Inplace" Title="Inplace Validation" SeoTitle="Inplace Validation" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/InplaceValidation.png" HighlightedTitle="Inplace Validation">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET editors provide a powerful and seamless way to perform data validation on both the client and server.
                </p>
                <p>
                    Different validation settings can be customized for an editor using specific properties available via the 
                    <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEdit.ValidationSettings">ValidationSettings</helplink> property of the editor.
                </p>
                <p>
                    Editor validation logic can be defined in the following ways (which can be combined, if required):
                </p>
                <ul>
                    <li>
                        The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.RequiredField">ValidationSettings.RequiredField</helplink> property can be used to force an editor to require input, and display an error message if input is not received.
                    </li>
                    <li>
                        The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.RegularExpression">ValidationSettings.RegularExpression</helplink> property is used to validate the value of an editor based on a regular expression. 
                    </li>
                    <li>
                        An editor's Validation event can be handled on either the client or server (or both) to setup editor validation.
                    </li>
                </ul>
                <p>
                    In this demo, the validation check is triggered by clicking the 'OK' ASPxButton control or by changing the editor's value (if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.ValidateOnLeave">ValidationSettings.ValidateOnLeave</helplink> option is enabled).
                </p>
                <p>
                    When an editor fails validation logic, the following can be displayed:
                </p>
                    <ul>
                        <li>
                            Error image - To define an error image, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.ErrorImage">ValidationSettings.ErrorImage</helplink> property.
                        </li>
                        <li>
                            Error text - Text can be specified by using either the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.ErrorText">ValidationSettings.ErrorText</helplink> property or in the handler of the Validation event.
                        </li>
                        <li>
                            A specific error frame near the editor - The error frame's appearance is customized via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.ErrorFrameStyle">ValidationSettings.ErrorFrameStyle</helplink> property. You can also use the
                            <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.Display">ValidationSettings.Display</helplink> property to control how the error frame occupies its space around the editor.
                        </li>
                        <li>
                            Other similar settings can also be customized via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEdit.ValidationSettings">ValidationSettings</helplink> property.
                        </li>
                    </ul>
                <p>
                    Input focus can be forced back to the editor's input region. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.SetFocusOnError">ValidationSettings.SetFocusOnError</helplink> property controls the change in input focus.
                </p>
                <p>
                    This demo illustrates the built-in flexibility and efficiency of our validation engine, allowing you to easily implement different validation scenarios without using additional validation controls.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET editors provide a powerful way to perform data validation on both the client and server.</HighlightedDescription>
      </Demo>
      <Demo Key="Summary" Title="Validation Summary" SeoTitle="Validation Summary" HighlightedTagNames="dx:ASPxValidationSummary">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the main capabilities of the DevExpress ASP.NET Validation Summary (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxValidationSummary">ASPxValidationSummary</helplink>) control.
                </p>
                <p>
                    ASPxValidationSummary allows you to easily validate DevExpress editors within the form, and display a group of validation errors in a single panel.
                </p>
                <p>
                    The way that validation error text is displayed within the ASPxValidationSummary panel can be controlled using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxValidationSummary.RenderMode">RenderMode</helplink> property. It can be displayed as a table, or as a bulleted or ordered list.
                </p>
                <p>
                    Validation error text can also be displayed as links if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxValidationSummary.ShowErrorAsLink">ShowErrorAsLink</helplink> property is set to <b>true</b>. 
                    Clicking a link moves focus to the corresponding invalid editor.
                </p>
                <p>
                   Using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.SetFocusOnError">SetFocusOnError</helplink> property, input focus can automatically be moved to an invalid editor when the <b>Submit</b> button is clicked.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="ASPxBinaryImage" Title="Binary Image" SeoTitle="ASP.NET Binary Image Editor" HighlightedTagNames="dx:ASPxBinaryImage">
      <Keywords></Keywords>
      <Demo Key="ServerSideResizing" Title="Server-Side Resizing" SeoTitle="Binary Image Server-Side Resizing">
        <Keywords>server resizing, binary image</Keywords>
        <Description>
          <![CDATA[ 
    <p> This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage">ASPxBinaryImage</helplink> editor's ability to resize and crop images on the server. The editor is able to display images from a binary stream. The editor’s content (an array 
of bytes) can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.ContentBytes">ContentBytes</helplink> property. </p>
<p>You can specify the height (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.Height">Height</helplink>) and width (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.Width">Width</helplink>) of the image. By default the image is sent to the server in its original size and resized by the browser. Setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.EnableServerResize">EnableServerResize</helplink> property to true activates image resizing on the server. In this use-case, you can specify how the image fits via its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.ImageSizeMode">ImageSizeMode</helplink> property. Server resizing allows you to reduce the amount of data sent to the client. </p>
<p>Use the combo boxes above the editor to change image sizes and associated size mode. </p>
				    ]]>
        </Description>
      </Demo>

      <Demo Key="BinaryImageColumn" Title="Binary Image Column" SeoTitle="Binary Image GridView Data Column" HighlightedTagNames="dx:ASPxGridView">
        <Keywords></Keywords>
        <Description>
          <![CDATA[ 
          <p>This demo illustrates how to display a binary image column, which is implemented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataBinaryImageColumn">GridViewDataBinaryImageColumn</helplink> class in the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>).</p>
<p>In this demo, the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataBinaryImageColumn.PropertiesBinaryImage">PropertiesBinaryImage</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.EnableServerResize">EnableServerResize</helplink> property is set to <b>true</b>, allowing the server to resize binary images on the server side, based on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageHeight">ImageHeight</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ImageWidth">ImageWidth</helplink> properties. This reduces the amount of data sent to the client side.</p>
				    ]]>
        </Description>
      </Demo>
      <Demo Key="BinaryImageEditing" Title="Binary Image Editing" SeoTitle="Binary Image Editing" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/BinaryImageEditing.png">
        <Keywords></Keywords>
        <Description>
          <![CDATA[ 
<p>
The DevExpress ASP.NET Binary Image (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage">ASPxBinaryImage</helplink>) provides end-users with the fast and easy way to upload images on the server. By default, this functionality is disabled. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditingSettings.Enabled">EditingSettings.Enabled</helplink> property to true to allow end-users edit (upload) images.
</p>
<p>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage">ASPxBinaryImage</helplink> provides the following settings related to the editing feature.
</p>
<p>
<b>General Settings</b>
</p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditingSettings.AllowDropOnPreview">AllowDropOnPreview</helplink> property specifies if an image can be dropped on a preview area to upload it on the server.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage.ImageSizeMode">ImageSizeMode</helplink> property specifies how an image fits in the image area.</li>
</ul>
<p>
<b>Button Panel Settings</b>
</p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageButtonPanelSettings.Visibility">Visibility</helplink> property specifies the button panel visibility mode.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageButtonPanelSettings.Position">Position</helplink> property specifies the position of the button panel relative to the preview area.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageButtonPanelSettings.ButtonPosition">ButtonPosition</helplink> property specifies the position of buttons relative to the button panel.</li>
</ul>       
  		    ]]>
        </Description>
      <HighlightedDescription>This demo illustrates the DevExpress ASP.NET Binary Image (ASPxBinaryImage) ability to edit (upload) images on the server.</HighlightedDescription>
      </Demo>
      </DemoGroup>

    <DemoGroup Key="ASPxButton" Title="Button" SeoTitle="ASP.NET AJAX Button Control">
      <Keywords>submit, buttons, radiobutton</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedTagNames="dx:ASPxButton">
        <Description>
          <![CDATA[
                <p>
                    This sample demonstrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton">ASPxButton</helplink>'s client-side support for checked and disabled states.
                </p>
                <p>
                    The checked state of the ASPxButton is initially controlled by the server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Checked">Checked</helplink> property, and can be changed on the client side via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.SetChecked(value)">SetChecked</helplink> client method. To specify a group of button controls to create a mutually exclusive set of buttons, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.GroupName">GroupName</helplink> property can be used. When this property is set, only one ASPxButton in the specified group can be checked at a time.
                </p>
                <p>
                    The availability of the ASPxButton to end-users, which is initially set via the server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxWebControl.Enabled">Enabled</helplink> property, can dynamically be changed on the client side using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientButton.SetEnabled(value)">SetEnabled</helplink> client method.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Appearance" Title="Appearance Customization" HighlightedTagNames="dx:ASPxButton">
        <Description>
          <![CDATA[
          <p>
            The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton">ASPxButton</helplink> control provides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.RenderMode">RenderMode</helplink> property, which specifies appearance of the button: <b>Button</b>, <b>Danger</b>, <b>Outline</b>, <b>Secondary</b> and <b>Link</b>. Additionally, the ASPxButton control can be rendered as a native input element if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Native">Native</helplink> property is set to <b>true</b>.
          </p><p>
            The ASPxButton content can consist of text and an image. The button text can be specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Text">Text</helplink> property. A button image is determined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.Image">Image</helplink> property, and is displayed next to the text at the position specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.ImagePosition">ImagePosition</helplink> property.
          </p>
          ]]>
        </Description>
        <SourceFile>~/ASPxButton/Css/Appearance.css</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxCalendar" Title="Calendar" SeoTitle="ASP.NET AJAX Calendar Control" HighlightedTagNames="dx:ASPxCalendar">
      <Keywords>month, year, month-year, date, calendar, picker, dropdown, Month Year Picker</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">     
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Calendar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar">ASPxCalendar</helplink>) can be used to display a calendar, allowing end-users to select dates via an intuitive calendar. The main features of the ASPxCalendar control are listed below (along with the corresponding control settings):
</p>

<ul>
<li>
Date highlighting (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.HighlightToday">HighlightToday</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.HighlightWeekends">HighlightWeekends</helplink>);
</li>

<li>
Full control over calendar element visibility (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.ShowClearButton">ShowClearButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.ShowTodayButton">ShowTodayButton</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.ShowDayHeaders">ShowDayHeaders</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.ShowHeader">ShowHeader</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.ShowWeekNumbers">ShowWeekNumbers</helplink>);
</li>

<li>
Single date selection (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.SelectedDate">SelectedDate</helplink>);
</li>

<li>
Multiple date selection (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.EnableMultiSelect">EnableMultiSelect</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.SelectedDates">SelectedDates</helplink>);
</li>

<li>
Fast Navigation Mode (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.DisplayMode">FastNavProperties.DisplayMode</helplink>).
</li>

<li>
Month-Year Picker Mode  (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.PickerType">ASPxCalendar.PickerType</helplink>)
</li>
</ul>

<p>
This demo illustrates the primary features of ASPxCalendar. Use the options on the right to change the values of the corresponding ASPxCalendar properties, and see how they affect the control.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="InlineFastNavigation" Title="Inline Fast Navigation">
        <Keywords>inline, fast, navigation</Keywords>
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Calendar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar">ASPxCalendar</helplink>) can display the fast navigation panel in the editor or a popup window depending on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.DisplayMode">DisplayMode</helplink> property. This demo illustrates the fast navigation panel's main settings listed below:
              </p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.MinZoomLevel">MinZoomLevel</helplink> - Specifies the minimum zoom level where a user can select a date.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.EnablePeriodNavigation">EnablePeriodNavigation</helplink> - Specifies whether a user can navigate through periods within the calendar's fast navigation panel.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarFastNavProperties.ShowFastNavHeaderBackElement">ShowFastNavHeaderBackElement</helplink> - Specifies whether the fast navigation panel contains a button which allows a user to return to the previous period (months, years, days). </li>
              </ul>
              <p>
                Use the options in the demo to see how they affect the editor's behavior and appearance.
              </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="MultiMonth" Title="Multi-Month View">
        <Keywords>few, multimonth, several</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Calendar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar">ASPxCalendar</helplink>) editor can display multiple months at the same time, organizing them in several rows and columns. This feature is controlled by a combination of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.Rows">Rows</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.Columns">Columns</helplink> property values.
</p>

<p>
In multi-month view, multiple date selection (controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.EnableMultiSelect">EnableMultiSelect</helplink> property) is still allowed, giving end-users an easy way to select multiple dates via multiple visual calendars.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="DayRender" Title="Custom Day Rendering">
        <Keywords>dayrendering, blog</Keywords>
        <Description>
          <![CDATA[
                <p>
		The DevExpress ASP.NET Calendar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar">ASPxCalendar</helplink>) editor allows you to change the way in which calendar days are rendered. The following events can be handled to customize the appearance and functionality of a day cell: 
		</p>

		<ul>
		<li>
		the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DayCellInitialize">DayCellInitialize</helplink> event occurs before a day cell is created. This event allows you to specify whether or not the processed day is a weekend day; this event also allows you to change the day text, and set the hyper link and target of the cell;
		</li>
		<li>
		the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DayCellCreated">DayCellCreated</helplink> event occurs after a day cell is created. This event allows you to populate the cell with custom controls;
		</li>
		<li>
		the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DayCellPrepared">DayCellPrepared</helplink> event occurs before a day cell is rendered. This event allows you to customize the cell appearance.
		</li>
		</ul>

		<p>
		In this demo, a calendar displays information about notes scheduled in October. A list of October notes is stored within an xml file. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DayCellInitialize">DayCellInitialize</helplink> event is handled to set hyperlinks for calendar days that correspond to one or more associated notes. A click on a hyperlink sends a callback to the server to obtain the corresponding note information. The information obtained is then displayed within a popup window. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DayCellPrepared">DayCellPrepared</helplink> event is handled to specify special style settings for the days with notes.
		</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CustomDisabledDates" Title="Custom Disabled Dates">
        <Keywords>dates disabling</Keywords>
        <Description>
          <![CDATA[
               <p>The DevExpress ASP.NET Calendar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar">ASPxCalendar</helplink>) control allows you to disable the selection of specific days by end-users. To specify the dates to be disabled, the control provides the following two approaches, which can be used together or separately.</p>
<ul>
    <li>The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCalendar.CustomDisabledDate">CustomDisabledDate</helplink> and server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.CustomDisabledDate">CustomDisabledDate</helplink> events allow you to disable the selection of dates when they can be defined by custom rules. In this demo, the leftmost calendar control uses these events to disable all dates that fall on a Wednesday.</li>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCalendar.DisabledDates">DisabledDates</helplink> collection allows you to disable random dates. In this demo, the rightmost calendar control uses this collection to specify a list of disabled dates.</li>
</ul>
                
          ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Calendar (ASPxCalendar) control allows you to disable the selection of specific dates by end-users. This demo illustrates how to specify the disabled dates using a collection of date objects, and how to disable dates defined by custom rules using client-side and server-side events.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxCaptcha" Title="Captcha" SeoTitle="ASP.NET AJAX Captcha Control">
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedTagNames="dx:ASPxCaptcha">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the primary features of the DevExpress ASP.NET Captcha (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha">ASPxCaptcha</helplink>) control.
                </p>
                <p>
                    The ASPxCaptcha is a CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) control used to verify that data is submitted by a human, and not a robot or script. The ASPxCaptcha control can be used to effectively prevent comment spam on blogs, automated voting in online polls, and automatic creation of user accounts.
                </p>
                <p>
                    The main functional elements of the ASPxCaptcha control are the Challenge Image, the Refresh Button and the Text Box. The ASPxCaptcha control offers a flexible way to customize its appearance and layout by setting up these individual elements. 
                </p>
                <p>
                    A Challenge Image is an automatically generated image displaying random text. It presents a challenge to an end-user, which can easily be solved by a human, but difficult for a computer. The Challenge Image settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.ChallengeImage">ChallengeImage</helplink> property. To define a set of characters from which random text should be generated, use the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.CharacterSet">CharacterSet</helplink> property. You can control the number of characters to be displayed within the Challenge Image using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.CodeLength">CodeLength</helplink> property.
                </p>
                <p>
                    The ASPxCaptcha control's Refresh button allows an end-user to change the code displayed by the Challenge Image. This is useful when the currently displayed code cannot be easily recognized by the user. To control the content and appearance of the Refresh button, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.RefreshButton">RefreshButton</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.RefreshButtonStyle">RefreshButtonStyle</helplink> properties. 
                    If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.EnableCallBacks">EnableCallbacks</helplink> property is set to <b>true</b>, clicking the Refresh Button sends a callback to generate and display another challenge code. To specify the settings of the loading panel displayed during callbacks, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.LoadingPanel">LoadingPanel</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.LoadingPanelImage">LoadingPanelImage</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.LoadingPanelStyle">LoadingPanelStyle</helplink> properties.
                </p>
                <p>
                    The Text Box element of the ASPxCaptcha control allows end-users to input the text displayed in the Challenge Image. When a user submits information to the server, the ASPxCaptcha control verifies whether or not the text was input by a human. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.IsValid">IsValid</helplink> property to determine if the entered text coincides with the automatically generated code.
                 </p>   
                 <p>   To customize the content and layout of the Text Box element, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.TextBox">TextBox</helplink> property. The element's appearance can be defined using properties available via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.TextBoxStyle">TextBoxStyle</helplink> property. The text box element has a built-in validation mechanism whose behavior can be customized using the settings accessed via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.ValidationSettings">ValidationSettings</helplink> property. Its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Captcha.CaptchaValidationSettings.SetFocusOnError">SetFocusOnError</helplink> setting controls whether input focus can forcibly be moved back to the text box element if an input value is invalid.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CustomAppearance" Title="Custom Appearance">
        <Description>
          <![CDATA[
                <p>
                    This demo shows how a CAPTCHA control with a custom appearance can be implemented using the server and client API of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha">ASPxCaptcha</helplink> control.
                </p>
                <p>
                   In this demo, the functional elements of the control's Refresh button and Text Box are hidden. Element functionality is implemented in a custom manner using separate controls. Thus, the Refresh button is displayed via the IMG element, and the Text Box is displayed via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxLabel">ASPxLabel</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox">ASPxTextBox</helplink> controls. The Text Box element's built-in validation functionality is also disabled. Two ASPxLabel controls are used to display validation results.
                </p>
                <p>
                    When the form is submitted, manual verification of the input text is performed on the server side by comparing the text with the value of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCaptcha.Code">Code</helplink> property of ASPxCaptcha. This property determines the textual representation of the code displayed within the Challenge Image.
                </p>
                ]]>
        </Description>
        <SourceFile>~/ASPxCaptcha/Css/CustomAppearance.css</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxCheckBox" Title="Check Box" SeoTitle="ASP.NET AJAX Check Box Editor">
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
            <p>
              This demo illustrates the ASPxCheckBox editor's main features. The DevExpress ASP.NET Check Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox">ASPxCheckBox</helplink>) is a check editor that indicates whether a particular condition is on or off. It is commonly used to present a Yes/No or True/False selection. An end-user can switch between check states by clicking the editor or pressing the SPACE key when the editor is focused.
            </p>
            <ul>
            <li>
             Two or Three States
            <p>
              The ASPxCheckBox editor supports two or three states, depending on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.AllowGrayed">AllowGrayed</helplink> property setting. To set the state programmatically, use either the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.Checked">Checked</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.CheckState">CheckState</helplink> property. <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.Checked">Checked</helplink> is Boolean and supports only checked and unchecked states. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.CheckState">CheckState</helplink> property allows you to select one of three states: checked, unchecked and indeterminate. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.AllowGrayed">AllowGrayed</helplink> property to <b>true</b> to enable the indeterminate state. In the three-state mode, you can also use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.AllowGrayedByClick">AllowGrayedByClick</helplink> property to control whether end-users are allowed to switch the editor to the indeterminate state or whether this can only be done programmatically.
            </p>
            </li>
            <li>
              Custom Images for Check Box
            <p>
             A checkbox is an image within the ASPxCheckBox editor by default. Assigning your images to different checkbox states is also possible using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.CheckedImage">CheckedImage</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.UncheckedImage">UncheckedImage</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.GrayedImage">GrayedImage</helplink> properties.
            </p>
            </li>
            <li>
              Native Rendering
            <p>
              The ASPxCheckBox supports native rendering by exposing the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.Native">Native</helplink> property. Set this property to <b>true</b> to render the ASPxCheckBox as a CHECKBOX type native HTML INPUT element. This reduces the rendering size and improves the editor's overall performance. In native mode, the ASPxCheckBox behaves like a standard HTML checkbox - two states without images. 
            </p>
            </li>
            <li>
              Toggle Switch Mode
            <p>
              ASPxCheckBox allows transforming the checkbox's default representation into a toggle switch using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBox.ToggleSwitchDisplayMode">ToggleSwitchDisplayMode</helplink> property. 
            </p>
            </li>
            </ul>
            <p>
              In this demo, try to switch the ASPxCheckBox's checked state by clicking the "Switch" button. The "Gray out" button allows you to set the check box's grayed state. 
            </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxColorEdit" Title="Color Editor" SeoTitle="ASP.NET Color Picker Editor" HighlightedTagNames="dx:ASPxColorEdit">
      <Keywords>pallete, Custom Colors, Color Picker</Keywords>
      <Demo Key="Example" Title="Example" SeoTitle="Custom Colors">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Color Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit">ASPxColorEdit</helplink>) editor allows end-users to easily set a background, border or font color (among other elements). You can type the value directly into the editor's text box, select a color from the color palette in the editor's dropdown window, or use the optional color picker to select a custom color. End-users can specify colors by typing directly within the edit box by using longhand or shorthand hexadecimal notation (HEX) for RGB color values (#f0f, #D8D8D8, etc.), or by using standard HTML color names ("red", "green", etc.), which are then automatically converted to color codes.
                </p>
                <p>The custom color picker can be invoked by clicking the <b>Custom Color…</b> button in the color palette dropdown. The button is not displayed by default. You can show it by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.EnableCustomColors">EnableCustomColors</helplink> property to <b>true</b>.</p>
                <p>
                The number of color palette columns is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.ColumnCount">ColumnCount</helplink> property. In this demo, use the <b>Column Count</b> spin edit to specify the column count.
                </p>
                <p>
                The <b>Palettes</b> combo box allows you to set one of the predefined color palettes, which is created programmatically using the properties and methods exposed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColorEditItemCollection">ColorEditItemCollection</helplink> collection (see the C# or VB code).
                </p>
                <p>
                    In this demo, ASPxColorEdit instances are used to specify background and foreground colors for the header and content elements of an ASPxRoundPanel control. For this purpose, each editor's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientColorEdit.ColorChanged">ColorChanged</helplink> event is handled to respond to a color change within the editor, and to send a callback using the ASPxCallbackPanel's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCallbackPanel.PerformCallback(parameter)">PerformCallback</helplink> method. On the server side, the selected color is obtained via the editor's  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxColorEdit.Color">Color</helplink> property value and applied to the corresponding property of the ASPxRoundPanel control. 
                </p>
                ]]>
        </Description>
      <HighlightedDescription>The DevExpress ASP.NET Color Edit (ASPxColorEdit) control allows end-users to enter a color by typing its value directly into the editor's text box, by selecting a color from the color palette in the editor's dropdown window, or by using the optional color picker to select a custom color. This demo shows how to specify a control’s color palette, and demonstrates the custom color picker functionality.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxComboBox" Title="Combo Box" SeoTitle="ASP.NET AJAX Autocomplete Combo Box" HighlightedTagNames="dx:ASPxComboBox">
      <Keywords>combobox, select, dropdown, autocomplete</Keywords>
      <Demo Key="ServerMode" Title="Large Database (Server Mode)" SeoTitle="Large Database (Server Mode)">
        <Keywords>tokenbox, large database, server mode, search, performance, filter, database, autocomplete, servermode, entity</Keywords>
        <Description>
          <![CDATA[
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> control supports the database Server mode when the editor is bound to the built-in <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.LinqServerModeDataSource">LinqServerModeDataSource</helplink> data providing components. These data sources automatically create requests to a data table and load only required data to the server memory.</p>
            <p>In Server mode, the combo box can bind to large datasets which should not be loaded to the server memory on each request (like in case of other data sources).</p>
            <p>To enable the database server mode, bind a combo box to a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.LinqServerModeDataSource">LinqServerModeDataSource</helplink> data providing component and set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.EnableCallbackMode">EnableCallbackMode</helplink> property to true. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.CallbackPageSize">CallBackPageSize</helplink> property allows you to control the number of records loaded on the client on each request. In this case, the control sends a callback to the server when a user scrolls or filters the editor.</p>
            <p>Note that the server-mode data sources (LinqServerModeDataSource or EntityServerModeDataSource) generate SQL requests automatically. Refer to the <a href="LargeDataSource.aspx">Custom Data Binding</a> demo that illustrates how to implement a custom data loading logic.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="LargeDataSource" Title="Custom Data Binding" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Combobox.png" HighlightedTitle="Combo Box - Filtering a Large Data Source">
        <Keywords>search, performance, filter, database, autocomplete, custom binding</Keywords>
        <Description>
          <![CDATA[
            <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> supports custom data binding and filtering that allow you to populate the editor with data according to your custom scenario. </p>
            <p>In this demo, the ASPxComboBox does not perform filter operations at the database level directly. Instead, the editor handles the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.ItemsRequestedByFilterCondition">ItemsRequestedByFilterCondition</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.ItemRequestedByValue">ItemRequestedByValue</helplink> events and uses LINQ expressions to target a data source and retrieve small portions of data. </p>
            <p>When ASPxComboBox is in incremental filtering mode, it has the capability to start filtering only after an end-user has typed a specific number of symbols in the editor's text box. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.FilterMinLength">FilterMinLength</helplink> property can be used to define the minimum length of the filter string input. Once the minimum length is reached, filtering operations are initiated.</p>
            <p>This behavior is extremely useful when ASPxComboBox works with a large amount of data. In this case, due to the large size of the data set, performing filtration on each typed symbol is inefficient and may affect application performance. Thus, by delaying the start of filter operations using this minimum length requirement, you can provide end-users with more accurate results and improve performance of your page.</p>
            <p>Refer to the "<a href="ServerMode.aspx">Large Database (Server Mode)</a>" demo to review how to generate SQL requests to a large database automatically using the LinqServerModeDataSource or EntityServerModeDataSource data sources.</p>
          ]]>
        </Description>
      <HighlightedDescription>This demo shows how you can filter a large data source with Combo Box (ASPxComboBox) editor.</HighlightedDescription>
      </Demo>
      <Demo Key="IncrementalFiltering" Title="Incremental Filtering">
        <Keywords>autocomplete, auto complete dropdown</Keywords>
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) editor enables end-users to filter list items dynamically based on the text typed into the editor's input box on the client side (“find-as-you-type” filtering). The following filter modes are available, which are controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.IncrementalFilteringMode">IncrementalFilteringMode</helplink> property:
                </p>
                <ul>
                    <li><b>Contains</b> - The editor is filtered for list items that contain the search string. The search string matches are highlighted.</li>
                    <li><b>StartsWith</b> - The editor is filtered for list items that begin with the search string. The editor value is autocompleted with the first corresponding value.</li>
                    <li><b>None</b> - Filtering is not applied to list items.</li>
                </ul>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.DropDownStyle"> DropDownStyle </helplink> property specifies the manner in which end-users can change the edit value of the editor.</p>
                <ul>
                    <li><b>DropDown</b>   - End-users are allowed to change the editor's edit value by either selecting an item from the dropdown list or entering new values into the edit box.</li> 
                    <li><b>DropDownList</b>  - End-users are allowed to change the editor's edit value only by selecting an item from the dropdown list.</li>
                </ul>
                <p>
                    In this demo, both the 'Contains' and 'StartsWith' filter modes are demonstrated. Note that in the 'Contains' filter mode, the value typed in the edit box by an end-user is searched for within the editor's item list, based on the defined format of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.TextFormatString">TextFormatString</helplink> property.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CallbackMode" Title="Callback Mode" SeoTitle="Loading Data on Demand">
        <Keywords>ajax,demand,loadondemand,paging</Keywords>
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) allows items to be loaded from the server on demand via callbacks, if its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.EnableCallbackMode">EnableCallbackMode</helplink> property is set to <b>true</b>. For instance, list items that are not currently displayed within the editor's dropdown window can be loaded dynamically when an end-user scrolls the list. In this mode, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.CallbackPageSize">CallBackPageSize</helplink> property defines the number of items to be obtained from the server each time it's required. This mode makes the first page load much faster, since only a few items need to be loaded initially.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientAPI" Title="Cascading Combo Boxes">
        <Keywords>comboboxes, cascade</Keywords>
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) control allows content (the item list) to be updated via callbacks using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.PerformCallback(parameter)">PerformCallback</helplink> client method. In this demo, the 'City' combo box is populated on the fly with city names that correspond to the currently selected country from the 'Country' combo box.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="MultiColumn" Title="Multiple Columns">
        <Keywords>grid, table</Keywords>
        <Description>
          <![CDATA[
                <p>
                   The DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) and List Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink>) editors allow list data to be displayed in several columns. Multi-column mode is only in effect for editors that obtain items from a data source. An editor's column collection can be defined and customized through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.Columns">Columns</helplink> property. Each column within this collection should be bound to a data source field via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListBoxColumn.FieldName">FieldName</helplink> property. You can also define a column's header caption, width, visibility state and other settings via its properties.
                </p>
                <p>
                    For the ASPxComboBox control, all advanced features such as incremental filtering and loading items on demand via callbacks are supported in multi-column mode. The selected item is displayed within the edit box of the ASPxComboBox editor using a value whose format is based on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.TextFormatString">TextFormatString</helplink> property setting.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ImageEditBox" Title="Image in Edit Box">
        <Keywords>imageitem, images</Keywords>
        <Description>
          <![CDATA[
                <p>
                   By default, images associated with list items are displayed within the editor's dropdown list. This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox.ShowImageInEditBox">ShowImageInEditBox</helplink> property can be used to display an image of the selected item within the editor's edit box in addition to the text. 
                </p>
                <p>
                    Note that the DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) provides the following ways to define item images:
                </p>
                <ul>
                    <li>
                        The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.ImageUrl">ImageUrl</helplink> property of an item can be used to define images for individual items.
                    </li>
                    <li>
                        The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.ItemImage">ItemImage</helplink> property of the editor can be used to set a uniform image for all items. 
                    </li>
                    <li>
                        If the editor is bound to data, the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoCompleteBoxPropertiesBase.ImageUrlField">ImageUrlField</helplink> property can be used to specify a data field containing item image URLs.
                    </li>
                </ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ItemAppearanceCustomization" Title="Item Appearance Customization" SeoTitle="Item Appearance Customization">
        <Keywords></Keywords>
        <Description>
          <![CDATA[
                <p>This demo illustrates how to specify style settings for <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> items using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemTextCellPrepared">ItemTextCellPrepared</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemRowPrepared">ItemRowPrepared</helplink> events.
                </p>
                
                <p>To customize the appearance of the "Contact Name" and "Phone" columns in the editor, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemTextCellPrepared">ItemTextCellPrepared</helplink> event is used. Cells in the "Contact Name" column are marked with the green color if the "Title" field value of a corresponding record in the data base is "Owner". These cells have a tooltip that displays the "Owner" text. In the "Phone" column, all phone numbers are italicized and marked with the red color.
                </p>
                
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemRowPrepared">ItemRowPrepared</helplink> event is used to specify rows with a custom tooltip that shows information from the "Country", "City", and "Address" fields.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ItemTemplate" Title="Item Template" HighlightedIndex="1" HighlightedTitle="Combo Box Item Template" HighlightedImageUrl="~/Content/DemoIcons/ComboboxItemTemplate.png" SeoTitle="Item Template">
        <Keywords></Keywords>
        <Description>
          <![CDATA[
                <p>DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) provides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemTemplate">Item Template</helplink> to create a custom layout for its items.
                </p>
                
                <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.ItemTemplate">Item Template</helplink> is used to display a combo box item in a card-like view. Each item shows a contact's name, address, phone number and email address whose values are taken from corresponding data fields of the bound data source using the Eval function.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>DevExpress ASP.NET Autocomplete Combo Box provides the Item Template to create a custom layout for its items.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomFiltering" Title="Custom Filtering">
        <Keywords>fiter, custom, search</Keywords>
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Autocomplete Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) editor enables you to implement custom filtering logic using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.CustomFiltering">CustomFiltering</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.ItemFiltering">ASPxClientComboBox.ItemFiltering</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.CustomHighlighting">ASPxClientComboBox.CustomHighlighting</helplink> events.</p>
                <p>In this demo, the first combo box illustrates how to filter items by several words and multiple columns simultaneously on the server side using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.CustomFiltering">CustomFiltering</helplink> event.  If an end-user types a search phrase, the editor dynamically divides the phrase (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.Filter">ListEditCustomFilteringEventArgs.Filter</helplink>) into individual words, creates a filter expression (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.FilterExpression">ListEditCustomFilteringEventArgs.FilterExpression</helplink>), finds each word in each column and highlights them (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditCustomFilteringEventArgs.CustomHighlighting">ListEditCustomFilteringEventArgs.CustomHighlighting</helplink>).</p>
                <p>Using the second combo box, end-users can filter items that contain diacritic characters (German cities) on the client side. The editor raises the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.ItemFiltering">ASPxClientComboBox.ItemFiltering</helplink> event for each item as the user types the search text and replaces diacritic characters with Latin ones if required. The <b>indexOf</b> function filters the editor items that match the filter criteria. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.CustomHighlighting">ASPxClientComboBox.CustomHighlighting</helplink> event allows specifying rules (regular expression or filter condition) according to which the editor highlights the filter results by the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListEditCustomHighlightingEventArgs.highlighting">ASPxClientListEditCustomHighlightingEventArgs.highlighting</helplink> property.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="DateTime" Title="Date and Time" HighlightedTagNames="dx:ASPxDateEdit dx:ASPxTimeEdit">
      <Keywords>date, time</Keywords>
      <Demo Key="DateEditor" Title="Date Editor">
        <Keywords>calendar, timer, clock, minutes, hours, seconds, year, month, day</Keywords>
        <Description>
          <![CDATA[
<p>
This demo illustrates the DevExpress ASP.NET Date Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink>) control that simplifies inputting date values. 
</p>
<p>
ASPxDateEdit allows end-users to edit date and time values using a drop-down calendar with a time section, or directly within the edit box. The time section is optional and can be displayed using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.Visible">TimeSectionProperties.Visible</helplink> property.
</p>
<p>
The main ASPxDateEdit options are listed below. 
</p>
<ul>
<li>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormat">EditFormat</helplink> property is used to specify how editor values are represented within edit boxes. For display and edit purposes, the edited value can be formatted as a date (EditFormat.Date), time (EditFormat.Time), a date and time (EditFormat.DateTime), or a custom format (EditFormat.Custom). If the editor format is specified as custom, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormatString">EditFormatString</helplink> property is used to specify the edit value's format pattern.
</p>
</li>
<li>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property allows you to specify the display view format within the edit box (when the editor is not focused).
</p>
</li>
<li>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.UseMaskBehavior">UseMaskBehavior</helplink> property is used to enable/disable a masked input.
</p>
</li>
</ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="TimeEditor" Title="Time Editor">
        <Keywords>calendar, timer, clock, minutes, hours, seconds, year, month, day</Keywords>
        <Description>
          <![CDATA[
<p>
This demo illustrates the DevExpress ASP.NET Time Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit">ASPxTimeEdit</helplink>) control that makes it easier for end-users to input time values. 
</p>
<p>
The value of ASPxTimeEdit can be modified using spin buttons, or directly within the edit box.
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormat">EditFormat</helplink> property is used to specify how editor values are represented within edit boxes. For display and edit purposes, the edited value can be formatted as a date (EditFormat.Date), time (EditFormat.Time), date with time (EditFormat.DateTime), or custom format (EditFormat.Custom). If the editor format is specified as custom, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.EditFormatString">EditFormatString</helplink> property is used to specify the format pattern of the edit value.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.DisplayFormatString">DisplayFormatString</helplink> property allows you to specify the display view format within the edit box (when the editor is not focused).
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimeEdit.AllowNull">AllowNull</helplink> property is used to enable/disable a null value in ASPxTimeEdit.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="DateRangePicker" Title="Date Range Picker" HighlightedTagNames="dx:ASPxDateEdit" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/DateRange.png">
        <Keywords>date, range, picker, control, calendar</Keywords>
        <Description>
          <![CDATA[
    <p>Two DevExpress ASP.NET Date Edit controls (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink>) can be combined to introduce date range selection capabilities in your web application. One editor is used to specify the start date, another to specify the end date. To link editors, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditRangeSettings.StartDateEditID">StartDateEditID</helplink> property of the end-date editor to the ID value of the start-date editor. </p>
<p>You can customize date range settings using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.DateRangeSettings">DateRangeSettings</helplink> property, which provides access to the following properties: </p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditRangeSettings.MinDayCount">MinDayCount</helplink> - specifies the minimum number of days in a range.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditRangeSettings.MaxDayCount">MaxDayCount</helplink> - specifies the maximum number of days in a range.</li>
</ul>
<p>Note: Date range settings should be specified for the end-date editor. <p>
<p>In this demo, the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDateEdit.GetRangeDayCount">GetRangeDayCount</helplink> method is used in the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDateEdit.DateChanged">DateChanged</helplink> event handler to calculate the number of days in a specified range. If the number of days in the specified range exceeds specified range limits, an error message is displayed when the <b>Submit</b> button is clicked. </p>
                ]]>
        </Description>
        <HighlightedDescription>Date range picker can be implemented by combining two DevExpress ASP.NET Date Edits (ASPxDateEdit) controls. This demo illustrates the main features provided by the date edit for range selection functionality.</HighlightedDescription>
      </Demo>
    <Demo Key="MonthYearPicker" Title="Month-Year Picker" HighlightedImageUrl="~/Content/DemoIcons/MonthYearPicker.png" HighlightedTagNames="dx:ASPxDateEdit" HighlightedIndex="6">
        <Keywords></Keywords>
        <Description>
          <![CDATA[
   <p>The DevExpress ASP.NET Calendar supports the month-year picker mode. In this mode, you can specify which date component an end-user can select in the control: a day, a month or a year.</p>
   <p>You can click the header to change the calendar view (fast navigation). The following settings allow you to specify the date selection and restrict the available calendar views:</p>
   <p><b>Date Selection Settings</b></p>
   <ul>
   <li><b>PickerType</b> - Specifies a date component an end user can select (a day, month or year).</li>
   </ul>
   <p><b>Fast Navigation Settings</b></p>
   <ul>
   <li><b>FastNavProperties.InitialView</b> - Specifies the initial Calendar view.</li>
   <li><b>FastNavProperties.MaxView</b> - Specifies the earliest available Calendar view. For example, if the MaxView property is set to "Months", the picker displays the months of a particular year and January is the earliest available Calendar view item.</li>
   </ul>
                ]]>
        </Description>
        <HighlightedDescription></HighlightedDescription>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="ASPxDropDownEdit" Title="Dropdown Editor" SeoTitle="ASP.NET AJAX Drop Down Editor" HighlightedTagNames="dx:ASPxDropDownEdit">
      <Demo Key="DropDownEdit" Title="Tree List Lookup">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Drop-down Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink>) represents an editor containing an edit box to display the editor value (defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.Text">Text</helplink> property) and a specific button that opens a drop-down window whose content can be templated (using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit.DropDownWindowTemplate">DropDownWindowTemplate</helplink> property). The ASPxDropDownEdit allows you to define its value based on the value of another control (or the values of other controls) integrated into the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit.DropDownWindowTemplate">DropDownWindowTemplate</helplink>.
                </p>
<p>In this demo, a DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) control is placed in the dropdown window template of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink>. To change the editor value, select a <b>Tree List</b> node and click the <b>Select</b> button. A specific client API exposed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink> is used in this demo to assign text and a value to the editor (the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTextEdit.SetText(text)">SetText</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDropDownEdit.SetKeyValue(keyValue)">SetKeyValue</helplink> methods), and hide the editor's dropdown window (the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDropDownEditBase.HideDropDown">HideDropDown</helplink> method).</p>
                ]]>
        </Description>
         <SourceFile>~/App_Code/EmployeeSessionProvider.cs</SourceFile>
      </Demo>
      <Demo Key="CheckComboBox" Title="CheckComboBox Emulation" SeoTitle="Multi-Select ComboBox Emulation">
        <Keywords>check, checkbox</Keywords>
        <Description>
          <![CDATA[
                <p>
                    There are times when you may wish to have a combo box editor on your page that allows multiple selection. In the DevExpress web editors library, multiple item selection is built into the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink> editor by default, but the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> editor does not have this functionality. This demo illustrates how you can use a combination of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink> and ASPxListBox editors to emulate a combo box that allows end-users to select multiple items within its dropdown list.
                </p>
                <p>
                    In this demo, a template of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit.DropDownWindowTemplate">DropDownWindowTemplate</helplink> type is created within the ASPxDropDownEdit. This template contains an instance of the ASPxListBox editor, whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectionMode">SelectionMode</helplink> property is set to the CheckColumn value. Also, you can use the list box's built-in <b>SelectAll</b> feature (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableSelectAll">EnableSelectAll</helplink>) and implement filtering of underlying data source values using the filter editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListBoxFilteringSettings.ShowSearchUI">ShowSearchUI</helplink>). The ASPxDropDownEdit's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextEdit.Text">Text</helplink> property stores a list containing selected items (that is, values of their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">Text</helplink> property), separated by semicolons. In addition to selecting items within the dropdown list, this demo allows end-users to select items by entering semicolon-separated series of an item text into the ASPxDropDownEdit edit box. If the text of an item that does not exist is entered, it is deleted from the edit box.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

  
    <DemoGroup Key="ASPxFilterControl" Title="Filter Control" SeoTitle="ASP.NET AJAX Filter Builder Control" HighlightedTagNames="dx:ASPxFilterControl" >
      <Keywords>filtering, condition</Keywords>
      <Demo Key="FilterExpression" Title="Data Source Expressions" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/FilterControl.png" HighlightedTitle="Filter Control - Data Source Expressions">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the ability to generate database system-specific filter expressions using the DevExpress ASP.NET Filter Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControl">ASPxFilterControl</helplink>). The ASPxFilterControl provides the following methods whose return values can be used as filter expressions ('WHERE' clauses) for the corresponding data source types:
                </p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.GetFilterExpressionForAccess">GetFilterExpressionForAccess</helplink></li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.GetFilterExpressionForOracle">GetFilterExpressionForOracle</helplink></li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.GetFilterExpressionForMsSql">GetFilterExpressionForMsSql</helplink></li>
                </ul>
                <p>
                     In addition, the obtained filter expression can be validated for completeness using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.IsFilterExpressionValid">IsFilterExpressionValid</helplink> method, which is available both on the server and client sides. This method checks whether or not all expression conditions are filled, and indicates if it is safe to apply the expression.
                </p>
                <p>
                    In this demo, a standalone <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControl">ASPxFilterControl</helplink> is used to compose MS Sql-specific filter criteria. These criteria are applied to data that is obtained from an object using an <b>ObjectDataSource</b>, and displayed by an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink> control
                    </p>
                <p>
                    The text of the filter expression being composed is displayed by a label below the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControl">ASPxFilterControl</helplink>. If a filter expression is not valid, this is indicated by the corresponding label text. 
                </p>
                <p>
                Clicking the <b>Apply</b> button validates the current filter expression, generates filter criteria by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.GetFilterExpressionForDataSet">GetFilterExpressionForDataSet</helplink> method call, and applies a filter expression to the data source control's <b>FilterExpression</b> property.
                </p>
                ]]>
        </Description>
      <HighlightedDescription>Tyis demo illustrates the Filter Control ability to generate database system-specific filter expressions.</HighlightedDescription>
      </Demo>
      <Demo Key="FilterBuilder" Title="External Filter for GridView">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates a stand-alone Filter Control that emulates the functionality of the built-in <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView"></helplink> Filter Control.
                </p>
                <p>
                    In this demo, to apply the filter, click the <b>Apply</b> button. This calls the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControl">ASPxFilterControl</helplink>'s client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFilterControl.Apply">Apply</helplink> method. When applied, the filter control's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFilterControl.Applied">Applied</helplink> client-side event is handled to filter the data of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>.
                </p>
                <p>
                   Use checkboxes displayed above the Filter Control to customize its functionality. 
                </p>
                <ul>
                <li>The <b>Enable text tab</b> checkbox (sets the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFilterControlBase.ViewMode">ViewMode</helplink> property) specifies the visibility of the text filter expression editor.</li>
                <li>The <b>Allow hierarchical columns</b> checkbox (sets the <b>allowHierarchicalColumns</b> parameter of the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxfiltercontrolbase.bindtosource.overloads">BindToSource</helplink> method) specifies if the Filter Control can display hierarchical columns. </li>
                </ul>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="ListEditors" Title="List Editors" SeoTitle="ASP.NET AJAX List Editors" HighlightedTagNames="dx:ASPxListBox dx:ASPxCheckBoxList dx:ASPxRadioButtonList dx:ASPxRadioButtonList">
      <Keywords>listbox, listedit, repeater</Keywords>
      <Demo Key="MultiSelect" Title="List Box with Multiple Selection">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET List Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink>) editor allows you to select multiple list items at the same time. The editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectionMode">SelectionMode</helplink> property controls selection behavior. Depending on this property's setting, the following selection modes are available within the ASPxListBox editor: 
                </p>
                <ul>
                    <li>
                        <b>Single</b> - End-users can select only one item within the editor.
                    </li>
                    <li>
                        <b>Multiple</b> - End-users can select multiple items within the editor by clicking list items while pressing Ctrl (to add an individual item) or Shift (to select a range of items).
                    </li>
                    <li>
                        <b>CheckColumn</b> - End-users can select multiple items within the editor by clicking list items. 
                    </li>
                </ul>
                <p>
                    When Multiple Selection is enabled, use the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Selected">Selected</helplink> property to specify individual items' selection state. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectedItems">SelectedItems</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.SelectedIndices">SelectedIndices</helplink> properties to obtain a collection of selected items. Also, to apply an item selection on the client side, use a specific client API (the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.GetSelectedItems">GetSelectedItems</helplink>, 
                    <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.SelectItems(items)">SelectItems</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.UnselectItems(items)">UnselectItems</helplink> client methods).
                </p>
                <p>
                    When the <b>CheckColumn</b> selection mode is enabled for the list box, end-users can select all items using the "Select All" check box at the top of the list box. To enable this feature, set the ASPxListBox's<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableSelectAll"> EnableSelectAll</helplink> option to true.
                </p> 
                <p>
                    Note that in multiple selection mode, all ASPxListBox's features are supported, except loading items on demand via callbacks (which the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableCallbackMode">EnableCallbackMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.CallbackPageSize">CallBackPageSize</helplink> properties usually control).
                </p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="MovingItems" Title="Moving Items between List Boxes">
        <Keywords>Move</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how all items, or only selected items, can be moved from one DevExpress ASP.NET List Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink>) to another on the client side in response to button clicks.
                </p>
                <p>
                    Selected items are obtained using an editor's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.GetSelectedItems">GetSelectedItems</helplink> method. Items are moved by removing them from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.Items">Items</helplink> collection of one editor (via the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.RemoveItem(index)">RemoveItem</helplink> method), and adding them to another editor (via the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.AddItem(text)">AddItem</helplink> method).
                </p>
                <p>
                    Note that the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.BeginUpdate">BeginUpdate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.EndUpdate">EndUpdate</helplink> methods are used by both editors to encapsulate the code that moves items. This is required to avoid repetitive operations (such as editor size correction) until all items are moved.
                </p>
                
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableSynchronization">EnableSynchronization</helplink> property set to true enables you to pass the items collection's changes to the server side. This also allows keeping the client changes between postbacks.</p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="ListBoxFiltering" Title="List Box Filtering" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/ListBoxFiltering.png" HighlightedTitle="List Box Filtering">
        <Keywords>Filtering</Keywords>
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET List Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox</helplink>) editor allows end-users to filter items by entering text in the filter editor above the list. To enable the filter editor, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListBoxFilteringSettings.ShowSearchUI">ShowSearchUI</helplink> property to <b>true</b>. The list box values that do not match the filter text are not displayed within the items list. When an end-user types a filter string, the items list is automatically updated, so the list box displays only the relevant items that match the filter string. Clear the filter editor to make all the list box items visible. 
                </p>
                <p>
                This demo illustrates the ASPxListBox's main filtering settings. Use the options on the right to see how they affect the editor's behavior and appearance. 
                </p>
                <ul>
                <li>
                <p>
                Custom Filter Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListBoxFilteringSettings.CustomEditorID">CustomEditorID</helplink>) - You can use an external DevExpress editor to specify the list box's filter criterion.
                </p>
                </li>
                <li>
                <p>
                Enable Callback Mode (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableCallbackMode">EnableCallbackMode</helplink>) - In this mode, the editor's list items are loaded to the client side on demand via callbacks.
                </p>
                </li>
                <li>
                <p>
                Enable Select All (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox.EnableSelectAll">EnableSelectAll</helplink>) - With the enabled "SelectAll" feature, use the filter button to make the filter editor visible at the top of the list box.
                </p>
                </li>
                </ul>
                ]]>
        </Description>
         <HighlightedDescription>The DevExpress ASP.NET List Box (ASPxListBox) editor allows end-users to filter items by entering text in the filter editor above the list.</HighlightedDescription>
      </Demo>

      <Demo Key="CheckBoxList" Title="Check Box List">
        <Keywords>Checkbox, collection</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Check Box List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList">ASPxCheckBoxList</helplink>) editor is a check box group that allows end-users to select multiple items. Its contents can be generated dynamically by binding the editor to a data source. You can also create items explicitly by populating the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.Items">Items</helplink> collection manually. For each list item, you can specify its caption and associated value.
</p>

<p>
The items selected within ASPxCheckBoxList can be determined by using specific properties declared at the editor level (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList.SelectedItems">SelectedItems</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList.SelectedIndices">SelectedIndicies</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList.SelectedValues">SelectedValues</helplink>). You can easily select/unselect all editor items using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList.SelectAll">SelectAll</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckBoxList.UnselectAll">UnselectAll</helplink> methods that are available on both the server and client sides.
</p>

<p>
The ASPxCheckBoxList layout can be flexibly customized. You can display check box items in several columns (via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatColumns">RepeatColumns</helplink>), set the direction of items within the editor (horizontal or vertical, via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatDirection">RepeatDirection</helplink> property), and specify whether items are aligned within a table or rendered without any table structure (via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatLayout">RepeatLayout</helplink>). 
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="RadioButtonList" Title="Radio Button List">
        <Keywords>Radio, collection</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Radio Button List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRadioButtonList">ASPxRadioButtonList</helplink>) editor is a radio button group that allows end-users to select a single item at a time. Its contents can be generated dynamically by binding the editor to a data source. You can also create items explicitly by populating the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.Items">Items</helplink> collection manually. For each list item, you can specify its caption and associated value.
</p>

<p>
The item selected within ASPxRadioButtonList can be determined by using specific properties declared at the editor level (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.SelectedItem">SelectedItem</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit.SelectedIndex">SelectedIndex</helplink>). You can easily get and set the selected item on the client side using specific client methods (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListEdit.GetSelectedItem">GetSelectedItem</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListEdit.SetSelectedItem(item)">SetSelectedItem</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListEdit.GetSelectedIndex">GetSelectedIndex</helplink>/<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListEdit.SetSelectedIndex(index)">SetSelectedIndex</helplink>).
</p>

<p>
The ASPxRadioButtonList layout can be flexibly customized. You can display radio button items in several columns (via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatColumns">RepeatColumns</helplink> property), set the direction of items within the editor (horizontal or vertical, via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatDirection">RepeatDirection</helplink> property), and specify whether items are aligned within a table or rendered without any table structure (via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCheckListBase.RepeatLayout">RepeatLayout</helplink> property). 
</p>

          ]]>
        </Description>
      </Demo>
      <Demo Key="CustomImages" Title="Custom Images">
        <Description>
          <![CDATA[
        	<p>
		The DevExpress ASP.NET Radio Button List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRadioButtonList">ASPxRadioButtonList</helplink>) editor allows you to specify images for its items. You can specify one image for all items within the control, or set a specific image for each item. 
		</p>
		<p>
		This demo illustrates how to specify custom images for radio buttons. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.ImageUrl">ImageUrl</helplink> property is used to specify the item image. To specify the item text, which is shown next to the image, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">Text</helplink> property is used.
		</p>
		<p>
		Note that ASPxCheckBoxList editor images can be specified in the same way.
		</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxProgressBar" Title="Progress Bar" SeoTitle="ASP.NET Progress Bar Control">
      <Demo Key="ProgressBar" Title="Progress Bar Column" HighlightedTagNames="dx:ASPxGridView">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how a progress bar column can be displayed within the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) control.
                </p>
                <p>
                    The grid contains a column of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataProgressBarColumn">GridViewDataProgressBarColumn</helplink> type. This column displays a progress bar, which provides end-users with the percentage representation of a column value based on the maximum and minimum value limits defined by the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Maximum">ProgressBarProperties.Maximun</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.Minimum">ProgressBarProperties.Minimum</helplink> properties. The availability of the percentage value displayed within a column progress bar can be controlled using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ProgressBarProperties.ShowPosition">ProgressBarProperties.ShowPosition</helplink> property.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ASPxSpinEdit" Title="Spin Editor" SeoTitle="ASP.NET AJAX Spin Editor" HighlightedTagNames="dx:ASPxSpinEdit">
      <Keywords>spineditor, decimal</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the primary features of the DevExpress ASP.NET Spin Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit">ASPxSpinEdit</helplink>).
                </p>
                <p>
                    The ASPxSpinEdit control enables your end-users to edit numeric values with ease by clicking small or large increment buttons. The visibility of these spin buttons is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinButtons.ShowIncrementButtons">SpinButtons.ShowIncrementButtons</helplink> and 
                    <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpinButtons.ShowLargeIncrementButtons">SpinButtons.ShowLargeIncrementButtons</helplink> properties. To define the position of a spin button within the editor, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.EditButton.Position">SpinButtons.Position</helplink> property can be used. The increments with which the editor's value is changed when a small or large spin button is clicked can be defined by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.Increment">Increment</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.LargeIncrement">LargeIncrement</helplink> properties, respectively.
                </p>
                <p>
                    The ASPxSpinEdit can function in float or integer editing mode, which is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.NumberType">NumberType</helplink> property. In integer mode (when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.NumberType">NumberType</helplink> property is set to Integer), float value input is disabled and float values displayed within the editor are automatically rounded after they have been modified. In float mode, culture-specific separators are supported, allowing decimal separators to display uniquely in various cultures. The number of decimal places can be defined using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.DecimalPlaces">DecimalPlaces</helplink> property.
                </p>
                <p>
                    The maximum and minimum allowed values can be defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.MaxValue">MaxValue</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpinEdit.MinValue">MinValue</helplink> properties, which limit end-user input to a specified range.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ASPxTokenBox" Title="Token Box" SeoTitle="ASP.NET AJAX Autocomplete Token Box Editor" HighlightedTagNames="dx:ASPxTokenBox">
      <Keywords>tokens, multiselect, autocomplete, autocompletebox, keywords editor, tags editor</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Token Editor Features">
        <Description>
          <![CDATA[
               <p>The DevExpress ASP.NET Autocomplete Token Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox">ASPxTokenBox</helplink>) editor provides the ability to autocomplete values from a predefined list. An end-user can select a value (e.g. a keyword or tag) from a drop-down window list, or type it manually. This demo illustrates the main features available to you when using the ASPxTokenBox editor.</p>
               <p>Use controls in the rightmost panel to change individual property values, and see the results in the editor. The descriptions of the properties utilized are listed below.</p>
               <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.AllowCustomTokens">AllowCustomTokens</helplink> – specifies whether or not the tokens that are not contained in the bound data source can be specified in the editor.</p>
               <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTokenBox.ShowDropDownOnFocus">ShowDropDownOnFocus</helplink> – controls the drop-down window visibility when the editor gets focus. The available values are listed below.</p>
               <ul>
               <li>Always – the drop-down window is always displayed when the editor is focused.</li>
               <li>Never – the drop-down window is not displayed when the editor gets focus.</li>
               </ul>
               <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.IncrementalFilteringMode">IncrementalFilteringMode</helplink> – specifies which filtering mode is applied to the editor’s drop-down window items.</p>
               <ul>
               <li>Contains – the editor is filtered for list items that contain the typed search string.  </li>
               <li>StartsWith – the editor is filtered for list items that begin with the typed search string.</li>
               <li>None – filtering is not applied to editor list items.  </li>
               </ul>
               <p>Start typing in the token box to invoke the drop-down window containing the appropriate values. To remove a value from the editor, click the corresponding item’s delete button.</p>
          ]]>
        </Description>
      <HighlightedDescription>A Token Box helps your end-users enter editor values using a predefined value list. The values can be selected from a drop-down window or typed manually. This demo illustrates the main features of the DevExpress ASP.NET Token Box (ASPxTokenBox) control.</HighlightedDescription>
      </Demo>
      <Demo Key="TokenBoxColumn" Title="Token Box Column" SeoTitle="Token Box GridView Data Column" HighlightedTagNames="dx:ASPxGridView">
        <Description>
          <![CDATA[
		      <p>This demo illustrates how a token box can be used to edit column values within the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) control. </p>
          <p>In this demo, the grid contains the <b>Roles</b> column of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataTokenBoxColumn">GridViewDataTokenBoxColumn</helplink> type (see the ASPX code). Click the <b>Edit</b> link to display a grid edit form. In that form, you can see the embedded token box control used to edit the <b>Roles</b> column value.</p>
	        ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="ASPxTrackBar" Title="Track Bar" SeoTitle="ASP.NET AJAX Track Bar" HighlightedTagNames="dx:ASPxTrackBar">
      <Keywords>range, bounds</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
               <p>The DevExpress ASP.NET Track Bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar">ASPxTrackBar</helplink>) is a slider control that provides end-users with fast and easy visual data selection capabilities. End-users can select a value within ASPxTrackBar by positioning the handle within a range of values limited by a developer (using <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MinValue">MinValue</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MaxValue">MaxValue</helplink>). The handle position can be changed in the following manner:</p>
               <ul>
                    <li>By clicking on the track or scale;</li>
                    <li>By clicking on decrement and increment buttons;</li>
                    <li>Via the mouse wheel;</li>
                    <li>By dragging the handle and dropping it on the required position;</li>
                    <li>By pressing the arrow keys.</li>
               </ul>
              <p>This demo illustrates the primary features of ASPxTrackBar.</p>
              <p>Orientation and direction:</p>
              <p>ASPxTrackBar supports two orientation modes that can be specified with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Orientation">Orientation</helplink> property: horizontal and vertical. The default orientation is horizontal. ASPxTrackBar can be displayed in normal or reversed mode. The mode is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Direction">Direction</helplink> property. In reversed mode, the ASPxTrackBar direction (from <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MinValue">MinValue</helplink> to <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MaxValue">MaxValue</helplink>) changes from left to right to right to left (or from up to down to down to up, if it is in vertical orientation mode).</p>
              <p>Scale customization:</p>
              <p>The scale is the rectangular area in which tick marks and scale labels are placed. You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ScalePosition">ScalePosition</helplink> property to specify where the scale can be displayed: on both sides along the track, or on only one side. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ScaleLabelHighlightMode">ScaleLabelHighlightMode</helplink> property allows you to define how scale labels should be highlighted. Using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ValueToolTipPosition">ValueToolTipPosition</helplink> property, you can define the position where a value tooltip will appear when the drag handle position is changed.</p>
              <p>Element visibility and appearance:</p>
              <p>You can hide some elements of the track bar. Disabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ShowDragHandles">ShowDragHandles</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ShowChangeButtons">ShowChangeButtons</helplink> properties hides the drag handle and increment/decrement buttons, respectively. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.EqualTickMarks">EqualTickMarks</helplink> property allows you to specify whether or not all tick marks should be of the same size.</p>
              <p>In this demo, you can see how different settings affect editor behavior and appearance.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Range" Title="Range Selection">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Track Bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar">ASPxTrackBar</helplink>) can display two drag handles; this allows end-users to select a range of values instead of a single value. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.AllowRangeSelection">AllowRangeSelection</helplink> property to <b>True</b> to enable this functionality.</p>
              <p>In range selection mode, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.PositionStart">PositionStart</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.PositionEnd">PositionEnd</helplink> properties are used to specify drag handle positions. By default (in decimal scale display mode), a handle position corresponds to the track bar value. If you use the display mode of an item, the handle position is specified by the corresponding item's index.</p>
              <p>The ASPxTrackBar control provides an end-user with the ability to move the selected range along the track by dragging the highlighted portion of the track.</p>
              <p>The track bar automatically marks the most recently clicked handle as focused, and highlights it by default. An end-user can change its position using arrow keys, increment/decrement buttons, and the scroll wheel. Note that a click on the track changes the position of the nearest drag handle.</p>
          ]]>
        </Description>
             </Demo>
      <Demo Key="Scale" Title="Scale Settings">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Track Bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar">ASPxTrackBar</helplink>) supports full scale customization. The key scale settings include:</p>
              <ul>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MinValue">MinValue</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MaxValue">MaxValue</helplink> - Limit the value span visualized by the scale.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.LargeTickInterval">LargeTickInterval</helplink> - Specifies the interval between large ticks.</li>
                  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.SmallTickFrequency">SmallTickFrequency</helplink> - Defines the number of small ticks between a single large tick interval.</li>
              </ul>
              <p>It is sometimes useful to show a non-symmetrical scale. To do this, you can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.LargeTickStartValue">LargeTickStartValue</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.LargeTickEndValue">LargeTickEndValue</helplink> properties to set the values where the first and last large tick marks should be placed.</p>
              <p>Using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Step">Step</helplink> property, you can set the minimum value (increment/decrement) by which the drag handle position can be changed by end-users.</p>
              <p>In this demo, you can select predefined scale settings from the combo box above and then modify them to see how different settings affect scale behavior and appearance.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Items" Title="Items">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Track Bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar">ASPxTrackBar</helplink>) allows you to display custom items instead of automatically generated scale marks. Populate the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Items">Items</helplink> collection to activate the display mode of the ASPxTrackBar items. This collection can be filled manually or populated automatically by binding the editor to a data source. In item display mode, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MinValue">MinValue</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.MaxValue">MaxValue</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.LargeTickInterval">LargeTickInterval</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.SmallTickFrequency">SmallTickFrequency</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Step">Step</helplink> properties are not in effect. Scale labels, tick marks and possible positions to which drag handles can be moved by end-users correspond directly to items from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Items">Items</helplink> collection. When an end-user selects an item, the item's index is assigned to the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.Position">Position</helplink> (or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.PositionStart">PositionStart</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.PositionEnd">PositionEnd</helplink>) property.
</p>
<p>
For each item you can define the following:
</p>
<ul>
<li>
the text displayed as the item label (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TrackBarItem.Text">TrackBarItem.Text</helplink> property); 
</li>
<li>
the unique item value (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TrackBarItem.Value">TrackBarItem.Value</helplink> property); 
</li>
<li>
the text displayed within a value tooltip invoked for the item when it is selected by an end-user (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TrackBarItem.ToolTip">TrackBarItem.ToolTip</helplink> property).
</li> 
</ul>
<p>
The type of item values can be centrally specified via the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTrackBar.ValueType">ValueType</helplink> property (by default it is set to Decimal).
</p>
<p>
This demo illustrates how to use ASPxTrackBar client API to synchronize item selection with the display of the corresponding image. ASPxTrackBar and a standard Repeater (whose ItemTemplate contains an ASPxImage control in this demo) are bound to the same XML data file.
</p>

          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Adaptivity" Title="Adaptivity" HighlightedTagNames="dx:ASPxDateEdit dx:ASPxComboBox dx:ASPxDropDownEdit">
      <Demo Key="ScrollPicker" Title="Scroll Picker" SeoTitle="Scroll Picker - Mobile and Adaptivity">
        <Keywords>mobile, scrolling, adaptivity, wheel, scroller, picker</Keywords>
        <Description>
          <![CDATA[
<p>This demo illustrates how to use the DevExpress ASP.NET Date Edit (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink>) in scroll picker mode (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.PickerDisplayMode">ASPxDateEdit.PickerDisplayMode</helplink> is set to ‘ScrollPicker’ or ‘Auto’). In this mode, the Date Edit displays date components (day, month, year, time) on an independently rotating wheel.</p>
<p>In this demo, the ASPxDateEdit also operates in modal mode (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink>=OnWindowInnerWidth). The date editor's drop-down window is displayed as a regular drop-down or modal popup (depending on the browser's width).</p>
<p>You can use the options on the right to change the property values and see how they affect the ASPxDateEdit in scroll picker mode.</p>
<ul>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.PickerType">ASPxDateEdit.PickerType</helplink> - Specifies the date component an end user can select (a day or month).</li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit.PickerDisplayMode">ASPxDateEdit.PickerDisplayMode</helplink> - Specifies how to display the calendar (Scroll picker, Calendar or Auto). </li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DateEditTimeSectionProperties.Visible">DateEditTimeSectionProperties.Visible</helplink> - Specifies whether the time section is visible.</li>
</ul>
         ]]>
        </Description>
        <SourceFile>~/Adaptivity/ScrollPickerPage.aspx</SourceFile>
        <SourceFile>~/Adaptivity/ScrollPickerPage.aspx.cs</SourceFile>
      </Demo>
      <Demo Key="ModalDropDown" Title="Modal DropDowns" SeoTitle="Modal DropDowns Adaptivity">
        <Keywords>dropdown, modal window, adaptivity, mobile</Keywords>
        <Description>
          <![CDATA[
              <p>DevExpress ASP.NET DropDown Editors (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink>) can switch to modal mode (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">SettingsAdaptivity.Mode</helplink>=OnWindowInnerWidth) when the browser's width less than the specified value (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.SwitchToModalAtWindowInnerWidth">SwitchToModalAtWindowInnerWidth</helplink>). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings">DropDownEditBaseAdaptivitySettings</helplink> (for ASPxDateEdit and ASPxComboBox) and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditAdaptivitySettings">DropDownEditAdaptivitySettings</helplink> (for ASPxDropdownEdit) objects provide settings used to customize drop-down editors in adaptivity mode.</p>
<ul>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.Mode">Mode</helplink> - Specifies the adaptivity mode.</li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.SwitchToModalAtWindowInnerWidth">SwitchToModalAtWindowInnerWidth</helplink> - Specifies the maximum browser window width when an editor’s drop-down is switched to modal mode. </li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditBaseAdaptivitySettings.ModalDropDownCaption">ModalDropDownCaption</helplink> - Specifies the drop-down editor’s caption.</li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DropDownEditAdaptivitySettings.ShowInputInModalDropDown">ShowInputInModalDropDown</helplink> (for ASPxDropDownEdit only) - Specifies whether the ASPxDropdownEdit displays the input editor in the drop-down window.</li>
</ul>
          ]]>
        </Description>
        <SourceFile>~/Adaptivity/ModalDropDownPage.aspx</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames="dx:ASPxDateEdit dx:ASPxTextBox dx:ASPxCheckBox dx:ASPxComboBox dx:ASPxGridView dx:ASPxRadioButtonList dx:ASPxButton dx:ASPxListBox dx:ASPxLabel dx:SkipRepetitiveNavigationLinksControl">
      <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance">
        <Description>
          <![CDATA[
<p>
Editors from the <helplink href="https://docs.devexpress.com/AspNet/7897/aspnet-webforms-controls/data-editors">Data Editors</helplink> suite are designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, data editors implement the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for a control.
</p>
<p>
This demo illustrates how to make data editors more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property of each editor.
Editors for required fields are marked with an asterisk character and are recognizable by screen readers. Each time an editor is focused, the screen reader pronounces both the editor label text and further actions with the focused editor (e.g., type in text in a text box or open a drop-down window for a calendar). 
</p>
<p>
Here is a short summary on this accessible webpage implementation:
</p>
<ul>
<li>Define the page areas with <strong><a href="https://www.w3.org/TR/wai-aria/#landmark_roles" target="_blank">landmark</a></strong> roles such as navigation, search, main content, etc.</li>
<li>Add the <b>aria-labelledby</b> attribute for the page area with the <b>role="form"</b> role to provide information about the “form” landmark area for Assistive Technologies.</li>
<li>Place DevExpress ASP.NET Data Editors controls to the form and set their <b>AccessibilityCompliant</b> property to true.</li>
<li>Specify <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxEdit.ValidationSettings">ValidationSettings</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ValidationSettings.SetFocusOnError">SetFocusOnError</helplink> properties for the data editors.</li>
</ul>
<p>
Check the accessibility level of editors in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that data editors can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
      <Demo Key="LinkedControls" Title="Linked Controls" SeoTitle="Section 508, WCAG 2 Compliance, Linked Controls">
        <Keywords>linked</Keywords>
        <Description>
          <![CDATA[
                <p>
                This demo illustrates how to provide a screen reader or braille display with information about dynamically updated <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> content each time the user selects or deselects <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListBox">ASPxListBox's</helplink> items provided that the <b>AccessibilityCompliant</b> property of both editors is enabled.
                </p>
                
                <p>Follow these steps to implement this functionality.</p>
                
                <ul>
                <li>Handle the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientListBox.SelectedIndexChanged">ASPxClientListBox.SelectedIndexChanged</helplink> event and call the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.PerformCallback(args)">ASPxClientGridView.PerformCallback</helplink> method to filter the grid when the list box selection is changed.</li>
                <li>Handle the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.EndCallback">ASPxClientGridView.EndCallback</helplink> event to check if the grid's content has been changed after a user selected or deselected list box items. If any changes occur, pass the generated message text as an argument to the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUtils.SendMessageToAssistiveTechnology.static(message)">ASPxClientUtils.SendMessageToAssistiveTechnologies</helplink> method.</li>
                </ul>
                <p>
                To check the accessibility level of the controls used in the demo, run the <a href="http://wave.webaim.org/report?url=http://demos.devexpress.com/ASPxEditorsDemos/Features/RightToLeft.aspx">WAVE</a> or <a href="https://validator.w3.org/nu/?doc=http://demos.devexpress.com/ASPxEditorsDemos/Features/RightToLeft.aspx">W3C</a> automated web accessibility evaluation tool. In addition, you can enable the <a href="http://windows.microsoft.com/en-us/windows7/turn-on-high-contrast" target="_blank">High Contrast</a> mode to make sure the demo is rendered correctly in this mode.
                </p>
                
        ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/Scripts/NotificationBridge.js</SourceFile>
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
      <Demo Key="RightToLeft" Title="Right-to-Left Layout">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
                <p>DevExpress editors provide support for right-to-left languages such as Arabic and Hebrew. Thus, you can rely on our editor controls when creating international web pages that require support for right-to-left reading order as well as the mirroring of UI elements.</p>
                <p>The display of an editor can be switched to right-to-left by enabling a single property - RightToLeft. When this property is on, the text flows from right to left in the editor, and the editor control itself is mirrored (the layout of its UI elements is reversed).</p>
                <p>If you need to apply right-to-left display for all DevExpress web controls within your web application, you can enable a special configuration option (the rightToLeft option) in the web.config file, instead of switching the RightToLeft property of each control. The rightToLeft option can be accessed in the settings group of the <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section of the web.config file.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxperience.FileManagerAndUpload" Url="ASPxFileManagerAndUploadDemos" Title="DevExpress ASP.NET products" SeoTitle="ASP.NET AJAX File Manager and File Upload" NavItemTitle="File Management and Upload" OrderIndex="17">

    <Keywords>files, download, filecontrol, uploading</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxperience_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/FileManager.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX File Manager and File Upload">
      <BannerTitle>
        File Management Controls for ASP.NET
      </BannerTitle>
      <BannerText>
        The file manager control with upload/download capabilities is inspired by the Windows File Explorer. It allows you to provide file management capabilities in your web applications with ease.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=ijq_4SBNBqA</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxperience Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our ASPxperience Suite</helplink>. 
                These features include: 
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) is an Explorer-like control providing end-users with the capability to manage files and folders. This control allows end-users to upload and select files, and change the folder structure (by renaming, moving, copying and deleting files or folders). File and folder management capabilities are fully customizable and can be switched off, if necessary.
          </p>
        ]]>
      </Description>
    </Overview>

    <DemoGroup Key="FileManager" Title="File Manager" SeoTitle="ASP.NET AJAX File Manager Control" HighlightedTagNames="dx:ASPxFileManager">
      <Keywords>files, folders, upload, filesystem, filecontrol, folder, explorer, filemanager, hierarchy</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              The ASP.NET File Manager Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) provides advanced file management and Windows Explorer-like functionality for any web application. It allows end-users to browse, select and upload files, or change folder structure, by renaming, moving and deleting files or folders. File and folder management capabilities are fully customizable and can be disabled when necessary.
            </p>
            <p>
              The markup fragment below demonstrates how to add the ASPxFileManager control to your project, specify the root folder, the folder containing file thumbnails and the folder that the control will initially display.
            </p>
            <code lang="html">
              <dx:ASPxFileManager ID="ASPxFileManager1" runat="server">
                  <Settings RootFolder="~/Content/FileManager/Files" 
                      ThumbnailFolder="~/Content/FileManager/Thumbnails"
                      InitialFolder="Images\Product icons"/>
              </dx:ASPxFileManager>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=ijq_4SBNBqA" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/9030/aspnet-webforms-controls/file-management/file-manager/overview" Title="Documentation" />
        <KeyFeature Name="Amazon Provider" DemoUrl="~/FileManager/AmazonProvider.aspx">
          <Description>
            <![CDATA[
            ASPxFileManager provides the capability to work with Amazon Simple Storage Service (Amazon S3). 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Azure Provider" DemoUrl="~/FileManager/AzureProvider.aspx">
          <Description>
            <![CDATA[
            ASPxFileManager provides the capability to work with Azure Service. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Dropbox Provider" DemoUrl="~/FileManager/DropBoxProvider.aspx">
          <Description>
            <![CDATA[
            ASPxFileManager provides the capability to work with Dropbox Service. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Custom Toolbar" DemoUrl="~/FileManager/CustomToolbar.aspx">
          <Description>
            <![CDATA[
            File Manager allows you to provide custom toolbar and context menu items. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="File and Folder Management">
          <Description>
            <![CDATA[
             ASPxFileManager allows end-users to easily upload, download, and select files, and also change the folder structure by renaming, copying, moving and deleting files or folders.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Multiple File Selection" DemoUrl="~/FileManager/MultipleFileSelection.aspx">
          <Description>
            <![CDATA[
             ASPxFileManager provides multiple file selection capability. It allows end-users to choose multiple files and perform actions on them simultaneously.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Access Control" DemoUrl="~/FileManager/AccessControl.aspx">
          <Description>
            <![CDATA[
             ASPxFileManager allows you to define access permissions for folders and files. In addition, you can associate any number of access rules with specific security roles to group related permissions together.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Two file list view modes" DemoUrl="~/FileManager/DetailsViewMode.aspx">
          <Description>
            <![CDATA[
             ASPxFileManager supports the “Thumbnails” and “Details” list view modes.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedTitle="File Manager - Breadcrumbs">
        <Keywords>breadcrumbs</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) is an Explorer-like control providing your end-users with the capability to manage files and folders. This control allows end-users to easily upload and select files, and even change the folder structure (by renaming, moving, copying and deleting files or folders). File and folder management capabilities are fully customizable and can be switched off, if necessary.
</p>

<p>
The ASPxFileManager control consists of the following main elements: a <helplink href="https://docs.devexpress.com/AspNet/8951/aspnet-webforms-controls/file-management/file-manager/visual-elements/toolbar-elements/toolbar">toolbar</helplink>, a <helplink href="https://docs.devexpress.com/AspNet/8874/aspnet-webforms-controls/file-management/file-manager/visual-elements/folder-container">folder containe</helplink>r, a <helplink href="https://docs.devexpress.com/AspNet/8873/aspnet-webforms-controls/file-management/file-manager/visual-elements/file-container">file container</helplink> and an <helplink href="https://docs.devexpress.com/AspNet/8875/aspnet-webforms-controls/file-management/file-manager/visual-elements/upload-panel">upload panel</helplink>. Element settings and common control settings can be customized from the corresponding properties such as <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.Settings">Settings</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsEditing">SettingsEditing</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsToolbar">SettingsToolbar</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsFolders">SettingsFolders</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsUpload">SettingsUpload</helplink>.
</p>

<p>
The main features of the ASPxFileManager control are listed below (along with the corresponding control settings):
</p>

<ul>
<li>
Show the folder and file structure (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.RootFolder">Settings.RootFolder</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.InitialFolder">Settings.InitialFolder</helplink>);
</li>
<li>
Automatically sort folders and files based on their names;
</li>
<li>
Automatically generate and display thumbnails for image files (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.ThumbnailFolder">Settings.ThumbnailFolder</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.ThumbnailSize">Settings.ThumbnailSize</helplink>);
</li>
<li>
Rename, move, copy and delete files and folders (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowRename">SettingsEditing.AllowRename</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowMove">SettingsEditing.AllowMove</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowCopy">SettingsEditing.AllowCopy</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowDelete">SettingsEditing.AllowDelete</helplink>);
</li>
<li>
Create new folders (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowCreate">SettingsEditing.AllowCreate</helplink>);
</li>
<li>
Download a selected file (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowDownload">SettingsEditing.AllowDownload</helplink>);
</li>
<li>
Upload files using a built-in upload panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsUpload">SettingsUpload</helplink>);
</li>
<li>
Select multiple files for upload (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsUpload.UseAdvancedUploadMode">SettingsUpload.UseAdvancedUploadMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerUploadAdvancedModeSettings.EnableMultiSelect">SettingsUpload.AdvancedModeSettings.EnableMultiSelect</helplink>);
</li>
<li>
Update the file list dynamically via callbacks;
</li>
<li>
Respond to file selection and submission (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SelectedFile">SelectedFile</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SelectedFiles">SelectedFiles</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SelectedFolder">SelectedFolder</helplink> server properties; the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.SelectedFileChanged">SelectedFileChanged</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.SelectedFileOpened">SelectedFileOpened</helplink> client events);
</li>
<li>
Quickly search for a file within a list using a built-in filter box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsToolbar.ShowFilterBox">SettingsToolbar.ShowFilterBox</helplink>);
</li>
<li>
Customizable layout (based on a built-in splitter control);
</li>
<li>
Keyboard support for main file operations.
</li>
<li>Provide breadcrumbs navigation</li>
</ul>

<p>
This demo illustrates the primary features of ASPxFileManager. Use the check box options in the top panel to change the values of the corresponding ASPxFileManager properties, and see the results within the control.
</p>          
          ]]>
        </Description>
        <HighlightedDescription>Breadcrumbs is a navigation element that allows end-users to keep track of their locations within folders. This demo illustrates the main features provided by the File Manager control, including the breadcrumbs functionality.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomThumbnails" Title="Custom Thumbnails">
        <Keywords>icons, fileicons</Keywords>
        <Description>
          <![CDATA[
<p>
In addition to the automatic thumbnail creation feature, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> allows you to provide custom thumbnails by handling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomThumbnail">CustomThumbnail</helplink> server event. This event allows you to specify how all files or certain files should be visually represented in folders. Within the event handler, the currently processed file can be accessed and identified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerThumbnailCreateEventArgs.File">File</helplink> property, and a custom thumbnail can be defined for the file from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.Url">ThumbnailImage.Url</helplink> property.
</p>

<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomThumbnail">CustomThumbnail</helplink> event is handled to analyze file extensions and display the corresponding custom thumbnail image based on the file type.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BindingToDatabase" Title="Database Binding" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/DatabaseBinding.png">
        <Keywords>filebinding, filesystembinding, database, db, datasource</Keywords>
        <Description>
          <![CDATA[
          <p>This demo illustrates how you can easily enable the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> to retrieve its content from a database.</p>
          <p>With the ASPxFileManager, you can visualize file system data from a database. All you have to do is assign a data source connected to a database and map its fields to the ASPxFileManager using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsDataSource">SettingsDataSource</helplink> options.
          </p>
          <p>In this demo, the ASPxFileManager uses the LINQ data source to access file system data stored in an SQL Server Database File.</p>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET File Manager (ASPxFileManager) allows retrieving its content from a database. With the ASPxFileManager, you can visualize a database's file system data.</HighlightedDescription>
      </Demo>
      <Demo Key="AccessControl" Title="Access Control">
        <Keywords>access, restrictions, fileaccess, accesscontrol, rights</Keywords>
        <Description>
          <![CDATA[
          <p>This demo shows how to set up folder and file access permissions, grant them to security roles and enforce specific roles using <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>.</p>
          <p>ASPxFileManager allows you to define access permissions for folders and files using a set of folder/file access rules (see the file manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsPermissions.AccessRules">SettingsPermissions.AccessRules</helplink> collection). An access rule specifies the path to which it is applied and lists permissions (allowed or denied actions) associated with this rule. You can easily set up access rules for folders (including their files and child folders) and individual files using <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFolderAccessRule">FileManagerFolderAccessRule</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileAccessRule">FileManagerFileAccessRule</helplink> elements.</p>
          <p>In addition, you can associate any number of access rules with specific security roles to group related permissions together. To associate an access rule with a security role, assign the role's name to the rule's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAccessRuleBase.Role">Role</helplink> property. Related access rules should be assigned matching role names.</p>
          <p>Any created role can be enforced using the ASPxFileManager from its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsPermissions.Role">SettingsPermissions.Role</helplink> property. After that, the file manager will display the folder and files, and provide access permissions to them based on the assigned role.</p>
          <p>In the demo, you can select one of the security roles listed above to enforce it using ASPxFileManager. The file and folder permissions granted to each role are listed below.</p>
          <ul>
          <li>Default User. This role only allows users to browse folder content. All file/folder modifications or file uploads are prohibited. The System folder is hidden in a folder tree.</li>
          <li>Document Manager. This role allows users to browse folder content and perform file/folder operations (including file uploads) within the Documents folder only. All file/folder modifications or file uploads within other folders are prohibited. The System folder is hidden in a folder tree.</li>
          <li>Media Moderator. This role allows users to browse folder content and perform folder/file operations (except for file uploads) within the Music and Video folders only. All file/folder modifications or file uploads in other folders are prohibited. The System folder is hidden in a folder tree.</li>
          <li>Administrator. This role allows users to browse folder content and perform file/folder operations (including file uploads). The System folder is shown in a folder tree. This folder is also fully accessible for all file/folder modifications or file uploads.</li>
          </ul>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events" HighlightedTagNames="dx:EventMonitor">
        <Description>
          <![CDATA[
<p>
This example demonstrates the capabilities of the DevExpress client-side event management technology. All available control-specific client-side events are traced in this demo. Play with the DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) interface elements to initiate client-side events.
</p>

<p>
The ASPxFileManager control provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the ASPxFileManager control's functionality. Thus, they give you complete control over the client-side behavior of the control.
</p>

<p>
The following client side events are available for ASPxFileManager:
</p>

<ul>
<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> - Occurs on the client side after the control has been initialized, but prior to its display in the browser.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemMoving">ItemMoving</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemMoved">ItemMoved</helplink>; <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemRenaming">ItemRenaming</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemRenamed">ItemRenamed</helplink>; <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemDeleting">ItemDeleting</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ItemDeleted">ItemDeleted</helplink> - Allow you to respond to the corresponding actions performed on a file or folder.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.FileUploading">FileUploading</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.FileUploaded">FileUploaded</helplink> - Fire before and after a new file has been uploaded to the server.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.FolderCreating">FolderCreating</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.FolderCreated">FolderCreated</helplink> - Fire before and after a new folder has been created.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ErrorOccurred">ErrorOccurred</helplink> - Enables you to properly respond to an error occurring as a result of end-user actions.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.SelectedFileChanged">SelectedFileChanged</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.SelectedFileOpened">SelectedFileOpened</helplink> - Allow you to respond to file selection and opening.
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.CurrentFolderChanged">CurrentFolderChanged</helplink> – Fires after the current folder is changed. 
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.FileDownloading">FileDownloading</helplink> – Fires on the client side before a file download starts and allows you to cancel the action.
</li>

</ul>

<p>
To learn more about client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="DetailsViewMode" Title="Details View">
        <Keywords>grid, gridview, aspxgridview, table</Keywords>
        <Description>
          <![CDATA[  
<p>
This demo illustrates the <b>Details</b> view mode of the DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>).
</p>
<p>
ASPxFileManager supports two file list view modes: Thumbnails and Details. The Thumbnails view is displayed by default. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">SettingsFileList.View</helplink> property to enable the Details mode.
</p>
<p>
In Details view mode, a file list is represented by a grid containing information about files. You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.DetailsViewSettings">SettingsFileList.DetailsViewSettings</helplink> property settings to customize the mode functionality.
</p>
<ul>
<li>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnResize">AllowColumnResize</helplink> property specifies whether or not columns can be resized by end-users.
</li><li>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnDragDrop">AllowColumnDragDrop</helplink> property specifies whether or not end-users can reorder columns by dragging their headers.
</li><li>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.AllowColumnSort">AllowColumnSort</helplink> property specifies whether or not end-users can sort data by clicking column headers.
</li><li>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewSettings.ShowHeaderFilterButton">ShowHeaderFilterButton</helplink> property specifies whether or not column headers display filter buttons allowing end-users to filter files.
</li>
</ul>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET File Manager (ASPxFileManager) allows you to easily add file management functionality to your web application. This demo shows the Details view mode of the ASPxFileManager, in which detailed file information is displayed in a grid-style file container and navigation is provided by a tree-style folder.</HighlightedDescription>
      </Demo>
      <Demo Key="MultipleFileSelection" Title="Multiple File Selection">
        <Description>
          <![CDATA[  
<p>
This demo illustrates the DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) control’s multiple file selection capability. It allows end-users to choose multiple files and perform actions on them simultaneously. 
</p> 
<p>
Multiple file selection is disabled by default. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettings.EnableMultiSelect">Settings.EnableMultiselect</helplink> property to <b>true</b>.
</p> 
<p>
Multiple file selection is available in both the detail and thumbnail file list modes. You can switch between modes using the <b>View Mode</b> combo box.
</p>
<p>Multiple file selection can be performed using a keyboard in the following ways.</p>
<ul>
<li>Use the <b>ARROW</b> keys to move focus.</li>
<li>Use the <b>SPACE</b> key to mark a focused file as either selected or unselected.</li> 
<li>Focus a file while holding the <b>CTRL</b> key to select or deselect a file without changing the other selection.</li>
<li>Multiple files can easily be selected by moving focus using either the <b>ARROW</b> keys or the mouse while holding down the <b>SHIFT</b> key.</li>
<li>Click a file's check box to select or deselect a file without changing the other selection.</li>
</ul>
<p>
In this demo, the ASPxFileManager control’s <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.SelectionChanged">SelectionChanged</helplink> client event is handled to demonstrate how you can obtain information about selected files using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.GetSelectedItems">GetSelectedItems</helplink> client method.
</p> 
          ]]>
        </Description>
      </Demo>
      <Demo Key="CustomToolbar" Title="Custom Toolbar" HighlightedTitle="File Manager - Custom Toolbar">
        <Description>
          <![CDATA[  
          <p>This demo extends the DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) with a custom toolbar and context menu items. In addition to the default buttons available within the ASPxFileManager, you can integrate custom items and display them within the toolbar or in a context menu. </p>
          
<p>To add custom items, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsToolbar.Items">SettingsToolbar.Items</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsContextMenu.Items">SettingsContextMenu.Items</helplink> collections. Custom items can be represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomButton">FileManagerToolbarCustomButton</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarCustomDropDownButton">FileManagerToolbarCustomDropDownButton</helplink> object and are identified using its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarItemBase.CommandName">CommandName</helplink> property. </p>

<p>When a custom item is clicked, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.CustomCommand">CustomCommand</helplink> event is raised. Its <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManagerCustomCommandEventArgs.commandName">commandName</helplink> event argument property allows you to identify the clicked item. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ToolbarUpdating">ToolbarUpdating</helplink> event is raised each time the toolbar requires an update and allows you to control item visibility and availability. </p>

<p>In this demo, the toolbar is populated with three custom items and a context menu is populated with a custom item. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.CustomCommand">CustomCommand</helplink> event is used to perform a callback to the server (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.PerformCallback(args)">PerformCallback</helplink>). On the server side, the file manager changes the file area view (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">View</helplink>) or displays the selected item property, based on the sent event parameter (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CallbackEventArgsBase.Parameter">Parameter</helplink>). The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.ToolbarUpdating">ToolbarUpdating</helplink> event is used to control <b>Property</b> item availability within the toolbar and the context menu, based on the current active area (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManagerToolbarUpdatingEventArgs.activeAreaName">activeAreaName</helplink>) and the selected item (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.GetSelectedItems">GetSelectedItems</helplink>). </p>
          ]]>
        </Description>
        <HighlightedDescription>File Manager allows you to provide custom toolbar and context menu items, which can implement button or drop-down button functionality. This demo illustrates how to add custom buttons to a toolbar and context menu. </HighlightedDescription>
      </Demo>
      <Demo Key="Templates" Title="Templates" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/Templates.png" HighlightedTitle="File Manager - Templates">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) control supports template technology, allowing you to customize file and folder appearance and layout. 
</p>
<p>
The look of the ASPxFileManager control items (files and folders) displayed in the <helplink href="https://docs.devexpress.com/AspNet/8873/aspnet-webforms-controls/file-management/file-manager/visual-elements/file-container">file area</helplink> can be completely modified by creating a specific template, which defines how an element will be rendered by a client browser. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> control allows you to create templates for two file area <helplink href="https://docs.devexpress.com/AspNet/14550/aspnet-webforms-controls/file-management/file-manager/concepts/view-modes">view modes</helplink>: details (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsColumn.ItemTemplate">ItemTemplate</helplink>) and thumbnails (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListThumbnailsViewSettings.ItemTemplate">ItemTemplate</helplink>). Each template can consist of a group of HTML controls. Each HTML control used in a template can be bound to the property values of the rendered node.
</p>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListThumbnailsViewSettings.ItemTemplate">ItemTemplate</helplink> property is used to present additional information about files in a card view. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.HighlightItemTemplate">HighlightItemTemplate</helplink> event is handled to highlight the search text, which is specified using the filter box, in templates.
</p>

          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET File Manager (ASPxFileManager) control supports template technology allowing you to customize item appearance and layout. This demo illustrates how to display additional information about files in the thumbnails view mode.</HighlightedDescription>
      </Demo>
      <Demo Key="VirtualScrolling" Title="Virtual Scrolling" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/VirtualScrolling.png">
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) supports virtual scrolling, which allows files and folders in file area to load on demand. In this mode, the file manager loads items automatically when the end-user scrolls the control content. Unnecessary file are unloaded. </p> 

<p>The amount of items that are currently uploaded to the client side can be specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.PageSize">PageSize</helplink> property (300 by default). </p>
<p>To disable virtual scrolling set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.PageSize">PageSize</helplink> property to 0. In this case, all items contained in the current folder, are uploaded to the client side. </p>

          ]]>
        </Description>
        <HighlightedDescription>Virtual scrolling allows loading files and folders in the file area on demand. In this mode, the file manager loads items automatically when the end-user scrolls the control content. Unnecessary files are unloaded.</HighlightedDescription>
      </Demo>
      <Demo Key="SubfolderSearching" Title="Subfolder Searching" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Subfolder-Searching.png">
        <Description>
          <![CDATA[
          <p>DevExpress File Manger allows searching for files and folders using the built-in filter box. This demo illustrates how to search the current folder or all subfolders the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFiltering.FilterBoxMode">SettingsFiltering.FilterBoxMode</helplink> property controls.</p>
          <p>The File Manager displays the search results in a new filter or standard view the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFiltering.FilteredFileListView">FileManagerSettingsFiltering.FilteredFileListView</helplink> property. In standard mode, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">SettingsFileList.View</helplink> property to specify whether the filtered items are shown with details or as large icons (thumbnails).</p>
         ]]>
        </Description>
        <HighlightedDescription>DevExpress ASP.NET File Manager (ASPxFileManager) allows searching for files in the selected folder and all its subfolders.</HighlightedDescription>
      </Demo>      
      <Demo Key="CustomFilterAPI" Title="Custom Filter API">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) provides APIs allowing you to filter its file list programmatically in a custom manner. For instance, you can write code to display only certain files types (such as images, spreadsheets or rich text documents) or the most recently used files.
</p>
<p>
To implement custom filters, manually obtain the required files from your file system provider. Use the following APIs for this purpose.
</p>

<ul>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.FileListCustomFilter">ASPxFileManager.FileListCustomFilter</helplink> property.<br/>
Specify the name of your custom filter to be currently applied to the File Manager's file list. Use this property to identify the active filter among all named custom filters you implement.
</li>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.FileListCustomFilterBreadcrumbsText">ASPxFileManager.FileListCustomFilterBreadcrumbsText</helplink> property.<br/>
Optionally, specify the breadcrumbs text to be displayed in the File Manager for the applied filter.
</li>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase.GetFilteredItems(DevExpress.Web.FileManagerGetFilteredItemsArgs)">FileSystemProviderBase.GetFilteredItems</helplink> method.<br/>
Override this method within your file system provider to offer implementations of all custom filters to be used in the File Manager. This method has a parameter of the FileManagerGetFilteredItemsArgs type whose properties allow you to identify the filter, determine its additional characteristics and return file items matching the filter.
</li>
<li>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGetFilteredItemsArgs">FileManagerGetFilteredItemsArgs</helplink> object's properties:
</p>
  <ul>
  <li>
  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGetFilteredItemsArgs.FileListCustomFilter">FileListCustomFilter</helplink> - Gets the active filter's name (specified by the File Manager's FileListCustomFilter property).
  </li>
  <li>
  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGetFilteredItemsArgs.FilterBoxText">FilterBoxText</helplink> - Gets the search string entered into the File Manager's filter box.
  </li>
  <li>
  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGetFilteredItemsArgs.Folder">Folder</helplink> - Gets the File Manager's currently active folder. 
  </li>
  <li>
  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGetFilteredItemsArgs.Items">Items</helplink> - Specifies a collection of file items (FileManagerFile or FileManagerFolder instances) that match the applied filter.
  </li>
  </ul>
</li>
</ul>  
<p>
This demo illustrates how to implement custom filters - in the demo they are 'Recent', 'RTF Docs', 'Sheets', 'Images', 'PDFs', and 'Favorites'. They allow end-users to filter the File Manager's file list by a certain criterion and to search within the applied filter using the filter box.
</p>
<p>
Note that in this demo, custom filters' UI is implemented using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> that is displayed instead of the File Manager's folder list view. Each menu item identifies the corresponding custom filter by its name. Clicks on menu items are processed on the client side to initiate the File Manager's custom callback passing the clicked item's name to the server (through the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFileManager.PerformCallback(args)">PerformCallback</helplink> client-side method). On the server side, in the File Manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CustomCallback">CustomCallback</helplink> event handler, this name (identifying the filter to apply) is assigned to the File Manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.FileListCustomFilter">ASPxFileManager.FileListCustomFilter</helplink> property. Implementation of individual custom filters is given in the CustomFileSystemProvider class that inherits functionality from the standard <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PhysicalFileSystemProvider">PhysicalFileSystemProvider</helplink> and overrides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSystemProviderBase.GetFilteredItems(DevExpress.Web.FileManagerGetFilteredItemsArgs)">FileSystemProviderBase.GetFilteredItems</helplink> method.
</p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/CustomFileSystemProvider.cs</SourceFile>
      </Demo>
      <Demo Key="ResponsiveLayout" Title="Responsive Layout">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET File Manager allows you to build responsive page layouts. The control automatically resizes and rearranges its elements depending on the browser window size. The layout behavior can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsAdaptivity.Enabled">SettingsAdaptivity.Enabled</helplink> property.</p>
<p>In adaptive mode, the file manager elements are modified as follows:</p>
<ul>
<li>The detail view section columns are automatically hidden one by one starting at the right. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDetailsColumn.AdaptivePriority">FileManagerDetailColumn.AdaptivePriority</helplink> property defines the column hiding order. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerFileListDetailsViewAdaptivitySettings.Mode">FileManagerFileListDetailsViewAdaptivitySettings.Mode</helplink> property to "Off" to disable adaptive mode for the detail view section.</li>
<li>The toolbar items are moved the drop-down list that is invoked by clicking the ellipse button on the right. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerToolbarAdaptivitySettings.EnableAutoHideRootItems">FileManagerToolbarAdaptivitySettings.EnableAutoHideRootItems</helplink> property specifies whether the toolbar is adaptive.</li>
<li>The Folder container is hidden and can be shown by clicking the hamburger button in the left top corner. To disable adaptive mode for the folder container, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsAdaptivity.EnableCollapseFolderContainer">FileManagerSettingsAdaptivity.EnableCollapseFolderContainer</helplink> property.</li>
</ul>

          ]]>
        </Description>
        <SourceFile>~/FileManager/ResponsiveLayoutPage.aspx</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="UploadControl" Title="Upload Control" SeoTitle="ASP.NET AJAX File Upload Control" HighlightedTagNames="dx:ASPxUploadControl">
      <Keywords>uploading, fileapi, progressing, file list, multi-file upload, drag and drop</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              The DevExpress Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) allows you to introduce file upload capabilities in your web application with ease. Once you place this control onto a web page, end-users can select the files they wish to upload to the server by entering the file’s path into a text box, or by invoking the standard Open File dialog, or by dragging the file to the control.
            </p>
            <p>
              The markup fragment below demonstrates how to add ASPxUploadControl to your project and enable multi-file selection, file list, and drag-and-drop functionality. Additionally, the markup enables the built-in progress panel, so users are automatically notified of the progress during file upload. 
            </p>
            <code lang="html">
    <dx:ASPxUploadControl ID="ASPxUploadControl1" runat="server" UploadMode="Auto"
        ShowProgressPanel="true" ShowUploadButton="true">
        <AdvancedModeSettings EnableMultiSelect="True" EnableFileList="True" EnableDragAndDrop="True" />
        <ValidationSettings MaxFileSize="4194304" AllowedFileExtensions=".jpg,.jpeg,.gif,.png" />
    </dx:ASPxUploadControl>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="File Upload to Amazon" DemoUrl="~/UploadControl/UploadToAmazon.aspx">
          <Description>
            <![CDATA[
             ASPxUploadControl provides the capability to upload files to Amazon Simple Storage Service (Amazon S3). 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="File Upload to Azure" DemoUrl="~/UploadControl/UploadToAzure.aspx">
          <Description>
            <![CDATA[
             ASPxUploadControl provides the capability to upload files to Azure Service. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Drag and Drop Support" DemoUrl="~/UploadControl/DragAndDrop.aspx">
          <Description>
            <![CDATA[
             End-users can add files to the Upload Control by dragging them over the control area, or to an external drop zone. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Two Upload Modes">
          <Description>
            <![CDATA[
             The control can work in one of two upload modes: <b>Standard</b> or <b>Advanced</b>. In Standard Mode, the uploaded file is sent to the server in a single request. In Advanced Mode, the uploaded file is sent to the server in small packets (one by one). 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="File Validation">
          <Description>
            <![CDATA[
             The uploaded file can automatically be validated on the server, based on the specified validation settings. If the validation fails, a descriptive error message is displayed. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Multiple File Selection" DemoUrl="~/UploadControl/MultiFileSelection.aspx">
          <Description>
            <![CDATA[
             The Multiple File Selection feature allows end-users to choose multiple files to upload in a single ”File Open” dialog. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="MultiFileSelection" Title="Multi-File Selection" SeoTitle="Selection Multiple Files">
        <Description>
          <![CDATA[<p>
This demo illustrates <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>'s multi-file selection capability. It allows end-users to choose multiple files to upload in a single file-open dialog. This demo also shows how a custom popup progress panel can be implemented to display upload progress information for both the currently processed file and the entire uploaded data.
</p>

<p>
By default, the multi-file selection mode is disabled. To enable it, switch the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableMultiSelect">AdvancedModeSettings.EnableMultiSelect</helplink> property to <b>true</b>.
</p>

<p>
In this demo, a list of files to upload, which visibility is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableFileList">EnableFileList</helplink> property, is displayed below the control's text box, allowing end-users to remove a particular file from the list.
</p>
        ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Upload Control (ASPxUploadControl) enables you to easily introduce file upload capability into your web application. This demo illustrates the ASPxUploadControl's multi-file selection feature, in which end-users can select multiple files to upload using a single dialog.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomProgressPanel" Title="Custom Progress Panel">
        <Keywords>progressing</Keywords>
        <Description>
          <![CDATA[<p>
					In addition to the built-in progress panel, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink> allows you to create a custom progress panel for file uploads. For this purpose, you can use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.UploadingProgressChanged">UploadingProgressChanged</helplink> client event. It exposes all of the required information about the current state of the file upload such as the total count and size of the files selected for upload, the currently uploaded file name, the file sizes of the files that have already been uploaded, and the current progress value (displayed as a percentage).
				</p><p>
					This demo illustrates how a custom progress panel can be implemented by handling the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.UploadingProgressChanged">UploadingProgressChanged</helplink> client event and using a separate ASPxProgressBar control displayed within an ASPxPopupControl.
				</p><p>
            The control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlValidationSettings.ShowErrors">ValidationSettings.ShowErrors</helplink> property is disabled to suppress the default error indication. Both the server and client FilesUploadComplete events are handled to identify the upload operation result on the server, and to process and display it in a message box on the client.
                </p><p>
                    Note that ASPxUploadControl is used in Advanced Upload Mode in this demo (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadMode">UploadMode</helplink> property is set to <b>Advanced</b>).
                </p>]]>
        </Description>
      </Demo>
      <Demo Key="DragAndDrop" Title="Drag and Drop Support" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/DragAndDrop.png" HighlightedTitle="Upload Control - Drag and Drop Support">
        <Description>
          <![CDATA[
          <p>
        This demo illustrates the DevExpress ASP.NET Upload Control’s (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) support for drag and drop operations. This feature allows end-users to select one or more files and drag them to the upload control and add files to the control file list. </p>
        <p>
By default, drag and drop functionality is disabled. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadMode">UploadMode</helplink> property to <b>Advance</b> and switch the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadAdvancedModeSettings.EnableDragAndDrop">EnableDragAndDrop</helplink> property to <b>true</b>. </p>
<p>
The ASPxUploadControl allows you to specify external zones where files can be dropped and added to the upload control’s file list. To specify drop zones, list zone IDs in the ExternalDropZoneID property. When a file is being dragged over a drop zone, the following events are raised. </p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.DropZoneEnter">DropZoneEnter</helplink> event is raised when the mouse enters a drop zone element while dragging a file.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientUploadControl.DropZoneLeave">DropZoneLeave</helplink> event is raised when the mouse leaves a drop zone element while dragging a file. </li>
</ul>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Upload Control (ASPxUploadControl) provides end-users with drag and drop capability. In this demo, end-users can add files to the Upload Control by dragging them over the control area, or to one of the external drop zones. </HighlightedDescription>
        <SourceFile>~/Content/UploadControl/DragAndDrop.css</SourceFile>
      </Demo>
      <Demo Key="UploadAndSubmit" Title="Upload And Submit" HighlightedTitle="Upload Control - Upload And Submit">
        <Description>
          <![CDATA[
         <p>
This demo illustrates the typical use case of submitting a form with attached files that were uploaded asynchronously. 
</p>
<p>
The uploaded files are kept in a temporary folder. When the <b>Submit</b> button is clicked, the editors are validated on the client side. If the <b>Description</b> text box is empty or no files have been uploaded, the form data cannot be submitted to the server and an error message is displayed. 
</p>
<p>
If uploaded files are not submitted within 5 minutes, the temporary folder is removed.
</p>
<p>
When the editors pass the validation, the server-side code forms a list of objects containing information about uploaded files. This list is sent to the <b>ProcessSubmit</b> function, in which uploaded file processing should be implemented.
</p>
<p>
After the <b>ProcessSubmit</b> function is completed, the temporary folder is removed.
</p>

          ]]>
        </Description>
        <HighlightedDescription>This demo illustrates how to submit a form with asynchronous uploaded files.</HighlightedDescription>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="CloudProviders" Title="Cloud Storages Support" VirtualGroupKey="FileManager">
      <Demo Key="AmazonProvider" Title="File Manager for Amazon" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/FileManagerCloudSupport.png" HighlightedTitle="File Manager - Cloud Support">
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) supports the most popular cloud services, including Amazon Simple Storage Service (Amazon S3). In this demo, the File Manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property is set to <b>Amazon</b> and its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">CloudProviderRequest</helplink> event is handled to trace every request to the Amazon Simple Storage Service in an event monitor.
          </p>
          
          <p>
          To connect the ASPxUploadControl to Amazon cloud storage, register an Amazon account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterAmazon(System.String-System.String-System.String)">RegisterAmazon</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsAmazon">SettingsAmazon</helplink> property.
          </p>
          
          <ul>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAmazonProviderSettings.AccountName">AccountName</helplink>: Specifies the name of an Amazon account.</li>          
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAmazonProviderSettings.BucketName">BucketName</helplink>: Specifies the name of the current bucket.</li>
          </ul>
          
          ]]>
        </Description>
        <SeeAlso Url="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html" Title="REST API" />
        <SeeAlso Url="https://docs.aws.amazon.com/sdk-for-net/index.html" Title="AWS SDK for .NET Documentation" />
        <SeeAlso Url="https://aws.amazon.com/sdk-for-net/" Title="AWS SDK for .NET" />
        <HighlightedDescription>
          <![CDATA[  
          The DevExpress ASP.NET File Manager (ASPxFileManager) provides the capability to work with cloud services. In this demo, the File Manager works with Amazon Simple Storage Service (Amazon S3).
          See how the File Manager works with other cloud services in the Azure Provider and Dropbox Provider demos.
          ]]>
        </HighlightedDescription>
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="AzureProvider" Title="File Manager for Azure">
        <Description>
          <![CDATA[  
         <p>
         The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) supports the most popular cloud services, including Microsoft Azure. In this demo, the File Manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property is set to <b>Azure</b> and its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">CloudProviderRequest</helplink> event is handled to trace every request to the Azure Service in an event monitor.
         </p>
         
         <p>
         To connect the ASPxUploadControl to Azure cloud storage, register an Azure account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterAzure(System.String-System.String-System.String)">RegisterAzure</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsAzure">SettingsAzure</helplink> property.
         </p>
         
         <ul>
         <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAzureProviderSettings.AccountName">AccountName</helplink>: Specifies the name of an Azure account.</li>
         <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerAzureProviderSettings.ContainerName">ContainerName</helplink>: Specifies the name of the current container (blob storage).</li>
         </ul>
                  
          ]]>
        </Description>
        <SeeAlso Url="https://docs.microsoft.com/en-us/rest/api/storageservices/Blob-Service-REST-API?redirectedfrom=MSDN" Title="Blob Service REST API" />
        <SeeAlso Url="https://docs.microsoft.com/en-us/previous-versions/azure/dn261237(v=azure.100)?redirectedfrom=MSDN" Title="Storage Client Library Reference" />
        <SeeAlso Url="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-dotnet" Title="How to use Blob Storage from .NET" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="DropBoxProvider" Title="File Manager for Dropbox">
        <Description>
          <![CDATA[  
          <p>
          The DevExpress ASP.NET File Manager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) supports the most popular cloud services, including Dropbox. In this demo, the File Manager's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ProviderType</helplink> property is set to <b>Dropbox</b> and its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">CloudProviderRequest</helplink> event is handled to trace every request to the Dropbox Service in an event monitor.
          </p>
          
          <p>
          To connect the ASPxUploadControl to Dropbox cloud storage, register a Dropbox account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.accountmanager.registerdropbox.overloads">RegisterDropbox</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.SettingsDropbox">SettingsDropbox</helplink> property.
          </p>
          
          <ul>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerDropBoxProviderSettings.AccountName">AccountName</helplink>: Specifies the name of a Dropbox account.</li>          
          </ul>
          
          ]]>
        </Description>
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="GoogleDriveProvider" Title="File Manager for Google Drive">
        <Description>
          <![CDATA[
          <p>This demo illustrates how to use the Google Drive file system provider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GoogleDriveFileSystemProvider">GoogleDriveFileSystemProvider</helplink>) to connect the DevExpress ASP.NET FileManager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) to Google Drive.</p>
          <p>Use the following APIs to connect the file manager to Google Drive:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ASPxFileManager.ProviderType</helplink> property as "GoogleDrive".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerGoogleDriveProviderSettings.AccountName">FileManagerGoogleDriveProviderSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterGoogleDrive(System.String-System.String-System.String)">AccountManager.RegisterGoogleDrive</helplink> method to register the Google Drive account in the global.asax file.</li>
          </ul>
          <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">ASPxFileManager.CloudProviderRequest</helplink> event allows you to trace request to the GoogleDrive Service in an event monitor.</p>
          ]]>
        </Description>
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="OneDriveProvider" Title="File Manager for OneDrive">
        <Description>
          <![CDATA[          
          <p>This demo illustrates how to use the OneDrive file system provider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.OneDriveFileSystemProvider">OneDriveFileSystemProvider</helplink>) to connect the DevExpress ASP.NET FileManager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) to OneDrive.</p>
          <p>Use the following APIs to connect the file manager to OneDrive:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ASPxFileManager.ProviderType</helplink> property as "OneDrive".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerOneDriveProviderSettings.AccountName">FileManagerOneDriveProviderSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterOneDrive(System.String-System.String-System.String)">AccountManager.RegisterOneDrive</helplink> method to register the OneDrive account in the global.asax file.</li>
          </ul>
          <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">ASPxFileManager.CloudProviderRequest</helplink> event allows you to trace request to the OneDrive Azure Active Directory application account in an event monitor.</p>
          ]]>
        </Description>
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="SharePointProvider" Title="File Manager for SharePoint" IsNew="true">
        <Description>
          <![CDATA[          
          <p>This demo illustrates how to use the SharePoint file system provider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SharePointFileSystemProvider">SharePointFileSystemProvider</helplink>) to connect the DevExpress ASP.NET FileManager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink>) to SharePoint.</p>
          <p>Use the following APIs to connect the file manager to SharePoint:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.ProviderType">ASPxFileManager.ProviderType</helplink> property as "SharePoint".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSharePointProviderSettings.AccountName">FileManagerSharePointProviderSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterOneDrive(System.String-System.String-System.String)">AccountManager.RegisterOneDrive</helplink> method to register the OneDrive account in the global.asax file.</li>
          </ul>
          <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager.CloudProviderRequest">ASPxFileManager.CloudProviderRequest</helplink> event allows you to trace request to the SharePoint Azure Active Directory application account in an event monitor.</p>
          ]]>
        </Description>
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToAmazon" Title="File Upload to Amazon" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/Upload.png" HighlightedTitle="Upload Control - Cloud Support" VirtualGroupKey="UploadControl">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) allows you to upload files to the most popular cloud services.
          </p>
          
          <p>
          In this demo, the Upload Control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">UploadStorage</helplink> property is set to <b>Amazon</b> (Amazon Simple Storage Service). To connect the ASPxUploadControl to Amazon cloud storage, register an Amazon account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterAmazon(System.String-System.String-System.String)">RegisterAmazon</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.AmazonSettings">AmazonSettings</helplink> property.
          </p>
          
          <ul>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlAmazonSettings.AccountName">AccountName</helplink>: Specifies the name of an Amazon account.</li>          
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlAmazonSettings.BucketName">BucketName</helplink>: Specifies the name of the current bucket.</li>
          </ul>
          
          <p>
          When using Amazon Simple Storage Service, a file can be accessed by its key name, which is returned by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile.FileNameInStorage">FileNameInStorage</helplink> property of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile">UploadedFile</helplink> object.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          <![CDATA[
          The DevExpress ASP.NET Upload Control (ASPxUploadControl) provides the capability to upload files to cloud services. In this demo, the Upload Control uploads files to the Amazon Simple Storage Service (Amazon S3).
          See how the File Manager works with other cloud services in the File Upload to Azure and File Upload to Dropbox demos.
          ]]>
        </HighlightedDescription>
        <SeeAlso Url="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html" Title="REST API" />
        <SeeAlso Url="https://docs.aws.amazon.com/sdk-for-net/index.html" Title="AWS SDK for .NET Documentation" />
        <SeeAlso Url="https://aws.amazon.com/sdk-for-net/" Title="AWS SDK for .NET" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToAzure" Title="File Upload to Azure" VirtualGroupKey="UploadControl">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) allows you to upload files to the most popular cloud services.
          </p>
          
          <p>
          In this demo, the Upload Control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">UploadStorage</helplink> property is set to <b>Azure</b>. To connect the ASPxUploadControl to Azure cloud storage, register an Azure account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterAzure(System.String-System.String-System.String)">RegisterAzure</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.AzureSettings">AzureSettings</helplink> property.
          </p>
          
          <ul>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlAzureSettings.AccountName">AccountName</helplink>: Specifies the name of an Azure account.</li>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlAzureSettings.ContainerName">ContainerName</helplink>: Specifies the name of the current container (blob storage).</li>
          </ul>
          
          <p>
          When using the Azure Service, a file can be accessed by its key name, which is returned by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile.FileNameInStorage">FileNameInStorage</helplink> property of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile">UploadedFile</helplink> object. 
          </p>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.microsoft.com/en-us/rest/api/storageservices/Blob-Service-REST-API?redirectedfrom=MSDN" Title="Blob Service REST API" />
        <SeeAlso Url="https://docs.microsoft.com/en-us/previous-versions/azure/dn261237(v=azure.100)?redirectedfrom=MSDN" Title="Storage Client Library Reference" />
        <SeeAlso Url="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-dotnet" Title="How to use Blob Storage from .NET" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToDropbox" Title="File Upload to Dropbox" VirtualGroupKey="UploadControl">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) allows you to upload files to the most popular cloud services.
          </p>
          
          <p>In this demo, the Upload Control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">UploadStorage</helplink> property is set to <b>Dropbox</b>. To connect the ASPxUploadControl to Dropbox cloud storage, register a Dropbox account in the global.asax file using the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.accountmanager.registerdropbox.overloads">RegisterDropbox</helplink> method and then specify the following settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.DropboxSettings">DropboxSettings</helplink> property.
          </p>
          
          <ul>
          <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlDropboxSettings.AccountName">AccountName</helplink>: Specifies the name of a Dropbox account.</li>          
          </ul>
          
          <p>
          When using Dropbox Service, a file can be accessed by its key name, which is returned by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile.FileNameInStorage">FileNameInStorage</helplink> property of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadedFile">UploadedFile</helplink> object.
          </p>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToGoogleDrive" Title="File Upload to Google Drive" VirtualGroupKey="UploadControl">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>This demo illustrates how to use the DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) to upload files to Google Drive.</p>
          <p>Use the following APIs to connect the upload control to Google Drive:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">ASPxUploadControl.UploadStorage</helplink> property to "GoogleDrive".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlGoogleDriveSettings.AccountName">UploadControlGoogleDriveSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterGoogleDrive(System.String-System.String-System.String)">AccountManager.RegisterGoogleDrive</helplink> method to register the Google Drive account in the global.asax file.</li>
          </ul>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToOneDrive" Title="File Upload to OneDrive" VirtualGroupKey="UploadControl">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>This demo illustrates how to use the DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) to upload files to OneDrive.</p>
          <p>Use the following APIs to connect the upload control to OneDrive:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">ASPxUploadControl.UploadStorage</helplink> property to "OneDrive".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlOneDriveSettings.AccountName">UploadControlOneDriveSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterOneDrive(System.String-System.String-System.String)">AccountManager.RegisterOneDrive</helplink> method to register the OneDrive Azure Active Directory application account in the global.asax file.</li>
          </ul>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
      <Demo Key="UploadToSharePoint" Title="File Upload to SharePoint" VirtualGroupKey="UploadControl" IsNew="true">
        <Keywords>cloud</Keywords>
        <Description>
          <![CDATA[
          <p>This demo illustrates how to use the DevExpress ASP.NET Upload Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl">ASPxUploadControl</helplink>) to upload files to SharePoint.</p>
          <p>Use the following APIs to connect the upload control to SharePoint:</p>
          <ul>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxUploadControl.UploadStorage">ASPxUploadControl.UploadStorage</helplink> property to "SharePoint".</li>
            <li>Specify the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.UploadControlSharePointSettings.AccountName">UploadControlSharePointSettings.AccountName</helplink> property.</li>
            <li>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AccountManager.RegisterOneDrive(System.String-System.String-System.String)">AccountManager.RegisterOneDrive</helplink> method to register the OneDrive Azure Active Directory application account in the global.asax file.</li>
          </ul>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117605/common-concepts/cloud-storage-account-management" Title="Cloud Storage Account Management" />
        <SourceFile>~/Global.asax</SourceFile>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames="dx:ASPxFileManager">
      <Demo Key="RightToLeft" Title="Right-to-Left Layout">
        <Description>
          <![CDATA[
<p>
DevExpress visual controls provide support for right-to-left languages such as Arabic and Hebrew. Thus, you can rely on these web controls when creating international web pages that include support for right-to-left reading order, and the mirroring of UI elements.
</p>

<p>
To switch a control to right-to-left representation, simply enable a single property - <b>RightToLeft</b>. When this property is on, the text flows from right to left in a control, and the control itself is mirrored (the layout of its UI elements is reversed).
</p>

<p>
If you need to apply a right-to-left display to all DevExpress web controls in your web application, you can enable the special <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> configuration option within the <b>Web.config</b> file, instead of changing the <b>RightToLeft</b> property for each control. This option can be accessed in the settings group of the devExpress section in the <b>Web.config</b> file.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxGauges" Url="ASPxGaugesDemos" Title="DevExpress ASPxGauges" SeoTitle="ASP.NET AJAX Gauge Controls" NavItemTitle="Gauges" OrderIndex="11" HighlightedTagNames="dx:ASPxGaugeControl">
    <Keywords>visualisation, visualization</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxGauges_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Gauge.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Gauge Controls">
      <BannerTitle>
        ASP.NET AJAX Gauge Controls
      </BannerTitle>
      <BannerText>
        Over 180 built-in presets, including Circular, Linear, Digital, State Indicator Gauges and Composite Presets
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=w0UgTUE1Jmw</BannerUrl>

      <DescriptionTitle>Welcome to the online demo site of the ASPxGauges Suite</DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our ASP.NET controls. 
                These features include:
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <DescriptionTitle>About Gauges</DescriptionTitle>
      <Description>
        <![CDATA[
          <p>
            The ASPxGauges Suite ships with over 150 built-in presets that are designed to simplify the way in which developers create a dashboard-style UI. You do not have to manually create elements, or customize their appearance, size, and layout. Just choose a template, bind your control to data, and you are ready to go.
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <SeeAlso Url="https://www.youtube.com/watch?v=w0UgTUE1Jmw" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/5230/aspnet-webforms-controls/gauges" Title="Documentation" />
      <KeyFeature Name="Advanced Design-Time Support">
        <Description>
          <![CDATA[
              <p>The ASP.NET Gauges Suite provides an easy-to-use Preset Manager, Control and Element Designers, which significantly simplify the process of customizing the Gauge Control.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Built-in Style Collection">
        <Description>
          <![CDATA[
              <p>The ASP.NET Gauge Suite provides 26 built-in styles that allow you to change how a control looks with just a single mouse click.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Circular Gauges">
        <Description>
          <![CDATA[
              <p>ASPxGaugeControl provides built-in presets for circular gauges of the following types: full, three fourths, half, left quarter, right quarter, and wide.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Linear Gauges">
        <Description>
          <![CDATA[
              <p>ASPxGaugeControl provides built-in presets for horizontal and vertical linear gauges.</p>
            ]]>
        </Description>
      </KeyFeature>
    <KeyFeature Name="Digital Gauges">
        <Description>
          <![CDATA[
              <p>ASPxGaugeControl provides four types of digital gauges: seven-segment, fourteen-segment, 5x8 matrix and 8x14 matrix.</p>
            ]]>
        </Description>
      </KeyFeature>
     <KeyFeature Name="State Indicator Gauges">
        <Description>
          <![CDATA[
              <p>ASPxGaugeControl provides state indicators of the following types: traffic light, smiley, electric light, arrow, flag, currency symbol, and car icon.</p>
            ]]>
        </Description>
      </KeyFeature>
    </Overview>
    
    <DemoGroup Key="Features" Title="Features" HighlightedTagNames="dx:ASPxGaugeControl">
      <Demo Key="Styles" Title="Styles" SeoTitle="Built-in Gauge Styles"
          HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Styles.png" HighlightedTitle="Built-in Gauge Styles">
        <Description>
          <![CDATA[
               The ASP.NET Gauges provides 26 built-in styles, which are available for all gauge types (Circular, Linear and Digital) and thus provide a consistent look and feel for your gauge dashboard.
               In this demo, you can see the corresponding styles.
                ]]>
        </Description>
        <HighlightedDescription>DevExpress ASP.NET Gauges provide 26 built-in styles that can be applied to most gauge elements.</HighlightedDescription>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Data-Bound Gauge Control"
          HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/DataBinding.png">
        <Keywords>datasource, databinding, sqldatasource</Keywords>
        <Description>
          <![CDATA[
               This demo shows how to bind ASP.NET Gauges to data by using a scale's DataBinding event. In the demo, you can select two cars and a car's parameter. The gauge will automatically indicate the difference between these cars' parameters.
                ]]>
        </Description>
        <HighlightedDescription>
          You can easily bind the DevExpress ASP.NET Gauge Control (ASPxGaugeControl) to data. This demo shows how to bind the ASPxGaugeControl.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Gauges" Title="Gauge Types">
      <Demo Key="CircularGauge" Title="Circular Gauge" SeoTitle="Circular Gauges"
          HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Circular.png">
        <Description>
          <![CDATA[
              The Circular Gauge is a component used for displaying element values on a circular scale. The demo above allows you the opportunity to practice customizing various options and then immediately seeing the result in the preview pane.
                ]]>
        </Description>
        <HighlightedDescription>
          A Circular Gauge is a component that displays element values on a circular scale. This demo illustrates the Circular Gauge, which is included in the DevExpress ASP.NET Gauge Control (ASPxGaugeControl).
        </HighlightedDescription>

      </Demo>
      <Demo Key="LinearGauge" Title="Linear Gauge" SeoTitle="Linear Gauges"
          HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Linear.png">
        <Description>
          <![CDATA[
              Linear Gauge is a component that represents visual elements on a linear scale. You can use this control in different applications to create thermometers and indicators. Practice customizing various options, and immediately see the result in the preview pane.
                ]]>
        </Description>
        <HighlightedDescription>
          A Linear Gauge is a component that displays element values on a linear scale. This demo illustrates the Linear Gauge, which is included in the DevExpress ASP.NET Gauge Control (ASPxGaugeControl).
        </HighlightedDescription>

      </Demo>
      <Demo Key="DigitalGauge" Title="Digital Gauge" SeoTitle="Digital Gauges">
        <Description>
          <![CDATA[
                This demo illustrates a digital gauge type. See how the gauge displays text, using the seven segment, fourteen segment and matrix display mode.
                ]]>
        </Description>
      </Demo>
      <Demo Key="StateIndicatorGauge" Title="State Indicator Gauge" SeoTitle="State Indicator Gauges">
        <Description>
          <![CDATA[
                This demo illustrates a state indicator gauge type, appropriate for visualizing objects that have a set of predefined states. 
                In this demo, you can select the image set, and then select a state via a spin edit.
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Gadgets" Title="Gadgets">
      <Demo Key="WorldTime" Title="World Time" SeoTitle="Composite Gauges">
        <Description>
          <![CDATA[
                In this demo, gauges are used to show the current time in certain cities around the world. 
                Each gauge contains three labels displaying a city name, country and an average currency exchange rate against US dollar. 
                NOTE: This demo doesn't use real data.
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxRichEdit" Url="ASPxRichEditDemos" Title="DevExpress ASPxRichEdit" SeoTitle="ASP.NET AJAX Rich Text Editor" NavItemTitle="Rich Text Editor" HighlightedTagNames="dx:ASPxRichEdit" OrderIndex="7" IntegrationHighlighted="true">
    <Keywords>richedit, word, office, richtext</Keywords>
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>
    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>
    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxHtmlEditor_Doc.aspx
    </DocUrl>
    <IntegrationImageUrl>~/Content/RichEdit.png</IntegrationImageUrl>
    <IntegrationDescription>
      Microsoft Word® inspired UI, read/write DOCx, DOC, RTF and TXT files.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET Rich Text Editor Control">
      <BannerTitle>
        Rich Text Editor Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        The ASP.NET Rich Text Editor is an easy-to-use and intuitive web based WYSIWYG word processor and emulates the look, feel and UX of Microsoft Word&#174; online.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=AHldv_mWsto</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxRichEdit Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxRichEdit Suite</b>. These features include:</p>
            ]]>
      </Description>
    </Intro>
    <Overview Title="Overview">
      <Description>
        <![CDATA[
        <p>
          The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) is a Word-inspired control that helps you create full-featured text applications with complex formatting and display capabilities. The ASPxRichEdit supports loading, saving, exporting, and conversion to and from today's most popular text-based document formats. With the Rich Text Editor, you can allow end-users to create, edit and save rich-text documents within their browser.
        </p>
        ]]>
      </Description>
      <SeeAlso Url="https://docs.devexpress.com/AspNet/17721/aspnet-webforms-controls/rich-text-editor" Title="Documentation" />
      <KeyFeature Name="Microsoft Office Inspired UI">
        <Description>
          <![CDATA[
             The ASPxRichEdit provides a user experience similar to that of Microsoft Word Online. It includes full integration with the <a href="http://demos.devexpress.com/ASPxNavigationAndLayoutDemos/Ribbon/Overview.aspx">DevExpress ASP.NET Ribbon</a> control.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Support for Popular File Formats">
        <Description>
          <![CDATA[
             You and your end-users can load, convert and save documents in today’s most popular document file formats including DOCX, DOC, RTF, ODT, TXT, XML, HTML, MHT and EPUB.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Character Formatting">
        <Description>
          <![CDATA[
             Characters can be formatted using different settings for font, font size, character style (bold, italics, underlined, strike-through) and different colors for background and foreground.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Paragraph Formatting">
        <Description>
          <![CDATA[
             Formatting options for paragraphs include alignment, indentation, variable paragraph and line spacing.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Styles">
        <Description>
          <![CDATA[
             Styles facilitate quick modification of a document's formatting and allow centralized control over formatting options. The editor supports both paragraph and character based styles, as well as multiple style inheritance. Its stylesheets are compatible with Microsoft Word.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Pictures">
        <Description>
          <![CDATA[
             Incorporate pictures into a document inline with text and have the ability to move, transform and delete inline pictures in the document.
            ]]>
        </Description>
      </KeyFeature>      
    </Overview>
    <DemoGroup Key="EditingFeatures" Title="Editing Features">
      <Demo Key="CharacterFormatting" Title="Character Formatting" SeoTitle="Rich Text Editor Character Fomatting" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/CharacterFormatting.png" HighlightedTitle="Character Formatting">
        <Description>
          <![CDATA[ 
          <p>
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) ships with everything you'd expect from a powerhouse word processor, including a rich set of character formatting options. Explore the capabilities of this control by applying character settings and font effects - available within the Font group of the ribbon’s Home tab. There are various font, font size, and character style settings used for text: bold, italic, underlined, strike-through style, and different colors for background and foreground. Character formatting can be applied to a single character, word, sentence or a line of text, without affecting the entire paragraph.
          </p> 
          ]]>
        </Description>
        <HighlightedDescription>
          A rich set of character formatting options, including different settings for font, font size, character style (such as bold, italics, underlined, strike-through style) and different colors for background and foreground.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ParagraphFormatting" Title="Paragraph Formatting" SeoTitle="Rich Text Editor Paragraph Formatting">
        <Description>
          <![CDATA[ 
          <p>
This demo illustrates different paragraph formatting options available to you when using the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>). Explore the demo by changing paragraph formatting (such as alignment, spacing and indentation) using the buttons within the Paragraph group of the ribbon's Home tab.          
          </p> 
          ]]>
        </Description>
        <HighlightedDescription>
          Extended formatting options for paragraphs include alignment, indentation, variable paragraph and line spacing.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Styles" Title="Styles" SeoTitle="Rich Text Editor Styles">
        <Description>
          <![CDATA[ 
          <p>
This demo illustrates the use of document styles. The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) supports both paragraph and character based styles, along with multiple style inheritance. A built-in style gallery allows you to quickly apply formatting to the contents of the ASPxRichEdit. Give it a try and see how it works. Select a block of text within the editor, navigate to the Home tab of the ribbon and select the desired style from the style gallery in the Styles group.
          </p> 
          ]]>
        </Description>
        <HighlightedDescription>
          Both paragraph and character based styles are supported - as is multiple style inheritance. A built-in style gallery allows you to quickly apply formatting to the editor’s contents.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Sections" Title="Sections" SeoTitle="Rich Text Editor Sections Support">
        <Description>
          <![CDATA[ 
          <p>
This demo illustrates how to divide documents into multiple sections – with specific page formatting options. For each section, you can change the number of columns, page orientation or margins using the options available in the ribbon's Page Layout tab.
          </p> 
          ]]>
        </Description>
      </Demo>
      <Demo Key="TextWithImages" Title="Text with Images" SeoTitle="Rich Text Editor Inline Images" >
        <Description>
          <![CDATA[ 
          <p> 
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) allows you to insert inline pictures into a document.
          </p>
          <p>
To insert a picture, move the blinking cursor to the appropriate position within the document and click the Picture item within the Illustrations group of the ribbon's Insert tab. The pictures you insert can be located on your computer or on the web. You can also move, transform and delete pictures in a document.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BulletsAndNumbering" Title="Bullets And Numbering" SeoTitle="Rich Text Editor Bullets And Numbering">
        <Description>
          <![CDATA[ 
          <p> 
This demo illustrates how the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) displays bulleted and numbered lists within a document and how you can control the auto-number feature. Use the corresponding buttons in the ribbon <b>Home</b> tab's <b>Paragraph</b> group to make desired changes.
          </p>
          <p>
For more deeper customization of list appearances, use the <b>Bullets and Numbering...</b> item in the document's context menu. It provides access to the Bullets and Numbering dialog, which allows you to define dozens of bullet and number characteristics (such as bullet characters and positions, number format, style, position, and much more). 
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="HyperlinksAndBookmarks" Title="Hyperlinks and Bookmarks" SeoTitle="Rich Text Editor Hyperlinks Bookmarks">
        <Description>
          <![CDATA[ 
<p> 
This demo illustrates the built-in hyperlink and bookmark support available within the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>). Once you browse the document, you will notice hyperlinks pointing to external locations or associated with bookmarks in the same document. To create a hyperlink or bookmark, select a position in the document or select a document range and press the <b>Hyperlink</b> or <b>Bookmark</b> command button in the <b>Links</b> group of the ribbon's <b>Insert</b> tab.
</p>
<p>
In documents, a hyperlink is implemented as a document field of the HYPERLINK field code.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Tables" Title="Tables" SeoTitle="Rich Text Editor Tables" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/Tables.png" HighlightedTitle="Tables">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) is shipped with integrated table support providing a capability to display, edit, and create tables in documents. The ASPxRichEdit offers many of the table-related features you've come to expect from word processors such as Microsoft Word. Specific context ribbon tabs, context menu items and dialogs allow your end-users to create and modify tables with ease.
</p>
<p>
End-users can adjust the table size using the mouse - dragging of cell borders changes column widths or row heights. Column sizing can also be performed using ruler markers.
The keyboard can be used to navigate and select table cells. To navigate through cells, use arrow keys, or Tab and Tab+Shift. To select cells, use Shift together with the arrow keys.
</p>
          ]]>
        </Description>
        <HighlightedDescription>
          With integrated table support, end-users can view, modify and create tables in a document with ease.
        </HighlightedDescription>
      </Demo>
      <Demo Key="HeadersAndFooters" Title="Headers and Footers" SeoTitle="Rich Text Editor Headers and Footers Support">
        <Description>
          <![CDATA[
<p>
This demo illustrates the capability of the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) to display and modify headers and footers within documents. 
</p>
<p>
A double-click on a document's corresponding areas (a page's top or bottom) invokes a specific <b>Header and Footer</b> ribbon context tab. It contains a set of commands to modify options specific to headers and footers. End-users can specify different headers and footers for the first page, odd and even pages, and each particular section. Headers and footers can contain any content, including page numeration, images, etc.
</p>
          ]]>
        </Description>
        <HighlightedDescription>
          Different headers and footers can be specified for the first page, odd and even pages, and each particular section.
        </HighlightedDescription>
      </Demo>
      <Demo Key="SpellChecking" Title="Spell Checking" SeoTitle="Rich Text Editor Spell Checking">
        <Description>
          <![CDATA[
<p>
The ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) delivers built-in spell checking support, including the type-as-you-go error detection. This demo shows how a document's spelling can be checked and corrected within the RichEdit.
</p>

<p>
You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.Settings">Settings</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditSettings.SpellChecker">SpellChecker</helplink> property to define the spell checking availability and the main spelling options (such as the selected culture and paths to alphabet, grammar and dictionary files).
</p>

<p>
The spell-checking functionality exposed by the RichEdit is provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpellChecker.ASPxSpellChecker">ASPxSpellChecker</helplink> control. To learn more about the capabilities of the DevExpress ASP.NET Spell Checker, refer to its <a href="http://demos.devexpress.com/ASPxSpellCheckerDemos/Overview.aspx" target="_blank">demos</a>.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="FindAndReplace" Title="Find and Replace" SeoTitle="Rich Text Editor Find and Replace">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides the Find and Replace feature that allows your end-users to easily locate and modify text within the entire open document. The Find and Replace functionality is implemented by using two elements: the Search Panel and the 'Find and Replace' dialog.
</p>

<p>
The <b>Search Panel</b> allows end-users to search text and navigate through search results. To invoke the panel, use the 'Find' ribbon command or press the CTRL + F key combination.
</p>

<p>
The <b>'Find and Replace' dialog</b> allows end-users to search text, navigate through search results and replace the found text in the results (one by one or all at once). To invoke the dialog, click the corresponding button in the Search Panel, or use the 'Replace' ribbon command, or press the CTRL + H key combination.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="FloatingObjects" Title="Floating Objects" SeoTitle="Rich Text Editor Floating Objects" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/FloatingObjects.png" HighlightedTitle="Floating Objects">
        <Description>
          <![CDATA[
<p>
To help you replicate the Microsoft Word user experience, the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) ships with the floating object support. The ASPxRichEdit allows users to freely position, scale and rotate all floating objects when inserting pictures or text boxes into a document. End-users can also modify object characteristics using context menu items, a specific ribbon context tab, or activate the built-in <b>Layout</b> dialog through the context menu. Give the demo a try and see how easy it is to drag and resize an object using its outline, and rotate it by using its rotate handle.
</p>
<p>
The ASPxRichEdit provides a specific client API allowing you to manipulate floating objects programmatically. In code, you can call client commands available through the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.commands">commands</helplink> client property to insert text boxes (<helplink href="https://docs.devexpress.com/AspNet/js-RichEditCommands.insertFloatingTextBox">insertFloatingTextBoxCommand</helplink>), change inline pictures into floating pictures, change different floating object settings, and invoke the <b>Layout</b> dialog (<helplink href="https://docs.devexpress.com/AspNet/js-RichEditCommands.openLayoutOptionsDialog">openLayoutOptionsDialogCommand</helplink>).
</p>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress Rich Edit control allows inserting floating objects - pictures and text boxes - into a document via specific UI or programmatically.</HighlightedDescription>
      </Demo>
      <Demo Key="TableOfContents" Title="Table of Contents" SeoTitle="Rich Text Editor Table of Contents">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) allows navigating through documents using interactive navigation tables: the <b>Table of Contents</b> and <b>Table of Figures/Tables/Equations</b>.
</p>

<ul>

<li>
The <b>Table of Contents</b> lists the document's headings created by applying headings styles to the text paragraphs. The heading style changes the characters' appearance and specifies the paragraph's outline level.
</li>

<li>
The <b>Table of Figures/Tables/Equations</b> lists the corresponding document objects provided with a numbered label below - an object's caption. The caption identifies the object and adds it to the corresponding table.
</li>

</ul>

<p>
To manage these navigation tables, the Rich Text editor provides the <b>References</b> ribbon tab that allows you to add tables, mark paragraphs as headings or add captions to objects, and update the tables to display the corrected entries and page numbers.
</p>

<p>
In this demo, the document includes the <b>Table of Contents</b> and <b>Table of Figures</b>. You can move to the selected heading or figure by clicking the corresponding table's row while pressing the CTRL key. If a navigation table displays outdated information (outdated headings/captions or outdated page numbers) after changing the document, you can select the table and click the <b>Update Table</b> command in the <b>References</b> ribbon tab to update the table and display the correct information.
</p>

<p>See the <helplink href="https://docs.devexpress.com/AspNet/120112/aspnet-webforms-controls/rich-text-editor/concepts/table-of-contents">Table of Contents</helplink> topic for more information about the interactive navigation tables and how you can manage them in code.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="AutoCorrect" Title="Auto Correct" SeoTitle="Rich Text Editor Auto Correct">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) supports the AutoCorrect feature that allows you to analyze the typed text and modify or substitute it. The control provides the AutoCorrect capabilities that can be enabled by setting the corresponding server-side properties to true. You also can perform custom substitution algorithms by handling the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.AutoCorrect">AutoCorrect</helplink> event.
</p>

<p>
You can enable the built-in AutoCorrect feature using the following server-side properties:
</p>

<ul>

<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditAutoCorrectSettings.CorrectTwoInitialCapitals">CorrectTwoInitialCapitals</helplink> - specifies whether the control should correct words that start with two capital letters by changing the second letter to lowercase.
</li>

<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditAutoCorrectSettings.DetectUrls">DetectUrls</helplink> - specifies whether the control should detect URI strings and format them as hyperlinks.
</li>

<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditAutoCorrectSettings.EnableAutomaticNumbering">EnableAutomaticNumbering</helplink> - specifies whether the control should automatically start numbered or bulleted lists when the specific symbols are typed.
</li>

<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditAutoCorrectSettings.ReplaceTextAsYouType">ReplaceTextAsYouType</helplink> - specifies whether the control should search a replacement for the typed string in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditAutoCorrectReplaceInfoCollection">AutoCorrectReplaceInfoCollection</helplink> collection.
</li>

</ul>

<p>
If you need to extend the control’s AutoCorrect functionality, you can handle client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.AutoCorrect">AutoCorrect</helplink> event that occurs when a user types text in the control. While handling the event, you can use the <helplink href="https://docs.devexpress.com/AspNet/117668/aspnet-webforms-controls/rich-text-editor/concepts/client-api/client-commands">client commands</helplink> to insert formatted text, images, tables, and other document objects.
</p>

<p>In this demo, you can try the AutoCorrect functionality by typing symbols to in the rightmost column of the table in the document.
</p>
        ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="MailMerge" Title="Mail Merge">
      <Demo Key="Fields" Title="Fields" SeoTitle="Rich Text Editor Fields">
        <Description>
          <![CDATA[ 
          <p> 
In the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>), document fields are special placeholders for non-static data that might change (be updated on field update). These placeholders are replaced with actual data when the document is rendered for display or print. Using fields, you can automate different aspects of your document, such as auto page numbering, inserting actual dates and times, etc. The default <b>Mail Merge</b> ribbon tab can be used to work with fields (create, update, switch between field display modes).
</p>
<p>
A field is specified by a field code, and can be viewed within a document as either a field code or a field result. The field code specifies how the field result should be calculated when the field is updated. The field result represents the actual, resultant value of the field. This value is calculated by the ASPxRichEdit's field updating engine based on the field code information. To insert a field, position the mouse cursor within a document and execute the <b>Create Field</b> command from the ribbon's <b>Mail Merge</b> tab (or use the Ctrl+F9 shortcut). Field codes appear between curly brackets ( { } ). The following field codes are supported.
</p>
<ul>
    <li>
DATE - Inserts the current date and time.
    </li>
    <li>
TIME - Inserts the current time.
    </li>
    <li>
DOCVARIABLE - Enables you to programmatically insert complex content when this field is updated.
    </li>
    <li>
HYPERLINK - Enables you to navigate to another location or to a bookmark.
    </li>
    <li>
NUMPAGES - Inserts the total number of pages.
    </li>
    <li>
PAGE - Inserts the number of the page containing the field.
    </li>
    <li>
MERGEFIELD - Retrieves a value from the bound data source.
    </li>
</ul>
<p>
 In a document, a field code is displayed using the following syntax:
</p>
<p>
{ FIELDNAME Properties Optional_Switches }
</p>
<p>
FIELDNAME - This is the name of the field.<br />
Properties - These are any instructions or variables that are used in a particular field. Not all fields have parameters, and in some fields, parameters are optional.<br />
Optional switches - These are any optional settings that are available for a particular field. Not all fields have switches available, other than those that control the formatting of the field results.<br />
</p>
<p>
You can switch between displaying the field code and the field result by right-clicking in a field (or in a selected document portion that contains fields) and clicking the context menu's <b>Toggle Field Codes</b> item (or using the Shift + F9 shortcut). To toggle all fields within a document, use the <b>Show All Field Codes</b> and <b>Show All Field Results</b> commands in the ribbon's <b>Mail Merge</b> tab (or use the Alt + F9 shortcut).
</p>
<p> 
To update fields, use the context menu's <b>Update Field</b> item (or press F9). All fields in a document can be updated using the <b>Update All Fields</b> command in the ribbon's <b>Mail Merge</b> tab.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="DocVariable" Title="Document Variables" SeoTitle="Rich Text Editor Document Variables Support (DOCVARIABLE)">
        <Description>
          <![CDATA[ 
          <p> 
The DevExpress ASP.NET Rich Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) enables you to store custom information in the document using document variables. To insert a document variable in the document, use the DOCVARIABLE field code.
</p>
<p>
The DOCVARIABLE field code has the following syntax:
</p>
<p>
{ DOCVARIABLE "variable name" "argument1" "argument 2"... }
</p>
<p>
This field code inserts the value of a named document variable specified by a text in the field argument(s). Before a field is updated, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.CalculateDocumentVariable">CalculateDocumentVariable</helplink> server event is fired allowing you to manually calculate the required value. In a handler of this event, the event argument's <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.XtraRichEdit.CalculateDocumentVariableEventArgs.Arguments">Arguments</helplink> property provides access to a collection of arguments contained within the field. A common task is to evaluate DOCVARIABLE fields in a document depending on the variable name and argument and then substitute fields with their values. Note that you can return a text or the entire Document as a document variable.
</p>
<p>
This demo illustrates how to use the DOCVARIABLE field with custom parameters to dynamically calculate and insert total incomes by categories and to embed bar charts that visualize income allocation by products.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="BuiltInMailMerge" Title="Built-in Mail Merge" SeoTitle="Built-in Mail Merge" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/MailMerge.png" HighlightedTitle="Mail Merge">
        <Description>
          <![CDATA[
<p>
The mail merge functionality provided by the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) enables you to bind the control to an external data source and then preview dynamic content right in the opened template document, prior to performing the final mail merge. This feature can be useful for a variety of business requirements, such as composing, previewing and generating catalogs, reports, or personalized letters.
</p>
<p>
To specify a data source, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> (or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink>) property can be used.
</p>
<p>
The ASPxRichEdit also provides a specific API allowing you to control mail merge operations programmatically.
</p>
<ul>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.ViewMergedData">ViewMergedData</helplink> property specifies whether to display field results or field codes in a mail-merge document.
</li>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxrichedit.aspxrichedit.mailmerge.overloads">MailMerge</helplink> method (with a set of overloads) initializes the mail merge process and generates the resulting document containing the merged information.
</li>
<li>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.CreateMailMergeOptions">CreateMailMergeOptions</helplink> method creates an object for specifying the options used in mail merge operations.
</li>
</ul>

          ]]>
        </Description>
        <HighlightedDescription>
          Whether you wish to generate personalized letters, company directories or interactive business reports, the built-in data merge capabilities offer a variety of runtime options.
        </HighlightedDescription>
      </Demo>
      <Demo Key="MailMergeViaDocumentServer" Title="Mail Merge via Document Server" SeoTitle="Mail Merge via Document Server">
        <Description>
          <![CDATA[
<p>
This demo illustrates a scenario, in which mail merge operations are performed dynamically with the help of an external <helplink href="https://docs.devexpress.com/OfficeFileAPI/17488/word-processing-document-api">RichEditDocumentServer</helplink> component. 
</p>
<p>
The RichEditDocumentServer loads a predefined template document containing the static content with embedded mail merge data fields, binds to an external data source and generates the merged document. In this demo, the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) is used to open the resulting merged document for display within a web page.
</p>          
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="DocumentManagement" Title="Document Management">
      <Demo Key="LoadAndSave" Title="Load/Save" SeoTitle="Open and Save Documents in Rich Text Editor" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/LoadSave.png" HighlightedTitle="Load/Save">
        <Description>
          <![CDATA[ 
          <p> 
With the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>), your users can view and modify documents with rich text formatting in a browser. The ASPxRichEdit can open and save documents in the most popular document file formats, such as DOCX, DOC, RTF, TXT, HTML. You can allow end-users to perform file management operations (such as creating a new document, opening an existing document or saving a document) via the corresponding ribbon command buttons. These buttons are available in the File tab of the built-in ribbon.
          </p> 
          <p>
This demo illustrates how the ASPxRichEdit can open and save documents in different formats. Simply drop the ASPxRichEdit control onto a form and set a single property - WorkDirectory. This property specifies the folder on the server where documents are located.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Rich Text Editor provides a rich UI and comprehensive API to manage (create, upload, open and save) rich-text documents, to convert them to/from different popular formats.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomDocumentManagement" Title="Custom Document Management" SeoTitle="Document Management in Rich Text Editor" HighlightedTagNames="dx:ASPxFileManager">
        <Description>
          <![CDATA[ 
          <p> 
Although the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides a built-in file management system (create, open and save) via its File ribbon tab, an external file management control can also be used with the ASPxRichEdit.
          </p> 
          <p> 
This demo illustrates use of an external <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> control to navigate a document hierarchy and select a file to open. Documents can be opened from a specific folder on the server ("DocumentBrowsing") and can also be uploaded to this folder from the client computer. The selected document is opened via the ASPxRichEdit's <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxrichedit.aspxrichedit.open.overloads">Open</helplink> method.
          </p>
          ]]>
        </Description>
        <HighlightedDescription></HighlightedDescription>
      </Demo>
      <Demo Key="ExportToPDF" Title="Export to PDF" SeoTitle="Rich Text Editor Export to PDF">
        <Description>
          <![CDATA[ 
          <p> 
This demo illustrates the ease with which you can generate PDF output directly from the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>). ASPxRichEdit exposes the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxrichedit.aspxrichedit.exporttopdf.overloads">ExportToPdf</helplink> server method which exports data to a file or stream in PDF format.
          </p> 
          <p>
Make any changes to the document and click the Export to PDF button to export the editor's contents.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Settings" Title="Document and Operation Restrictions" SeoTitle="Rich Text Editor Document and Operation Restrictions">
        <Description>
          <![CDATA[ 
          <p> 
This demo illustrates the level of control the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides to you when your business logic requires you to restrict some behavior and formatting options available to end-users within a document. You are able to prevent certain operations (such as open/save or copy/paste) from being performed within a document and to limit document characteristics (such as character or paragraph formatting) that can be changed.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="DocumentProtection" Title="Document Protection" SeoTitle="Rich Text Editor Document Protection" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/DocumentProtection.png" HighlightedTitle="Document Protection">
        <Description>
          <![CDATA[
            <p>
              The ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/114117/aspnet-webforms-controls/rich-text-editor/concepts/aspxrichedit-control">ASPxRichEdit</helplink>) provides support for working with protected documents. When the RichEdit opens a fully protected document, users cannot edit it. If a protected document includes range permissions that enable editing document parts for a unique user or user group, the RichEdit is able to identify the current user and grant him/her the corresponding permissions. Use the RichEdit's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditSettings.Authentication">Authentication</helplink> property to authorize the current document user by its name, email or user group name. You can also define how the permitted ranges are highlighted within the RichEdit by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditSettings.RangePermissions">RangePermission</helplink>  property. 
            </p>
            <p>
              In this demo, the RichEdit opens a protected document that includes permitted ranges for four users identified by email: each user is authorized to edit a separate text area. You can switch between users to edit different text parts. The range that is enabled for the current user is highlighted. You can disable the highlighting or customize its color using the corresponding demo’s elements.
            </p>
          ]]>
        </Description>
        <HighlightedDescription>The ASP.NET Rich Edit control (ASPxRichEdit) allows preventing end-users from modifying a document. Using range permissions and authentication settings, you can permit access to certain parts of the document for a specified user (or a group of users).</HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="API" Title="API">
      <Demo Key="CommandsAPI" Title="Client Command API" SeoTitle="Rich Text Editor Client Command API" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/ClientCommandAPI.png" HighlightedTitle="Client Command API">
        <Description>
          <![CDATA[ 
<p>
The ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides a comprehensive API, allowing you to manipulate the open document programmatically on the client side. The available client manipulation API is exposed through the following properties.
</p>

<ul>
<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.document">document</helplink><br/>
Provides access to structures allowing you to obtain the current information about certain document structural elements (such as sections, active sub-document, styles for characters, paragraphs and tables, and etc).
</li>
<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.selection">selection</helplink><br/>
Provides access to a set of methods allowing you to position the cursor within a document and to select document content elements.
</li>
<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.commands">commands</helplink><br/>
Provides access to client commands allowing you to programmatically accomplish virtually any task within a document (such as inserting characters, paragraphs, tables and pictures, changing element formatting, creating numbered lists, etc).
</li>
</ul>

<p>
Available commands are a powerful tool to manipulate document content on the client in code. Most commands replicate the RichEdit's default UI commands available through the editor's ribbon. These commands are useful when you are required to implement a custom toolbar for the RichEdit instead of the default built-in ribbon. For an example of such a custom toolbar, refer to the <a href="http://demos.devexpress.com/ASPxRichEditDemos/BarsAndUI/CustomToolbar.aspx">Custom Toolbar via Client API</a> demo.
</p>

<p>
Each command exposes the <b>execute</b> and <b>getState</b> methods. For its execution, a command may require additional data to be passed as the <b>execute</b> method's parameter. The <b>execute</b> method may result in no action taken if a command's state obtained using the <b>getState</b> method does not allow command execution (for instance, in case when a command is not enabled in the ribbon).
</p>

<p>
This demo is an illustration of how the client API for commands and selection can be used in the RichEdit.
</p>
          ]]>
        </Description>
        <HighlightedDescription>The ASP.NET Rich Text Editor (ASPxRichEdit) provides APIs allowing you to manipulate the document programmatically on the client side.</HighlightedDescription>
        <SourceFile>~/Scripts/CommandsAPI.js</SourceFile>
      </Demo>
      <Demo Key="ClientSideEvents" Title="Client-Side Events" SeoTitle="Rich Text Editor Client-Side Events">
        <Description>
          <![CDATA[ 
            <p>
              This sample demonstrates the capabilities of the DevExpress client-side event management technology. All available control-specific client-side events are traced in this demo. Play with the DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/17721/aspnet-webforms-controls/rich-text-editor">ASPxRichEdit</helplink>) interface elements or modify the document content to initiate client-side events.
            </p>
            <p>
              The RichEdit provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the control's functionality. Thus, they give you complete control over RichEdit client-side behavior.
            </p>
            <p>
              The following client events are available for the RichEdit.
            </p>
            <ul>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> - Occurs on the client side after the control has been initialized, but prior to it being displayed within the browser.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.GotFocus">GotFocus</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.LostFocus">LostFocus</helplink> - Occurs when the RichEdit receives or loses focus.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.DocumentChanged">DocumentChanged</helplink> - Fires if any change is made to the RichEdit's document by an end-user.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.ContentInserted">ContentInserted</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.ContentRemoved">ContentRemoved</helplink> - Fires when the RichEdit's document content is modified (by adding a new content or removing the existing one).
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.CharacterPropertiesChanged">CharacterPropertiesChanged</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.ParagraphPropertiesChanged">ParagraphPropertiesChanged</helplink> - Fires when formatting settings are applied to a character(s) interval or paragraph within the RichEdit's document.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.BeginSynchronization">BeginSynchronization</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.EndSynchronization">EndSynchronization</helplink> - Fires before and after the client-server synchronization is performed to apply changes and synchronize the server and client document models.
              </li> 
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.SelectionChanged">SelectionChanged</helplink> - Fires when a selection is changed in the RichEdit.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.KeyDown">KeyDown</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.KeyUp">KeyUp</helplink> - Fires when any key is pressed or released while the RichEdit has focus.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.PointerDown">PointerDown</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.PointerUp">Pointer Up</helplink> - Fires when a mouse button is pressed or released while the mouse cursor is over the RichEdit.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.HyperlinkClick">HyperlinkClick</helplink> - Fires after a hyperlink is clicked within the RichEdit's document.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.ActiveSubDocumentChanged">ActiveSubDocumentChanged</helplink> - Fires when the active sub-document is substituted with another one within the RichEdit's document.
              </li>
              <li>
                <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.PopupMenuShowing">PopupMenuShowing</helplink> - Fires when the RichEdit's context menu is invoked.
              </li>                     
            </ul>
            <p>
              To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
            </p>
            ]]>
        </Description>
        <HighlightedDescription></HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="BarsAndUI" Title="Toolbars and UI">
      <Demo Key="RibbonCustomization" Title="Ribbon Customization" SeoTitle="Rich Text Editor Ribbon UI Customization" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/RibbonUI.png" HighlightedTitle="Ribbon UI Customization" HighlightedTagNames="dx:ASPxRibbon">
        <Description>
          <![CDATA[
<p> 
The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides a UI experience similar to Microsoft Word Online. It fully integrates the DevExpress ASP.NET Ribbon control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>), allowing you to create intuitive and easy-to-use word processing apps in the shortest possible time.
</p> 
<p>
This demo illustrates the ribbon-based UI modes available within the ASPxRichEdit. Based upon the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.RibbonMode">RibbonMode</helplink> property setting, ASPxRichEdit can use either a built-in ribbon, a built-in one-line toolbar, an external ribbon control, or no ribbon. The RibbonMode property values include:
</p>
<ul>
<li><b>Ribbon</b> – The Rich Text Editor uses a built-in ribbon; ribbon tabs can be customized using the ASPxRichEdit's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.RibbonTabs">RibbonTabs</helplink> collection.</li>
<li><b>One Line Ribbon</b> – The Rich Text Editor displays a built-in ribbon used in one-line mode optimized for touch devices; one-line mode related settings can be defined for ribbon groups and ribbon galleries with their OneLineModeSettings properties.</li>
<li><b>ExternalRibbon</b> – The Rich Text Editor uses an external <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.AssociatedRibbonID">AssociatedRibbonID</helplink> property. Ribbon tabs can be customized at the ASPxRibbon control level with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.Tabs">Tabs</helplink> property. The ASPxRichEdit's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit.CreateDefaultRibbonTabs(System.Boolean)">CreateDefaultRibbonTabs</helplink> method can be used to automatically populate the external ribbon with the default ribbon tabs.</li>
<li><b>None</b> – The Rich Text Editor does not incorporate or use the ribbon UI.</li>
<li><b>Auto</b> – The Rich Text Editor automatically displays a proper built-in ribbon depending upon the client browser type; a standard ribbon is used under desktop browsers and a one-line ribbon is used under the browsers of touch devices.</li>
</ul> 
<p>
Give the demo a try and see how the Rich Text Editor looks and behaves in different ribbon modes.
</p>
          ]]>
        </Description>
        <HighlightedDescription>
          The ASPxRichEdit includes full integration with the DevExpress ASP.NET Ribbon control providing a UI experience similar to the one your end-users expect from today's most popular office productivity suite.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ContextMenuCustomization" Title="Context Menu Customization" SeoTitle="Rich Text Editor Context Menu Customization">
        <Description>
          <![CDATA[
            <p>
              The ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/114117/aspnet-webforms-controls/rich-text-editor/concepts/aspxrichedit-control">ASPxRichEdit</helplink>) enables you to customize its context menu. By handling the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.PopupMenuShowing">PopupMenuShowing</helplink> client-side event, you can perform the following actions with the ASPxRichEdit's context menu
            </p>
            <ul>
              <li>
                Manipulate menu items - add new items, remove or disable existing ones (use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEditPopupMenuShowingEventArgs.menuItems">e.menuItems</helplink> property); 
              </li>
              <li>
                Prevent the context menu from being displayed (use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCancelEventArgs.cancel">e.cancel</helplink> property).
              </li>
            </ul>
            <p>
              In this demo, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.PopupMenuShowing">PopupMenuShowing</helplink> event is handled to illustrate the context menu customizing capabilities. Using check boxes, you can switch the context menu availability (via <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCancelEventArgs.cancel">e.cancel</helplink>) and control whether to clear or retain the default menu items when populating the menu with custom items (via <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEditPopupMenuShowingEventArgs.menuItems">e.menuItems</helplink>). The custom items are implemented as <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEditPopupMenuItem">ASPxClientRichEditPopupMenuItem</helplink> objects by their <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEditPopupMenuItem.name">name</helplink> property. Clicks on custom menu items are processed using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRichEdit.CustomCommandExecuted">CustomCommandExecuted</helplink> client event. Its handler identifies the activated item by its name and performs the corresponding action on the client-side. In this demo, custom menu items create the Date and Time fields (using the <helplink href="https://docs.devexpress.com/AspNet/js-RichEditCommands.createDateField">createDateField</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-RichEditCommands.createTimeField">createTimeField</helplink> <helplink href="https://docs.devexpress.com/AspNet/117668/aspnet-webforms-controls/rich-text-editor/concepts/client-api/client-commands">client commands</helplink>) and search the selected text in Google (the selected text is received via the <helplink href="https://docs.devexpress.com/AspNet/116405/aspnet-webforms-controls/rich-text-editor/concepts/client-api">Client API</helplink>). 
            </p>
          ]]>
        </Description>
        <SourceFile>~/Scripts/ContextMenuCustomization.js</SourceFile>
      </Demo>
      <Demo Key="CustomToolbar" Title="Custom Toolbar via Client API" SeoTitle="">
        <Description>
          <![CDATA[
<p>
This demo shows how the RichEdit's <a href="http://demos.devexpress.com/ASPxRichEditDemos/API/CommandsAPI.aspx">client commands</a> can be used to implement a custom toolbar instead of the default built-in ribbon. 
</p>

<p>
A toolbar is implemented using the DevExpress <a href="http://demos.devexpress.com/ASPxNavigationAndLayoutDemos/Menu/Overview.aspx">ASPxMenu</a> control. Clicks on menu items invoke the corresponding RichEdit client commands. The correspondence is defined by setting the Name property of menu items to values associated with client commands and listed within a custom client table. 
</p>
          ]]>
        </Description>
        <HighlightedDescription></HighlightedDescription>
        <SourceFile>~/Scripts/CustomToolbar.js</SourceFile>
      </Demo>
      <Demo Key="SimpleView" Title="Simple View (Web Layout)" SeoTitle="Rich Text Editor Simple View (Web Layout)">
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Rich Text Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>) provides the Simple View mode to display documents ignoring the page's layout. In this mode, the control adjusts the document so that it occupies the entire control's content area. 
            </p>
            <p>
              You can enable the Simple View mode in the following ways:
            </p>
            <ul>
              <li>
                Click the Simple View Ribbon's command
              </li>
              <li>
                Execute the <helplink href="https://docs.devexpress.com/AspNet/js-RichEditCommands.changeViewType">changeViewType</helplink> client command
              </li>
              <li>
                Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEditViewsSettings.ViewType">ViewType</helplink> server-side property to <b>Simple</b>
              </li>
            </ul>
            <p>
              This demo illustrates how the document's layout is adapted to the control's width when the Rich Edit is in the Simple View mode. Drag the vertical slider to change the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRichEdit.ASPxRichEdit">ASPxRichEdit</helplink>'s width and see how the document fits the control.
            </p>
          ]]>
        </Description>
        <HighlightedDescription></HighlightedDescription>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxGridView" Url="ASPxGridViewDemos" Title="DevExpress ASPxGridView" SeoTitle="ASP.NET AJAX Data Grid Control" NavItemTitle="Grid" OrderIndex="0" IntegrationHighlighted="true" HighlightedTagNames="dx:ASPxGridView">
    <Keywords>gridview, table, datatable, grid, datagrid</Keywords>
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxGridView_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Grid.png</IntegrationImageUrl>
    <IntegrationDescription>
      Unlimited master-detail levels, Web Accessibility support,
      SharePoint integration and unmatched end-user data analysis capabilities.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Data Grid Control">
      <BannerTitle>
        Blazing Fast and Lightweight Data Grid for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Unlimited master-detail levels, Web Accessibility support,
        SharePoint integration and unmatched end-user data analysis capabilities
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=KCMf1J0t00U</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxGridView and Editors Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our ASP.NET grid and data editors library. These features include:
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
        <p>
          The high-performance DevExpress ASP.NET Data Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is an editing and data shaping component that allows end-users to manage information and provide robust data filtering options. The ASPxGridView provides layout features, such as cell merging, templates, and support for master-detail data presentation allowing you to build grid layouts of any complexity.
        </p>
            ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/Products/NET/Controls/ASP/Grid/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="http://www.youtube.com/watch?v=KCMf1J0t00U" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/5823/aspnet-webforms-controls/grid-view" Title="Documentation" />
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <KeyFeature Name="Data Sorting" DemoUrl="~/GroupingSorting/Sorting.aspx">
        <Description>
          <![CDATA[
             ASPxGridView makes it easy for end-users to sort data against an unlimited number of columns. When necessary, you can disable runtime sort options and handle all sort operations in code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Grouping" DemoUrl="~/GroupingSorting/Grouping.aspx" >
        <Description>
          <![CDATA[
             ASPxGridView allows end-users to group data against an unlimited number of columns by dragging column headers to the group panel. Data grouping can be managed entirely in code, and you can easily introduce custom grouping logic whenever required.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Summaries" DemoUrl="~/Summary/Total.aspx">
        <Description>
          <![CDATA[
             The grid supports the usage of aggregate functions to display summarized information about rows and columns within the ASPxGridView (e.g., the number of records within a group or the maximum value across all rows in a dataset).
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Master-Detail Data Representation" DemoUrl="~/MasterDetail/MasterDetail.aspx">
        <Description>
          <![CDATA[
             ASPxGridView allows you to build master-detail layouts of any complexity - with any number of nesting levels and any number of details at each level.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Editing Support" DemoUrl="~/GridEditing/EditModes.aspx">
        <Description>
          <![CDATA[
            ASPxGridView provides functionality that checks the data input by end-users, to ensure that the data is error-free. The data entered by an end-user can be validated on the client or server before it is posted to a data source. 
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Filtering" DemoUrl="~/Filtering/FilterRow.aspx">
        <Description>
          <![CDATA[
             The ASPxGridView provides multiple data filtering options so you can address customer needs more effectively using the data filter row, column header filter or filter editor control.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Powerhouse Lookup Combo Box" DemoUrl="~/ASPxGridLookup/MultiSelect.aspx">
        <Description>
          <![CDATA[
             ASPxGridLookup edit combines the functionality of ASPxDropDownEdit and ASPxGridView to allow end-users to select values from a dropdown grid containing lookup items.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Export" DemoUrl="~/Exporting/Exporting.aspx">
        <Description>
          <![CDATA[
             The grid's content can be exported to many popular formats (in the same layout as it appears on-screen) including RTF, PDF, XLSX, XLS and CSV. 
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="DataBinding" Title="Data Binding">
      <Keywords>databinding</Keywords>
      <Demo Key="LargeDatabase" Title="Large Database (Server Mode)" SeoTitle="Large Database (Server Mode)" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/ServerMode.png">
        <Keywords>databinding, largedata, bigdata, server mode, database server mode, high performance, fast</Keywords>
        <Description>
          <![CDATA[
                <p>
                    The DevExpress <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> component improves performance when binding the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) to a large data set.   In this mode, only small portions of the data are loaded into the ASPxGridView on demand, and all required data processing (such as grouping and sorting) is performed on the data server. This technique significantly reduces the application's response time.                  
                </p>
                <p>
                    Switch between the DevExpress datasource (EntityServerModeDataSource) and the standard .NET datasource (EntityDataSource), and perform the same data operations (such as grouping or sorting) in the ASPxGridView control, to test the application’s performance.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress EntityServerModeDataSource component improves performance when binding the DevExpress ASP.NET Grid View (ASPxGridView) to a large data set, because only small portions of the data are loaded on demand. This demo illustrates how the ASPxGridView control works easily and quickly with a data source consisting of 300,000 records.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/17292/aspnet-webforms-controls/grid-view/concepts/bind-to-data/binding-to-large-data-database-server-mode/data-binding-to-large-data-via-ef" Title="Data Binding to Large Data via EF" />
      </Demo>

      <Demo Key="XPOLargeDB" Title="Large Database via XPO" SeoTitle="Large Database via XPO">
        <Keywords>xpo, Objects, largedata, bigdata, server mode, database server mode, high performance, fast</Keywords>
        <Description>
          <![CDATA[
                    <p>
                       The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is blazing fast, and its server side data processing engine allows you to create highly responsive web applications, regardless of dataset size or data complexity. Using the ASPxGridView server mode, you can even display a million rows, or allow users to sort, group and filter against large datasets.
                    </p>
                    <p>
                       In this example, the underlying dataset contains 300,000 records. You can perform various operations against the contents of the grid (such as sorting, filtering, and grouping), and calculate summaries against the values stored within the database.
                    </p>
                    <p>Creating a high performance web application with the ASPxGridView is easy. This demo uses the <helplink href="https://docs.devexpress.com/XPO/DevExpress.Xpo.XpoDataSource">XpoDataSource</helplink> component, which ships as part of the DevExpress ASP.NET Subscription. XpoDataSource allows you to bind any DevExpress data-aware control to any database supported by XPO (the DevExpress ORM). XpoDataSource allows you to load records on-demand and perform data shaping operations on the server, reducing the amount of information that is transmitted to the client, and radically improving speed and application responsiveness.</p>
                    <p>Using XpoDataSource is simple and straightforward. Simply bind the ASPxGridView control to your data source via the XpoDataSource, and set the <helplink href="https://docs.devexpress.com/XPO/DevExpress.Xpo.XpoDataSource.ServerMode">XpoDataSource.ServerMode</helplink> property to true.</p>
                ]]>
        </Description>
        <SourceFile>~/App_Code/XpoHelper.cs</SourceFile>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3726/aspnet-webforms-controls/grid-view/concepts/bind-to-data/binding-to-large-data-database-server-mode/data-binding-to-large-data-via-xpo" Title="Data Binding to Large Data via XPO" />
        <SeeAlso Url="https://docs.devexpress.com/XPO/3185/feature-center/web/connecting-xpo-to-a-database-server-aspnet" Title="Connecting XPO to a Database Server (ASP.NET)" />
      </Demo>

      <Demo Key="Live" Title="Live Data" SeoTitle="Real-time Data Processing">
        <Keywords>realtime, updating, market, databinding</Keywords>
        <Description>
          <![CDATA[
                    <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) can address a wide range of business use-case scenarios, and offers complete control over the data source displayed within it – be it a static collection or a web service providing live data.</p>
                    <p>In this demo, the ASPxGridView displays dynamic data that is refreshed every 2 seconds. The grid control is bound to an ObjectDataSource control that provides randomly generated stock quotes (Quote objects). Once every 2 seconds, the grid control is updated via its <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.Refresh">Refresh</helplink> client method to visualize changes (the Change property of the Quote objects). To display an appropriate image indicator next to a percent change value, a template is used for the Change column (see the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.DataItemTemplate">DataItemTemplate</helplink> property in the demo's ASPX markup file). To access a Quote object displayed within a grid row, the grid control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GetRow(System.Int32)">GetRow</helplink> function is called (see the GetIconImageUrl, GetIconImageVisibility, and GetPercentageText methods in the code-behind file).</p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="QueryBuilderControl" Title="Query Builder Control" SeoTitle="Query Builder" HighlightedTagNames="dx:ASPxGridView dx:ASPxQueryBuilder">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Query Builder (ASPxQueryBuilder) allows you to provide your end users with the capability to visually construct database system-specific 'SELECT' statements. The resulting SQL string can then be obtained on the ASPxQueryBuilder.SaveQuery event via the SelectStatement event parameter. 
          </p>
          <p>
In this demo, ASPxQueryBuilder is used to compose an MS Sql-specific 'SELECT' statement. The resulting query is executed against an MDF database using an SqlDataSource, and the data obtained as the result of the query execution is displayed in an ASPxGridView control.
          </p>
          <p>
To start customizing a 'SELECT' statement, click QUERY BUILDER above the grid view control.
          </p>
          <p>
Click the Save and Close button on the Query Builder toolbar to generate the SQL string and assign it to the data source control's SelectCommand property.
          </p>
                ]]>
        </Description>
        <SourceFile>~/DataBinding/QueryBuilder.aspx</SourceFile>
        <SourceFile>~/DataBinding/QueryBuilder.aspx.cs</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="GroupingSorting" Title="Sorting and Grouping">
      <Demo Key="Sorting" Title="Sorting Data" SeoTitle="Sorting Data">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to sort data against an unlimited number of columns, without writing a single line of code. A column's current sort order is indicated by a sort glyph displayed on the right side of the column header. When a column is not sorted, the sort glyph is hidden.
                </p>
                <p>
In this demo, you can click a column header to initiate sorting or change column sort order (from ascending to descending, and vice versa). To sort data against multiple columns, click the required column headers while holding down the SHIFT key.
                </p>
                <p>
                    Sorting can be enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowSort">AllowSort</helplink> option to true.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3714/aspnet-webforms-controls/grid-view/concepts/sort-data" Title="Sorting" />
      </Demo>

      <Demo Key="Grouping" Title="Grouping Data" SeoTitle="Outlook Style Data Grouping">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you and your end-users to group data against unlimited columns using simple drag and drop operations. In this example, data is grouped by the <b>Country</b> column and sorted in ascending order.
                </p>
                <p>
                    Data grouping is allowed if the following grid properties are set to <b>true</b>:
                </p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowGroup">SettingsBehavior.AllowGroup</helplink></li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowSort">SettingsBehavior.AllowSort</helplink></li>
                </ul>
                <p>
                    End-users can group data by dragging column headers to the <helplink href="https://docs.devexpress.com/AspNet/3682/aspnet-webforms-controls/grid-view/visual-elements/group-panel">group panel</helplink>. 
                    The panel's visibility is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowGroupPanel">Settings.ShowGroupPanel</helplink> option.
                </p>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GroupCount">GroupCount</helplink> property to get the number of columns used to group data. These columns can be obtained using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GetGroupedColumns">GetGroupedColumns</helplink> method.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3728/aspnet-webforms-controls/grid-view/concepts/group-data/grouping-overview" Title="Grouping Overview" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3730/aspnet-webforms-controls/grid-view/concepts/group-data/grouping-in-code" Title="Grouping in Code" />
      </Demo>
      <Demo Key="IntervalGrouping" Title="Interval Grouping" SeoTitle="Interval Grouping">
        <Description>
          <![CDATA[
                    <p>To help provide total control over the display of information within its container, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports interval grouping. This powerful feature allows you to group the values within text columns against individual characters, or group date-time columns by month, year, or date.   
                    </p>
                    <p>
                    In this demo, the <b>Order Date</b> column uses interval grouping. By default, the <b>Order Date</b> is grouped by <b>Year</b>, and summaries are automatically computed for values stored within the group. You can modify the manner in which group interval order is displayed on-screen by selecting values from the <b>Date group interval</b> combo box. 
                </p> 
                <p>Interval grouping is controlled by a column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.GroupInterval">Settings.GroupInterval</helplink> property.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/5338/aspnet-webforms-controls/grid-view/concepts/group-data/grouping-modes-and-custom-grouping" Title="Grouping Modes and Custom Grouping" />
      </Demo>
      <Demo Key="FixedGroups" Title="Fixed Groups" SeoTitle="Fixed Groups">
        <Description>
          <![CDATA[
          <p>To help improve readability when data is grouped within the grid, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to anchor a group row to the top edge of its container when scrolling a group's data rows. 
          </p><p>
An icon, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewImages.FixedGroupRow">FixedGroupRow</helplink> property, is displayed in the group row when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowFixedGroups">AllowFixedGroups</helplink> property is set to <b>true</b>. 
  </p>
                ]]>
        </Description>
        <HighlightedDescription>A group row can be anchored to the top edge while scrolling the group's data rows. This demo illustrates the fixed group functionality when an end-user scrolls the grid. </HighlightedDescription>
      </Demo>
      <Demo Key="MergingGroups" Title="Merging Groups" SeoTitle="Merging Groups">
        <Description>
          <![CDATA[
                    <p>This demo illustrates how to merge grouped columns in the ASPxGridView. In this mode, a user can group grid data by multiple columns at once and combine them into a single grouping level. Drag a column header to the group panel and merge it into an existing group level. Rearrange those merged column headers to reorganize and reorder the grid data. To remove a column from the merged groups, drag it back to the column area of the grid.</p>
                    <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.MergeGroupsMode">MergeGroupsMode</helplink> property to <b>Always</b> to enable merged grouping.</p>
                ]]>
        </Description>
      </Demo>

    </DemoGroup>

    <DemoGroup Key="Filtering" Title="Filtering">
      <Keywords>filtercontrol, filters</Keywords>
      <Demo Key="FilterRow" Title="Data Filter Row">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a number of easy-to-use data filtering options. The <helplink href="https://docs.devexpress.com/AspNet/3684/aspnet-webforms-controls/grid-view/visual-elements/filter-row">filter row</helplink> allows end-users to filter data by entering text within its cells.
                </p>
                <p>
                    In this example, you can filter against the values stored within the underlying dataset by entering the appropriate filter criteria in the cells displayed below individual column headers.
                </p>
                <p>The <b>FilterRowMode</b> combo box allows you to choose between two filter modes.</p>
                <ul>
                <li>In <b>Auto</b> filter mode, the filter is applied on the fly when an end-user types text in a row.</li>
                <li>In <b>OnClick</b> filter mode, the filter is applied by clicking the <b>Apply</b> button, which is displayed in a command column.</li>
                </ul>
                <p>For total control over the values returned by the filter row, an optional filter row menu displays a list of filter conditions for a given search operation. This demo includes a <b>Show Filter Row Menu</b> check box. Once enabled, you can view this menu and apply one of the nine filter conditions to restrict your search results.</p>
                <p>
                    Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowFilterRow">Settings.ShowFilterRow</helplink> property to <b>true</b> to display the filter row within the ASPxGridView.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row" Title="Filter Row" />
      </Demo>
      <Demo Key="SearchPanel" Title="Search Panel" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/SearchPanel.png">
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to filter data and highlight search results via its integrated <b>Search Panel</b>. To enable the easy-to-use <b>Search Panel</b>, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to <b>true</b>. The Search Panel filter criterion that is applied to grid data can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SearchPanelFilter">SearchPanelFilter</helplink> property. You can customize Search Panel functionality using the following <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsSearchPanel">SettingsSearchPanel</helplink> property settings. 
          </p>
       <ul>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.AllowTextInputTimer">AllowTextInputTimer</helplink> specifies whether a search panel filter is applied automatically or manually. </li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSearchPanelSettings.ColumnNames">ColumnNames</helplink> lists the names of columns to which the filter criteria will be applied.</li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Delay">Delay</helplink> specifies the time interval between the initiation of search input and when filtering is applied.</li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.GroupOperator">GroupOperator</helplink> specifies the logical operator used to combine conditions (multiple words separated by space characters).</li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.HighlightResults">HighlightResults</helplink> specifies whether a text matching the filter condition is highlighted within the grid.</li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowApplyButton">ShowApplyButton</helplink> specifies whether the Apply button is displayed within the search panel. </li>
                 <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowClearButton">ShowClearButton</helplink> specifies whether the Clear button is displayed within the search panel. </li>
</ul>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/17651/aspnet-webforms-controls/grid-view/concepts/filter-data/search-panel" Title="Search Panel" />
        <HighlightedDescription>The Search panel allows end-users to filter data and highlight search results by typing filter criteria in the panel's editor. This demo illustrates the main features provided by the grid search panel.</HighlightedDescription>
      </Demo>
      <Demo Key="HeaderFilter" Title="Header Filter" SeoTitle="Excel Style Data Filtering">
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a powerful data filtering mechanism that displays a dropdown list of all unique values within a column. Invoked by activating the column header’s filter button, end-users can filter the records stored in the underlying dataset by selecting the values displayed within the dropdown. 
                </p>
                <p>
                Additionally, end-users can filter items by entering text in the filter editor above the list. When typing a filter string, the header filter items list is automatically updated, so only the relevant items that match the filter string are displayed.
                </p>
                <p>
                Filter dropdown buttons are disabled by default. To show filter buttons, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterButton">Settings.ShowHeaderFilterButton</helplink> property to true.
                </p>
                <p>
                You can specify the header filter mode for a column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property.  
                </p>
                <ul>
                <li>In <b>List</b> mode, the column's header filter dropdown displays a regular list of filter items, allowing end-users to select single value.</li>
                <li>In <b>CheckedList</b> mode, the column's header filter dropdown contains a check box list, allowing end-users to select multiple values for the filter criteria.</li>
                <li><b>DateRangeCalendar</b> and <b>DateRangePicker</b> modes are available for date columns only. You can take a look at these modes in the <a href="DateRangeHeaderFilter.aspx">Date Range Header Filter</a> demo.</li>
                </ul>
                <p>
                The ASPxGridView allows you to create custom filter values, define filter criteria and display these values within the column's filter dropdown. To do this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.HeaderFilterFillItems">HeaderFilterFillItems</helplink> event. In this demo, custom filter values are displayed within the 'Total' and 'Quantity' columns' filter dropdowns.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/11579/aspnet-webforms-controls/grid-view/concepts/filter-data/header-filter" Title="Header Filter" />
      </Demo>
      <Demo Key="DateRangeHeaderFilter" Title="Date Range Header Filter" >
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a powerful data filtering mechanism allowing end-users to filter dates.</p> 
<p>A date column's dropdown header filter displays a date editor (date range picker or calendar) and a list of predefined date periods. End-users can filter the records stored in the underlying dataset by selecting the values displayed within the dropdown.</p>
<p>By default, the header filter is disabled, set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnSettings.AllowHeaderFilter">Settings.AllowHeaderFilter</helplink> property to <b>true</b> to enable it.</p>
<p>To specify a date editor that is displayed in the dropdown, set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property to one of the following values.</p>
<ul>
<li><b>DateRangeCalendar</b> – a calendar is displayed in the filter dropdown. The calendar settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnHeaderFilterSettings.DateRangeCalendarSettings">DateRangeCalendarSettings</helplink> property.</li>
<li><b>DateRangePicker</b> – a date range picker is displayed in the filter dropdown. The editors' settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnHeaderFilterSettings.DateRangePickerSettings">DateRangePickerSettings</helplink> property.</li>
</ul>
          ]]>
        </Description>
        <HighlightedDescription>Two representation modes inspired by Microsoft Windows Explorer are available for a date column's header filter dropdown. In this demo you can define a date range using a calendar or date editors.</HighlightedDescription>
      </Demo>
      <Demo Key="FilterBuilder" Title="Filter Control" SeoTitle="Built-in Filter Builder">
        <Description>
          <![CDATA[
                <p>
                Built for web applications that require ad-hoc query capabilities, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) Filter Control allows end-users to build complex filter criteria with an unlimited number of filter conditions and logical operators. You can activate the Filter Control by clicking the image or filter expression link contained in the Filter Bar displayed at the bottom of the grid.
				</p>
        <p>The following properties (available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsFilterControl">SettingsFilterControl</helplink> property) allow you to customize Filter Control functionality.</p>
        <ul>
               <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ViewMode">ViewMode</helplink> property specifies how a filter expression is displayed in the Filter Control: either in the visual representation only, or in the visual representation and text filter expression editor.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.AllowHierarchicalColumns">AllowHierarchicalColumns</helplink> property specifies if the Filter Control can display hierarchical columns. The max hierarchy depth level can be limited by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.MaxHierarchyDepth">MaxHierarchyDepth</helplink> property.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ShowAllDataSourceColumns">ShowAllDataSourceColumns</helplink> property specifies which columns are visible  in the Filter Control: all data source columns or only the columns that are visible in the grid.</li>
        </ul>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/5138/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-control" Title="Filter Control" />
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Summary" Title="Data Summaries">
      <Keywords>amount, total, unbound</Keywords>
      <Demo Key="Total" Title="Grid Totals" SeoTitle="Total Summary Calculation">
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is a powerful data shaping control that includes a variety of data summary calculation options. Total summaries are aggregate function values calculated against all rows in the ASPxGridView, and displayed in the grid footer, provided that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowFooter">Settings.ShowFooter</helplink> option is enabled.
                </p>
                <p>
                The ASPxGridView stores its total summary items, which are instances of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSummaryItem">ASPxSummaryItem</helplink> class, in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.TotalSummary">TotalSummary</helplink> collection. 
                </p>
                <p>
                The built-in aggregate functions include: Min, Max, Avg, Sum and Count.
                </p>
                <p>
                In this demo, the <b>Total</b> grid column is declared as unbound by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.UnboundType">UnboundType</helplink> property to <b>Decimal</b>. The column's cell values are calculated at runtime in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.CustomUnboundColumnData">CustomUnboundColumnData</helplink> event handler.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3757/aspnet-webforms-controls/grid-view/concepts/use-data-summaries/total-summary" Title="Total Summary" />
      </Demo>
      <Demo Key="Group" Title="Group Summary Totals" SeoTitle="Group Summary Calculation">
        <Description>
          <![CDATA[
                <p>
                    Group Summaries are the value of an aggregate function calculated across all data rows within a group.
                </p>
                <p>
                    In this example, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is grouped against the Country and City columns. Group Summaries are computed for Unit Price (Sum) along with the total count of all rows within the data group. The summary values are automatically displayed within individual group rows.
                </p>
                <p>
                    The ASPxGridView stores its group summaries within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GroupSummary">GroupSummary</helplink> collection. 
                    Individual items are represented by <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSummaryItem">ASPxSummaryItem</helplink> objects.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="GroupFooter" Title="Group Footer Summaries">
        <Description>
          <![CDATA[
                <p>
                    Group Footers are an alternative way to display summaries for grouped data. Group Footers contain footer cells that correspond to individual data columns. Footer cells display formatted summary values. 
                </p>
                <p>
                    In this example, grid values are grouped against the Order Date column. For each group, summaries are computed against the Country (Count), Quantity (Sum), and Total (Sum) columns within the group footer. 
                </p>
                <p>
                    Group footers can be displayed for all group rows,  or only for expanded group rows. To specify when the ASPxGridView displays group footers, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowGroupFooter">Settings.ShowGroupFooter</helplink> property.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="GroupSortBySummary" Title="Sort by Summaries">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a rich API to sort data groups by their summary values.</p>
                <p>
                   In this demo, the ASPxGridView is grouped by country. Use the ‘Sort by summary mode’ combo box to select the required sort order. For instance, select Descending to sort grouped rows so that countries with the highest sales appear at the top of the view.</p>
                <p>
                    Group rows are sorted by summary value based on the information provided by <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGroupSummarySortInfo">ASPxGroupSummarySortInfo</helplink> objects. Properties introduced by these objects represent the sort order, summary item used to calculate summary values, etc. These properties are read-only and initialized by the constructor.
                </p>
                <p>
                    To sort group rows by summary value, create a new ASPxGroupSummarySortInfo object and add it to the ASPxGridView's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GroupSummarySortInfo">GroupSummarySortInfo</helplink> collection using the GroupSummarySortInfoCollection.Add method. After the ASPxGroupSummarySortInfo object has been added to the collection, group rows are automatically sorted by their summary values.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/4020/aspnet-webforms-controls/grid-view/concepts/sort-data/sort-groups-by-summary-values" Title="Sort Groups by Summary Values" />
      </Demo>
      <Demo Key="BatchEditClientSummary" Title="Client Summary Calculation">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET GridView (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to recalculate total and group summaries on the client in batch edit mode.</p>
                <p>To disable automatic recalculation, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.EnableRealTimeSummaryRecalculation">EnableRealTimeSummaryRecalculation</helplink> property to false.</p>
                <p>The ASPxGridView does not highlight its summaries when their values are recalculated. To highlight recalculated summary values, use the following API:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightSummaryItems">HighlightSummaryItems</helplink> property - Set this property to true to apply predefined styles to recalculated summary values.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.BatchEditSummaryDisplayText">BatchEditSummaryDisplayText</helplink> event - Handle this event to use custom styles and text.</li>
                </ul>
                <p>
                    In this demo, the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightSummaryItems">HighlightSummaryItems</helplink> property value is set to true and the grid colors summary items when their values are changed.
                </p>
                ]]>
        </Description>
        <!--<SeeAlso Url="https://docs.devexpress.com/AspNet/4020/aspnet-webforms-controls/grid-view/concepts/sort-data/sort-groups-by-summary-values" Title="Sort Groups by Summary Values" />-->
      </Demo>
    </DemoGroup>

    <DemoGroup Key="GridEditing" Title="Grid Editing">
      <Keywords>crud, dataedit</Keywords>
      <Demo Key="EditModes" Title="Grid Edit Modes">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides different data editing options so that you can create web applications that effectively address the needs of your end-users.
                </p>
                <p>
                    This demo illustrates four built-in grid data Edit Modes. Use the <b>Edit Mode</b> combo box to select the desired edit mode. 
                </p>

                <ul>
                    <li>
                        Inline - Cell values are edited within the in-line edit row. 
                    </li>
                    <li>
                       EditForm - Cell values are edited via the edit form. The data row currently being edited is not displayed. 
                    </li>
                    <li>
                        EditFormAndDisplayRow - Cell values are edited via the edit form. The data row currently being edited is displayed above the edit form.
                    </li>
                    <li>
                        PopupEditForm - Cell values are edited via the popup edit form. 
                    </li>
                    <li>Batch - Cell values are edited in the in-line editors. The changes are sent to the server upon a <b>Save changes</b> button click only.</li>
                </ul>
                <p>
                    The following members can be used to manipulate data.
                </p>
                <ul>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.StartEdit(System.Int32)">StartEdit</helplink> - starts editing data
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.UpdateEdit">UpdateEdit</helplink> - saves changes to data
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.CancelEdit">CancelEdit</helplink> - cancels changes to data
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.AddNewRow">AddNewRow</helplink> - adds a new row
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.DeleteRow(System.Int32)">DeleteRow</helplink> - deletes a row
                    </li>
                </ul>
                <p>
                    To allow end-user modification, add a Command column to the view's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Columns">Columns</helplink> collection and specify the commands that can be used by end-users. There are six command items.
                </p>
                <ul>
                    <li>New</li>
                    <li>Edit</li>
                    <li>Delete</li>
                    <li>Select</li>
                    <li>Update</li>
                    <li>Cancel</li>
                </ul>
                <p>
                    A command item is displayed as a link by default. It can also be displayed as a button or image. The type of a command item rendered is specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ButtonType">ButtonType</helplink> property of the column.
                </p>                
                <p>
                    Note: The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.KeyFieldName">KeyFieldName</helplink> property must be specified to enable data edit, insert and delete operations. 
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="EditForm" Title="Edit Forms">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) ships with an intuitive and easy-to-use Edit Form for inline data editing (editing underlying column values within the grid container). The Edit Form allows you to specify the order of the individual editors displayed within it, and control the placement of the new item row. 
                </p>
                <p>
                    In this demo, the ASPxGridView uses a built-in Edit Form to modify cell values. The Edit Form displays editors with corresponding data column captions. The 'Show Memo at Bottom' check box controls the position of the 'Notes' column within the Edit Form. Toggle the 'Show new item row at bottom' check box to change the position of the new item row within the ASPxGridView. 
                </p>
                <p>To modify the arrangement of individual editors within the Edit Form, use the data column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumn.EditFormSettings">EditFormSettings</helplink> property.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="BatchEditing" Title="Batch Editing and Updating" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Batch.png" HighlightedTitle="Batch Editing">
        <Keywords>batch updating, batch modification, multiple row editing</Keywords>
        <Description>
          <![CDATA[         
                <p>				
                The DevExpress ASP.NET Data Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>)  control allows you to edit and update multiple grid rows on the client side and send them to the server in a single request.
                </p>

                <p>
                Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to '<b>Batch</b>' to enable batch edit mode. In this mode, an end user uses in-line editors to edit grid data. The grid highlights the modified cells in green and deleted rows in gray. This grid also displays the <b>"Recover"</b> button for deleted rows. To hide the deleted rows, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.HighlightDeletedRows">SettingsEditing.BatchEditSettings.HighlightDeletedRows</helplink> property to false. 
                </p>


                <p>
                If a grid contains modified data, it displays a confirmation message before a grid performs a postback or a callback. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.KeepChangesOnCallbacks">KeepChangesOnCallbacks</helplink> property specifies whether the grid supports callbacks and allows you to use the <b>'Preview changes'</b> button to preview and modify inserted, deleted and edited rows before you click <b>'Update'</b>.
                </p>

                <p>You can use the following properties to customize the batch edit mode settings:</p>

                  <ul>
                    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBatchEditSettings.EditMode">EditMode</helplink> - Specifies which control element (data cell or data row) end users can use to edit data (the "Edit mode" combo box). </li>
                    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.StartEditAction">StartEditAction</helplink> - Specifies which action invokes a data cell's in-line editor (the "Start edit action" combo box).  </li>  
                  </ul>

                ]]>
        </Description>
        <HighlightedDescription>The Batch edit mode speeds up the grid control's performance by eliminating excessive data updates. The main objective is to update the grid control only once - after all the necessary changes have been made. In this demo, end-users can modify data on the client side and send it to the server in a single request.</HighlightedDescription>
      </Demo>
      <Demo Key="BinaryImageColumnEditing" Title="Binary Image Column Editing" >
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a built-in binary image editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage">ASPxBinaryImage</helplink>) allowing end-users to upload images to binary image column.
</p>
<p>
In this demo, the grid contains the <b>Photo</b> column of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataBinaryImageColumn">GridViewDataBinaryImageColumn</helplink> type. Click the <b>Edit</b> link to display a grid edit form. In the form, you can see the embedded binary image control that allows you to upload an image to the <b>Photo</b> column.
</p>
<p>
Note that you can try the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxBinaryImage">ASPxBinaryImage</helplink> control's image upload functionality in the <a href="http://demos.devexpress.com/ASPxEditorsDemos/ASPxBinaryImage/BinaryImageEditing.aspx">Binary Image Editing</a> demo as well.
</p>
          ]]>
        </Description>
        <HighlightedDescription>This demo illustrates how a binary image editor can be used to edit binary image column values within the DevExpress ASP.NET Grid View (ASPxGridView) control.</HighlightedDescription>
      </Demo>
      <Demo Key="EditFormTemplate" Title="Edit Form Templates" SeoTitle="Templates in Edit Form">
        <Description>
          <![CDATA[
                <p>
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> Templates give you total control over the way individual editors are displayed within the Edit Form.   
                </p>
                <p>
                    In this demo, a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">Page Control</helplink> is used to reduce the space occupied by the Edit Form via tabs (the “Info” tab and the “Notes” tab).
                </p>
                <p>
                    <b>Important Note:</b></p><p>
                     To display regular edit cells within an Edit Form template, create an ASPxGridViewTemplateReplacement control and set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewTemplateReplacement.ReplacementType">ReplacementType</helplink> to 'EditFormEditors'.
                </p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/9324/aspnet-webforms-controls/grid-view/concepts/templates/template-replacements" Title="Template Replacements" />
      </Demo>
      <Demo Key="EditFormLayout" Title="Edit Form Layout">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to use the built-in form layout to arrange editors in the edit form. You can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.UseFormLayout">UseFormLayout</helplink> property to <b>false</b> to disable the form layout. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.EditFormLayoutProperties">EditFormLayoutProperties</helplink> property provides access to settings that allow you to customize the embedded form layout settings at a grid level.</p>
 
<p>The grid stores form layout items in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.EditFormLayoutProperties">EditFormLayoutProperties</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewFormLayoutProperties.Items">Items</helplink> collection. The items are associated with grid data columns (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ColumnLayoutItem.ColumnName">ColumnName</helplink>). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.EditFormLayoutCreated?v=19.2">EditFormLayoutCreated</helplink> event allows you to customize the edit form items' visibility, caption and layout settings. You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditFormLayoutEventArgs.FindLayoutItemOrGroup(System.String)?v=19.2">FindLayoutItemOrGroup</helplink> event's argument on the server to access the required layout item or group and then customize it. To do it on the client, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetEditFormLayoutItemOrGroup(name)?v=19.2">GetEditFormLayoutItemOrGroup</helplink> method.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="PopupEditForm" Title="Popup Edit Form" SeoTitle="Data Editing via Popup Window">
        <Description>
          <![CDATA[
                <p>
                    The Popup Edit Form allows end-users to edit column values in a popup. 
                </p>
                <p>
                    To enable the Popup Edit Form mode, set the DevExpress ASP.NET Grid View’s (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.Mode">SettingsEditing.Mode</helplink> option to <b>PopupEditForm</b>.
                </p>
                <p>
                ASPxGridView's popup edit form automatically rearranges its content in response to browser window resizing (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridEditFormPopupControlAdaptivitySettings.Mode">SettingsPopup.EditForm.SettingsAdaptivity.Mode</helplink> property controls this behavior). In adaptive mode, the popup's fields are positioned one under another and in one column when a browser window’s width is less than or equal to the value specified in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PopupControlAdaptivitySettings.SwitchAtWindowInnerWidth">SettingsPopup.EditForm.SettingsAdaptivity.SwitchAtWindowInnerWidth</helplink> property.
                </p>
                <p>
                    The Popup Edit Form can also be displayed as a modal dialog. In this mode, the edit form must be closed before returning to the application (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewEditingSettings.PopupEditFormModal">SettingsEditing.PopupEditFormModal</helplink> option controls this behavior).
                </p>
                <p>
                    In this example, you can specify whether to use a modal popup via the <b>Show Popup Edit form in modal mode</b> checkbox and control the ‘Notes’ field's position using the <b>Show memo at bottom</b> checkbox.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="TwoWayBinding" Title="Two-Way Binding" SeoTitle="Two-Way Data Binding">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to implement 'Two-Way Data Binding' - a data access model that provides the capability to read and update data.  
                </p>
                <p>
                    In this demo, editors contained within the Edit Form template use the Bind method to retrieve and update the values of data-bound fields. This method takes the name of a data field to associate with a bound property.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CascadingComboBoxes" Title="Cascading Combo Boxes">
        <Description>
          <![CDATA[
                <p>
                    In this demo, the combo box in the City column (the City combo box) is populated dynamically with city names via callbacks, based on the value selected in the combo box in the Country column (the Country combo box). Only the content stored in the City combo box is updated during round-trips to the server - not the content of the page or the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) control.
                </p>
                <p>
                    The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientComboBox.SelectedIndexChanged">SelectedIndexChanged</helplink> event of the Country combo box is handled to update the City combo box. On the server side, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxAutoCompleteBoxBase.Callback">Callback</helplink> event is handled to populate the City combo box with required values.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Validation" Title="Data Validation">
        <Description>
          <![CDATA[
                <p>
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> allows you to manually validate the edited row and display errors for invalid fields.
                </p>
                <p>
                    This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.RowValidating">RowValidating</helplink> event handler.
                </p>
                <p>
                    To indicate rows with invalid data, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.HtmlRowPrepared">HtmlRowPrepared</helplink> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are colored in red.
                </p>
                <p>
                Click the ‘Edit’ link to display the details of this row, with an error icon indicating the invalid field. Hover your mouse over the icon to display a hint along with a description of the error.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="MasterDetail" Title="Master-Detail">
      <Demo Key="MasterDetail" Title="Simple Master-Detail View" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/MasterDetail.png">
        <Description>
          <![CDATA[
                <p>
With the DevExpress ASP.NET GridView (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>), you can build master-detail layouts of any complexity - with unlimited nesting. The GridView does not place any limits on your creativity and allows you to display detail records within its master-detail layout in a format most suitable for your business needs (including the ability to display collapsible row preview sections).
                </p>
                <p>
                    This demo illustrates how to visualize a simple master-detail relationship between two tables inside the GridView. To get started, do the following:  
                </p>
                <ul>
                    <li>
                        Create two ASPxGridView controls
                    </li>
                    <li>
                        Bind the first grid (the master grid) to the master data source and enable its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewDetailSettings.ShowDetailRow">SettingsDetail.ShowDetailRow</helplink> option.
                    </li>
                    <li>
                        Bind the second grid (the detail grid) to the detail data source.
                    </li>
                    <li>
                        Create the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.DetailRow">DetailRow</helplink> template for the master grid and place the detail grid onto it.
                    </li>
                    <li>
                        Finally, handle the detail grid's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.BeforePerformDataSelect">BeforePerformDataSelect</helplink> event and specify session values.
                    </li>
                </ul>
                <p>
                    By default, end-users can expand multiple master rows simultaneously. This behavior is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewDetailSettings.AllowOnlyOneMasterRowExpanded">SettingsDetail.AllowOnlyOneMasterRowExpanded</helplink> option. In this demo, this option is enabled via the “Keep a single expanded row at a time” check box. Once enabled, only one detail row will be displayed at a time.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>DevExpress ASP.NET Grid View (ASPxGridView) allows building master-detail layouts of any complexity - with unlimited nesting. You can display detail records within its master-detail layout in a format most suitable for your business needs (including the ability to display collapsible row preview sections).</HighlightedDescription>
      </Demo>
      <Demo Key="DetailTabs" Title="Advanced Master-Detail View" SeoTitle="Multiple Details Grid">
        <Description>
          <![CDATA[
                <p>
                    This example illustrates the power and flexibility of the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) and its built-in UI, by demonstrating how end-users can switch between sibling detail grids via detail tabs. 
                </p>
                <p>
                    To provide this functionality, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">Page Control</helplink> Page Control (tab strip) is placed in the master grid's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.DetailRow">DetailRow</helplink> template. Using the Page Control, a tab page is created for each detail grid. When an end-user clicks a detail tab, the corresponding detail grid is automatically displayed.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Grid View (ASPxGridView) supports master-detail data presentation of any complexity. In this demo, end-users can switch between the sibling detail grids via detail tabs.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Templates" Title="Templates">
      <Keywords>customization, layout</Keywords>
      <Demo Key="Template" Title="Cell" SeoTitle="Template for Data Cell">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a set of templates that allow you to create custom layouts for its visual elements (column headers, data cells, Edit Form, preview rows, etc.) 
                </p>
                <p>
                    This demo shows how you can create a template to display cells within the 'Details' column. The template contains a link labeled 'More Info'. Clicking this link displays a popup window containing additional information about an employee.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Preview" Title="Preview" SeoTitle="Template for Row Preview">
        <Description>
          <![CDATA[
                <p>
                    Preview Rows are used to display large memo fields in the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>).
                </p>
                <p>
                    This demo illustrates how to create a template to display images within preview rows.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CardView" Title="Card View" SeoTitle="Card View, Contacts View">
        <Description>
          <![CDATA[
                <p>
                    This demo shows how to use data row templates to create custom cell layouts within rows.
                </p>
                <p>
                    In this demo, the Eval function is used to define one-way (read-only) binding. The Eval method takes the name of a data field, and returns a string containing the value of that field from the current record in the data source.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Pager" Title="Pager" SeoTitle="Template for Pager Bar">
        <Description>
          <![CDATA[
                <p>
                   To help simplify record navigation, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) includes a built-in data pager. Both the appearance and functionality of the pager can be fully modified by creating a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.PagerBar">PagerBar</helplink> template.
                </p>
                <p>
                    In this demo, the pager's buttons (First, Last, Prev and Next) are represented by ASP.NET Button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton">ASPxButton</helplink>) controls, which support both hovered and disabled states. The current page number is displayed within the ASP.NET Text Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox">ASPxTextBox</helplink>) editor, whose value can be changed to navigate to a specified page.  An ASP.NET Combo Box (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink>) allows an end-user to modify the number of rows displayed within the grid page to be modified.
                </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Exporting" Title="Data Export" HighlightedTagNames="dx:ASPxGridView">
      <Demo Key="Exporting" Title="Exporting to Different Formats" SeoTitle="Exporting to PDF, XLS, XLSX, DOCX, CSV and RTF">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to export data with ease. Data can be exported to a file or stream in the following formats:
                </p>
                <ul>
                    <li>PDF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttopdf.overloads">ExportToPdf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportpdftoresponse.overloads">ExportPdfToResponse</helplink>)</li>
                    <li>XLS (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttoxls.overloads">ExportToXls</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlstoresponse.overloads">ExportXlsToResponse</helplink>)</li>
                    <li>XLSX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttoxlsx.overloads">ExportToXlsx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlsxtoresponse.overloads">ExportXlsxToResponse</helplink>)</li>
                    <li>RTF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttortf.overloads">ExportToRtf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportrtftoresponse.overloads">ExportRtfToResponse</helplink>)</li>
                    <li>CSV (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttocsv.overloads">ExportToCsv</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportcsvtoresponse.overloads">ExportCsvToResponse</helplink>)</li>
                    <li>DOCX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttodocx.overloads">ExportToDocx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportdocxtoresponse.overloads">ExportDocxToResponse</helplink>)</li>
                </ul>
                        <p>
        Note that in this demo, export to table formats (XLS, XLSX, and CSV) is performed in the <b>WYSIWYG</b> (What You See Is What You Get) mode. Therefore, the table formatting, e.g., grouping, is lost and grid summaries are converted to strings. However, you can maintain such information by exporting grid data in the <b>DataAware</b> mode. You can see this functionality in the <a href="ExcelDataAware.aspx">Excel Data Aware Export</a> demo.
        </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ExcelDataAware" Title="Excel Data Aware Export" >
        <Description>
          <![CDATA[
          <p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> can export data in both XLS and XLSX formats. The DevExpress Excel Export Engine maintains data grouping layout and automatically transforms summary items to corresponding Excel functions. 
          </p><p>
The <b>Export row type</b> combo box controls the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewExportSettings.ExportSelectedRowsOnly">ExportSelectedRowsOnly</helplink> property value and specifies whether all rows displayed within the ASPxGridView are exported (or only selected rows). 
        </p>
                ]]>
        </Description>
        <HighlightedDescription>The data-aware export keeps the grid data formatting, such as filtering and grouping layout, and transforms summary items to the corresponding Excel functions. In this demo, grid data can be exported to the following Excel data-aware formats: XLS, XLSX, CSV. </HighlightedDescription>
      </Demo>
      <Demo Key="ExportSelected" Title="Export Selected Records">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how to only export records that are selected within the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>). Rows can be selected and unselected using corresponding check boxes. To restrict data export, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewExportSettings.ExportSelectedRowsOnly">ExportSelectedRowsOnly</helplink> property to true.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ExportDetails" Title="Export Master-Detail Records">
        <Description>
          <![CDATA[
                 <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows both master and detail data to be exported with its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewDetailSettings.ExportMode">SettingsDetail.ExportMode</helplink> property.
                </p>
                <p>
                    In this demo, use the <b>Details Export Mode</b> combo box to select the desired data export mode.
                </p>
                <ul>
                <li>None – only master rows will be exported.</li>
                <li>Expanded – only master rows and expanded detail rows will be expanded.</li>
                <li>All – all master and detail rows will be exported.</li>
                </ul>
                <p>The ASPxGridView control provides the ability to export binary images. The settings of exported images are controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BinaryImageEditProperties.ExportImageSettings">ExportImageSettings</helplink> property (see the ASPX code).</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ExportWithFormatConditions" Title="Export with Format Conditions" >
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. The style settings applied to grid cells can be exported together with data to various formats using our data aware export engine.</p>
<p>When data is exported to a PDF or RTF file, the grid maintains the style settings applied to the cells (with the exception of images). Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ExportWithDataCellBands" Title="Export with Data Cell Bands">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports data cell bands, i.e., allows you to organize grid columns into logical groups.</p>
          <p>This demo illustrates the control capability to export grid data with bands to various formats.</p>

          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Columns" Title="Grid Columns">
      <Demo Key="ColumnResizing" Title="Resizing Columns" SeoTitle="Column Resizing">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides complete control over column availability and individual column size. End-users can easily modify column width by resizing the appropriate column header. To resize the column, hover the right border of the column you wish to resize (so that it displays a double-sided arrow), and drag the column border. 
                </p>
                <p>
                    You can access all settings related to column resizing using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsResizing">SettingsResizing</helplink> property. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewResizingSettings.ColumnResizeMode">SettingsResizing.ColumnResizeMode</helplink> property specifies how the ASPxGridView behaves when an end-user resizes a column. Use the <b>Column resizing mode</b> combo box to see how different property values affect resizing behavior.
                </p>
                <p>
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewResizingSettings.Visualization">SettingsResizing.Visualization</helplink> property defines how the column resizing process is visually indicated. Two modes are available.
                </p>
                <ul>
                    <li>
                        In the <b>Live</b> mode, grid columns are redrawn dynamically during resizing. 
                    </li>
                    <li>
                        In the <b>Postponed</b> mode, grid columns are redrawn only after the operation has been completed.                         
                    </li>
                </ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CommandColumnCustomButtons" Title="Custom Command Buttons" SeoTitle="Custom Command Buttons">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports Command columns, which in turn display custom buttons within individual command cells, the filter row, etc. You can create your own custom buttons and define custom actions for them.  
                </p>
                <p>
                    A command column maintains custom buttons within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.CustomButtons">CustomButtons</helplink> collection. Each button has a unique identifier (ID). Buttons can display an image or text.
                </p>
                <p>
                    To define an action for a custom button, handle the ASPxGridView’s <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.CustomButtonCallback">CustomButtonCallback</helplink> event. This event is raised after a custom button has been clicked by the end-user. Use the event parameter’s <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridViewCustomButtonEventArgs.buttonID">buttonID</helplink> property to identify the button currently being clicked.
                </p>
                <p>
          		    This demo describes how to create and display custom command buttons within the ASPxGridView. A custom command button ('Clone') and standard command buttons ('Edit', 'New', 'Update', 'Cancel') are used. All command buttons are represented by custom images that are able to display tooltips. Tooltips are defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.ToolTip">Image.Tooltip</helplink> property of the command button.
           		</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Bands" Title="Header Bands">
        <Keywords>Multi-Row Headers</Keywords>
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) ships with a multi-row header feature to help you organize grid columns into logical groups (bands). 
                </p>
                <p>
                A band is visually represented by a header displayed above the headers of the columns it combines. Each band is of a specific column type - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewBandColumn">GridViewBandColumn</helplink>. Unlike data columns, a band column is not designed to display data values directly, but to contain data (child) columns within its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.Columns">Columns</helplink> collection. This allows you to create a hierarchy of nested bands and place a data column and a band column at the same hierarchy level.
                </p>
                <p>
                Bands provide both display and usability benefits. They can be dragged by end-users to reorder columns. This is extremely useful if you need to provide a quick way to rearrange columns while preserving their logical grouping. Note that columns (and bands) are only allowed to move within their parent bands - you cannot move a child column from one parent band to another. This prevents end-users from breaking column grouping logic.
                </p>
                <p>
                Resizing and column freezing features are also available when using bands. Column freezing (controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.FixedStyle">FixedStyle</helplink> property) can only be applied to columns and bands located at the root hierarchy level (i.e., within the grid's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Columns">Columns</helplink> collection).
                </p>
              ]]>
        </Description>
      </Demo>
      <Demo Key="DataCellBands" Title="Data Cell Bands" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/CellBands.png">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides you with a capability to organize grid columns into logical groups (bands). It allows columns to be arranged in multiple rows, and column headers and cells to occupy more than one row. A collection of a column child columns can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.Columns">GridViewColumn.Columns</helplink> property.</p>
          <p>Bands provide both display and usability benefits. Header bands can be dragged by end-users to reorder columns. This is extremely useful if you need to provide a quick way to rearrange columns while preserving their logical grouping. Note that by default, columns (and bands) are only allowed to move within their parent bands, and when a parent band is moved, it is moved along with all its children. This prevents end-users from changing the hierarchy of columns within the grids. To allow end-users to modify the column hierarchy using drag-and-drop, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.ColumnMoveMode">SettingsBehavior.ColumnMoveMode</helplink> to <b>ThroughHierarchy</b>.</p>
          <p>The Grid View allows you to export grid data with bands to various formats. You can take a look at a grid export capabilities in the <a href="../Exporting/ExportWithDataCellBands.aspx">Export with Data Cell Bands</a> demo.</p>
          ]]>
        </Description>
        <HighlightedDescription>This demo illustrates the Grid View control capability to organize grid columns into bands.</HighlightedDescription>
      </Demo>
      <Demo Key="ColumnMoving" Title="Column Moving">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to move grid columns using drag-and-drop. To move a column, drag the column's header to the desired position. The location in which the dragged column will be inserted after you release the left mouse button is visually indicated by two arrows. By default, the ASPxGridView only allows the reordering of columns within their current nesting level. To allow the modification of column nesting using drag and drop, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.ColumnMoveMode">SettingsBehavior.ColumnMoveMode</helplink> to <b>ThroughHierarchy</b>.</p>
              <p>By default, when you move a grid column, the grid initiates a callback to re-render the grid layout accordingly. Setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.ProcessColumnMoveOnClient">SettingsBehavior.ProcessColumnMoveOnClient</helplink> to <b>true</b> allows the grid to re-render itself completely on the client, without sending a callback to the server. In this demo, you can switch between the server and client column moving modes using the <b>Process column moving on client</b> check box.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="TextEllipsis" Title="Text Ellipsis">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) can automatically truncate cell values if they don't fit into cell width. To indicate that the text is clipped, the grid displays an ellipsis ('...'). </p>
                <p>By default, this functionality is disabled, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowEllipsisInText">AllowEllipsisInText</helplink> property to true to enable it.</p>
                <p>Resize grid columns to see this feature in action. Point the mouse cursor over an ellipsis to display a tooltip with the full text.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Rows" Title="Grid Rows">
      <Demo Key="FocusedRow" Title="Focused Row">
        <Description>
          <![CDATA[
                <p>
                    The Focused Row feature is disabled by default. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowFocusedRow">SettingsBehavior.AllowFocusedRow</helplink> property to true.
                </p>
                <p>
                    The focused row's appearance can be specified using the style settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewStyles.FocusedRow">Styles.FocusedRow</helplink> property.
                </p>
                <ul>
                <li>
                <p>
                    Server Side
                </p>
                <p>
                    The focused row is identified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FocusedRowIndex">FocusedRowIndex</helplink> property. Use this property to move row focus in code. Changing this property raises the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FocusedRowChanged">FocusedRowChanged</helplink> event.
                </p>
                </li><li>
                <p>
                    Client Side
                </p>
                <p>
                    End-users move row focus by clicking the desired rows.
                </p>
                <p>
                    To respond to a change in row focus, handle the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.FocusedRowChanged">FocusedRowChanged</helplink> event.
                </p>
                <p>
                    To identify a row currently being focused, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetFocusedRowIndex">GetFocusedRowIndex</helplink> client method.
                </p>
                </li></ul>
                <p>
                    This demo shows how to dynamically display a focused employee's photo and details outside the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>). 
                </p>
                <p>
                    The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.FocusedRowChanged">FocusedRowChanged</helplink> event is handled to call the OnGridFocusedRowChanged() function. This function queries the server to return the employee's ID and Notes. The returned array is passed to the OnGetRowValues() function that specifies values for corresponding HTML elements.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ConditionalFormatting" Title="Conditional Formatting" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/ConditionalFormatting.png">
        <Description>
          <![CDATA[
     <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. This feature helps end-users to quickly notice critical information, identify trends and exceptions, and compare data. </p>
<p>Formatting rules can be created at design time or programmatically. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FormatConditions">FormatConditions</helplink> property provides an access to a collection of rules, which are represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridFormatConditionBase">GridFormatConditionBase</helplink> class descendants. </p>
<p>The style settings applied to grid cells can be exported together with data to various formats using our data aware export engine. Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export. You can take a look at a grid export capabilities in the <a href="../Exporting/ExportWithFormatConditions.aspx">Export with Format Conditions</a> demo.</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Grid (ASPxGridView) supports Microsoft Excel inspired conditional formatting of individual cells. In this demo, grid data is highlighted by applying several formatting rules.</HighlightedDescription>
      </Demo>
      <Demo Key="AlternatingRows" Title="Alternating Row Style">
        <Description>
          <![CDATA[
                <p>
                    To enhance readability, you can highlight alternating (odd) grid rows with a different style. To do so, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewAlternatingRowStyle.Enabled">Styles.AlternatingRow.Enabled</helplink> property to true, and then specify the desired style settings via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewStyles.AlternatingRow">Styles.AlternatingRow</helplink> property.
                </p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="PreviewRow" Title="Preview Row" SeoTitle="Outlook Style Row Preview">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides a preview feature that allows each data row to display a preview section, similar to Microsoft Outlook. Preview rows are non-editable regions that allow large memo fields or custom data to be displayed across all columns in the ASPxGridView. 
                </p>
                <p>
                    Preview rows are enabled if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowPreview">Settings.ShowPreview</helplink> option is set to true.
                </p>
                <p>
                    Preview rows are empty by default. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.PreviewFieldName">PreviewFieldName</helplink> property to the required field in the data source to bind the preview rows with data.
                </p>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.GetPreviewText(System.Int32)">GetPreviewText</helplink> method to get the text displayed within the specified preview row.
                </p>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewStyles.PreviewRow">Styles.PreviewRow</helplink> property to access the style settings used to paint preview rows.
                </p>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.PreviewRow">Templates.PreviewTemplat</helplink>e property to provide a template used for rendering preview rows.
                </p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="GridLines" Title="Grid Lines">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to display the following grid lines: 
                </p>
                <ul>
                    <li>Horizontal</li>
                    <li>Vertical</li>
                    <li>Both horizontal and vertical</li>
                    <li>No grid lines</li>
                </ul>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.GridLines">GridLines</helplink> property to specify the gridline style for the ASPxGridView.
                </p>
                <p>
                    In this demo, you can modify the display of gridlines by selecting values in the 'Grid Lines' combo box.
                </p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="CellMerging" Title="Cell Merging">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) can automatically merge adjacent cells with the same values. By default the cell merging is disabled. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowCellMerge">SettingsBehavior.AllowCellMerge</helplink> property to true to allow the grid merging cells; or control the cell merging availability for a particular column by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewDataColumnSettings.AllowCellMerge">GridViewDataColumnSettings.AllowCellMerge</helplink> property.</p>
          ]]>
        </Description>
        <HighlightedDescription>This demo illustrates the Grid View capability to automatically merge adjacent cells with the same values.</HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Selection" Title="Row Selection">
      <Demo Key="Selection" Title="Using Checkboxes" SeoTitle="Row Selection Check Boxes">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides the capability to allow end-users to select rows using checkboxes. To do this, add a command column to the ASPxGridView and set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowSelectCheckbox">ShowSelectCheckBox</helplink> property to ‘true’. The column will display check boxes within its cells. End-users can check or uncheck these check boxes to select or de-select the corresponding data rows.
                </p>
                <p>
                    This demo illustrates how you can display contact names selected within the ASPxGridView in a list box. The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectionChanged">SelectionChanged</helplink> event is handled to display the selected contacts in the list box, and the total number of selected contacts below the list box. Contact names are obtained using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetSelectedFieldValues(fieldNames-onCallback)">GetSelectedFieldValues</helplink> function. The number of selected rows is returned by the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.GetSelectedRowCount">GetSelectedRowCount</helplink> client function.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="SelectByRowClick" Title="Using Row Clicks" SeoTitle="Row Selection Using Row Clicks">
        <Description>
          <![CDATA[

                <p>
                    In addition to using check boxes to select individual rows, the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows end-users to select rows with a simple mouse click. To enable this selection mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowSelectByRowClick">SettingsBehavior.AllowSelectByRowClick</helplink> property to true. Once set, clicking any row clears the previous selection and selects this row. 
                 </p>
                 <p>
To select multiple rows, click the desired rows while holding down the CTRL key. Clicking a row in this manner toggles its selected state and preserves the selection. To select contiguous rows, click the first row you wish to select, hold down the SHIFT key, and click the last row. You can continue to customize selection by clicking individual rows while holding down the CTRL key. 
                </p>
                <p>
                    This demo illustrates how multiple rows can be selected via standard row clicks. 
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="AdvancedSelection" Title="Select All Rows" SeoTitle="Select All Rows on Page">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides end-users with the capability to select all grid rows by using the <b>Select All</b> check box, which can be displayed in a grid header. The check box visibility and selection mode is defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.SelectAllCheckboxMode">SelectAllCheckboxMode</helplink> property. This property can be set to the following values.</p> 
<ul>
<li><b>None</b> – the <b>Select All</b> check box is not displayed.</li>
<li><b>Page</b> – the <b>Select All</b> check box selects and deselects all rows on the current grid page.</li>
<li><b>AllPages</b> – the <b>Select All</b> check box selects and deselects all grid rows (on all grid pages).</li>
</ul>
<p>
In this demo the title panel is templated. When the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.SelectAllCheckboxMode">SelectAllCheckboxMode</helplink> property is set to <b>Page</b>, hyperlinks within the template allow end-users to select and deselect all grid rows. For this purpose, the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.SelectRowsByKey(keys)">SelectRows</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.UnselectRows">UnselectRows</helplink> methods are used.
</p>
                ]]>
        </Description>
      </Demo>

    </DemoGroup>

    <DemoGroup Key="PagingAndScrolling" Title="Data Paging and Scrolling">
      <Demo Key="Scrolling" Title="Scrolling">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to display more information in a smaller grid using vertical and horizontal scroll bars.
</p>
<p>
By default, grid height is determined by the number of rows displayed within a page, which is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewPagerSettings.PageSize">SettingsPager.PageSize</helplink> property. To reduce the grid's height, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property.
</p> 
<p>
By default, grid width depends on the number of visible columns. If there are too many columns within the grid, you can enable horizontal scrolling via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property, and define the width of the scrollable area using the grid's Width property.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">VerticalScrollBarMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">HorizontalScrollBarMode</helplink> properties have the following values.
</p>
<ul>
<li>
Hidden – the scrollbar is hidden.
</li>
<li>
Visible – the scrollbar is visible.
</li>
<li>
Auto – the scrollbar is automatically shown when the size of the content within the control exceeds the size of the control itself.
</li>
</ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="VirtualPaging" Title="Virtual Scrolling">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports a virtual paging mode that allows end-users to navigate through grid pages using the vertical scroll bar. </p>
<p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.VerticalScrollBarStyle">Settings.VerticalScrollBarStyle</helplink> property is set to <b>VirtualSmooth</b>, allowing the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> to smoothly scroll data through pages when a scroll button is clicked.</p>
<p>The vertical scroll bar can be used with or without the built-in pager to dynamically load requested page data using callbacks.</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="PagerPosition" Title="Pager Settings">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) automatically splits large content across multiple pages and provides a built-in pager, which enables end-users to navigate through data.</p>
                <p>The embedded pager control can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsPager">SettingsPager</helplink> property: </p>
                <ul>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridPagerSettings.Position">Position</helplink> property controls the pager's position within ASPxGridView: at the control's top, bottom, or both. In this demo, use the 'Position' combo box to select the required location.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls page size item visibility. In this demo, use the 'Show PageSizeItem' check box to show and hide the item.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where a page size item is displayed: to the left or right of the pager. In this demo, use the 'PageSizeItem position' combo box to select the desired location.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.Summary">Summary</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">Visible</helplink> property controls the pager's summary visibility. In this demo, use the ' Show Summary' check box to show and hide this element.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of the pager's buttons that cannot be used at the moment, and are temporarily disabled.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of the pager's numeric buttons that navigate a user to the corresponding pages.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies whether or not page number separators are displayed.</li>
                </ul>
                ]]>
        </Description>
      </Demo>

      <Demo Key="SEOFriendly" Title="SEO Friendly Paging">
        <Description>
          <![CDATA[
                <p>
A known issue with grid controls is that search engines simply ignore pagers. When indexing a site, they only use the information contained in the first page. The reason for this is that the pager's links are usually not represented as hyperlinks to other pages. Instead, they respond to click events to raise data update callbacks. The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to create an SEO-friendly pager using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridPagerSettings.SEOFriendly">SettingsPager.SEOFriendly</helplink> property.
                </p>
                <p>
If this property is set to <b>CrawlerOnly</b>, the ASPxGridView renders hyperlinks in the pager when a web-crawler is detected. For other visitors, standard pager links are generated. Thus, search engines can index the entire content of the grid, and site visitors experience the same paging functionality. 
                </p>
                <p>
If the property is set to <b>Enabled</b> or <b>Disabled</b>, automatic web crawler detection is disabled. The pager renders either SEO-friendly or standard links, respectively.
                </p>
                ]]>
        </Description>
      </Demo>

      <Demo Key="EndlessPaging" Title="Endless Paging" >
        <Description>
          <![CDATA[
                  <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) supports endless paging mode, which allows grid rows to load on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewPagerSettings.Mode">SettingsPager.Mode</helplink> property to <b>EndlessPaging</b>. In this mode, the grid loads more rows automatically when the end-user scrolls down to the bottom of the control.</p>
                  <p>The loading panel is displayed while grid rows load.</p>
                ]]>
        </Description>
        <HighlightedDescription>The Endless Paging mode in the DevExpress Grid View (ASPxGridView) allows grid rows to load on demand based on user actions. In this demo, rows are loaded when an end-user scrolls to the bottom of the grid.</HighlightedDescription>
      </Demo>

      <Demo Key="FixedColumns" Title="Fixed Columns">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to anchor columns to the left edge. When fixed, columns are always displayed, and not scrolled horizontally with the grid. This feature is active when horizontal scrolling is enabled via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property, and the total width of the columns exceeds the grid's width. To fix a column, set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.FixedStyle">FixedStyle</helplink> property value to Left. Non-fixed columns (whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.FixedStyle">FixedStyle</helplink> property is set to <b>None</b>) cannot be positioned before fixed columns. 
                </p>
                <p>
                    The style settings of fixed columns can be customized by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewStyles.FixedColumn">FixedColumn</helplink> property.
                </p>
                <p>
                    Fixed columns support complex layout scenarios that utilize such features as grouping, detail rows, preview rows and row templates. This demo illustrates the use of fixed columns within a grouped grid.
                </p>                
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Customization" Title="Customization Tools">
      <Demo Key="Toolbar" Title="Toolbar">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access. 
</p>
<p>
The ASPxGridView stores toolbars (which are <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbar">GridViewToolbar</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Toolbars">Toolbars</helplink> collection. You can add or remove toolbars, change their availability and position (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Visible">Visible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Enabled">Enabled</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink>), and populate them with toolbar items (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem">GridViewToolbarItem</helplink> class instances) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbar.Items">Items</helplink> property. Toolbar items can trigger standard grid commands (that is, data item editing, deletion, creation, etc.) and any custom actions, if required. 
</p>
<ul>
<li>
<b>Standard Toolbar Items</b><br/>
To make a toolbar item execute a standard command, set the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem.Command">Command</helplink> property to the desired command name listed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarCommand">GridViewToolbarCommand</helplink> enumeration. A standard toolbar item automatically displays the command-related text and image (optional). Clicking a standard toolbar item executes the corresponding grid command.
</li>
<li>
<b>Custom Toolbar Items</b><br/>
If you need to perform a custom action, set a toolbar item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem.Command">Command</helplink> property to the Custom value (the default setting), specify a custom command name through the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">Name</helplink> property and define item characteristics (such as text, image, etc.). Then handle the server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.ToolbarItemClick">ToolbarItemClick</helplink> event or client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.ToolbarItemClick">ToolbarItemClick</helplink> event (or both) to identify the triggered custom command by its name and execute the required action.
</li>
</ul>
<p> 
Note that toolbar items expose the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem.Items">Items</helplink> property allowing you to create hierarchies of nested toolbar items of unlimited depth.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="CustomizationDialog" Title="Customization Dialog" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/CustomizationDialog.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) enables you to provide your end-users with a mobile-friendly Customization Dialog to help them refine grid data when working under touch-enabled user interfaces. The dialog is optimized for the use on touch-based UI devices, such as tablets, mobile phones and desktops/laptops with touchscreen monitors. 
</p>
<p>
The following pages are available within the Customization Dialog to perform corresponding column-level data shaping operations:
</p>
<ul>
<li>
<b>Sorting</b><br/>
Enables users to sort/unsort grid columns, change the applied sorting order of columns, and change the order of sorted columns within the grid.
</li>
<li>
<b>Grouping</b><br/>
Enables users to group/ungroup grid columns and change the order of grouping columns within the grid.
</li>
<li>
<b>Filtering</b><br/>
Enables users to filter grid columns by entering filter criteria.
</li>
<li>
<b>Column Chooser</b><br/>
Enables users to change the order and visibility of columns.
</li>
</ul>
<p>
Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsCustomizationDialog">SettingsCustomizationDialog</helplink> property to access settings that specify the availability of the Customization Dialog and its pages. Note that by default, the Customization Dialog is disabled; to enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsCustomizationDialog">SettingsCustomizationDialog</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewCustomizationDialogSettings.Enabled">Enabled</helplink> property to true. 
</p>
<p>
To display the Customization Dialog, call the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ShowCustomizationDialog">ShowCustomizationDialog</helplink> client method or create a toolbar item with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewToolbarItem.Command">Command</helplink> property set to the ShowCustomizationDialog enumeration value.
</p>
          ]]>
        </Description>
        <HighlightedDescription>Mobile-friendly Customization Dialog helps end-users refine grid data when working under touch-enabled user interfaces. The dialog is optimized for the use on touch-based UI devices, such as tablets, mobile phones and desktops/laptops with touchscreen monitors.</HighlightedDescription>
        <SourceFile>~/Customization/CustomizationDialogPage.aspx</SourceFile>
        <SourceFile>~/Customization/CustomizationDialogPage.aspx.cs</SourceFile>
      </Demo>
      <Demo Key="ContextMenu" Title="Context Menu" SeoTitle="Context Menu" >
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) context menu is a popup menu displayed when an end-user right-clicks a grid element. The control provides different context menu types for the following elements: row, column header, footer, group footer, and group panel. You can specify the visibility of all context menu types using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.Enabled">Enabled</helplink> property. To control the menu visibility for a particular element, use the following properties.</p>
<ul>
	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableRowMenu">EnableRowMenu</helplink> – controls the visibility of a row context menu.</li>
	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableColumnMenu">EnableColumnMenu</helplink> – controls the visibility of a column header context menu.</li>
	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableFooterMenu">EnableFooterMenu</helplink> – controls the visibility of a footer context menu.</li>
  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableGroupFooterMenu">EnableGroupFooterMenu</helplink> – controls the visibility of a group footer context menu. (new in version 16.1)</li>
	<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.EnableGroupPanelMenu">EnableGroupPanelMenu</helplink> – controls the visibility of a group panel context menu.</li>
</ul>
<p>By default, ASPxGridView provides a set of context menu items for every menu type. You can customize the default items or add your own custom items. At runtime, you can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FillContextMenuItems">FillContextMenuItems</helplink> event to customize default menu items and create custom items.</p>
<p>In this demo, the context menu for each element is enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewContextMenuSettings.Enabled">Enabled</helplink> property to <b>true</b>. The server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.FillContextMenuItems">FillContextMenuItems</helplink> event is handled to add an <b>Export</b> item. To process the <b>Export</b> item click, the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ContextMenuItemClick">ContextMenuItemClick</helplink> and server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.ContextMenuItemClick">ContextMenuItemClick</helplink> events are handled.</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Grid View (ASPxGridView) provides a context menu for different elements. This demo illustrates how to enable the grid’s context menu and customize the menu items.</HighlightedDescription>
      </Demo>
      <Demo Key="ColumnChooser" Title="Column Chooser" SeoTitle="Column Chooser Window">
        <Description>
          <![CDATA[
                <p>
                    The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows end-users to modify the visibility of individual columns, similar to Microsoft Outlook. By invoking the Column Chooser window, your users can do the following: 
                </p>
                <ul>
                    <li>
                      View invisible grid columns. 
                    </li>
                    <li>
                       Hide a column (i.e., remove it from the grid's display) by dragging its header to the Column Chooser. 
                    </li>
                    <li>
                        Display a hidden column by dragging its header from the Column Chooser to the grid's column header section. 
                    </li>
                </ul>
                <p>
                    Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewPopupControlSettings.CustomizationWindow">SettingsPopup.CustomizationWindow</helplink> property to adjust the Column Chooser window's behavior and position.
                </p>
                <p>
                    The following client-side methods allow you to manage the Column Chooser:
                </p>
                <ul>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.ShowCustomizationWindow">ShowCustomizationWindow</helplink>
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.HideCustomizationWindow">HideCustomizationWindow</helplink>
                    </li>
                    <li>
                        <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.IsCustomizationWindowVisible">IsCustomizationWindowVisible</helplink>
                    </li>
                </ul>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="MSAjax" Title="ASP.NET AJAX">
      <Demo Key="UpdatePanel" Title="MS Update Panel" SeoTitle="Integration with MS AJAX Update Panel">
        <Description>
          <![CDATA[
                    <p>This demo illustrates the compatibility of the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) with the Microsoft Ajax UpdatePanel.</p>
                    <p>In this demo, the ASPxGridView resides within the MS Ajax UpdatePanel control along with other controls. The total for the invoices selected in the grid control is automatically updated in response to the control's selection changes, which are processed on the server side (the grid control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.ProcessSelectionChangedOnServer">SettingsBehavior.ProcessSelectionChangedOnServer</helplink> property is set to <b>true</b>).</p>
                    <p>Note: To allow the MS Ajax UpdatePanel to handle ASPxGridView server requests, the grid control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.EnableCallBacks">EnableCallBacks</helplink> property is set to false. This is necessary to make the UpdatePanel's child controls update properly, and to correctly preserve view state information. To provide visual feedback on the UpdatePanel's update status, the demo uses the MS Ajax UpdateProgress control.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ASPxGridLookup" Title="Advanced Lookup" SeoTitle="ASP.NET AJAX Grid Lookup Control" HighlightedTagNames="dx:ASPxGridLookup">
      <Keywords>dropdownedit, dropgrid</Keywords>

      <Demo Key="MultiSelect" Title="Multiple Record Selection">
        <Description>
          <![CDATA[
            <p>The ASPxGridLookup editor combines the functionality of the DevExpress ASP.NET Drop-down Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink>) and ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) controls to allow end-users to easily select values from a drop-down grid containing lookup items. The ASPxGridView control is seamlessly embedded into the editor's drop-down window, providing the editor with a powerful customizable data-processing and data-representation functionality. The ASPxGridLookup emulates a combo box that allows end-users to select multiple items within its drop-down list in the demo.</p>
            <p>One of the major data-processing features adopted from the ASPxGridView is the capability to allow end-users to select multiple list items within the drop-down grid. The selection behavior is controlled by the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.SelectionMode">SelectionMode</helplink> property, which can be set to ‘Single’ (only one item can be selected within the editor) or ‘Multiple’ (multiple items can be selected within the editor). This demo illustrates how multi-item selection can be implemented easily within ASPxGridLookup using the functionality of the built-in grid. </p>
            <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.SelectionMode">SelectionMode</helplink> property is set to ‘Multiple’. End-users can select items by clicking check boxes within the drop-down grid, or by entering tag names separated with a comma into the editor's edit box. </p>
            <p>To display check boxes within a drop-down grid, a specific command column is created and its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewCommandColumn.ShowSelectCheckbox">ShowSelectCheckbox</helplink> property is set to true. In addition, end-users are allowed to filter items within the drop-down grid. This feature is enabled by setting the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewSettings.ShowFilterRow">GridSettings.ShowFilterRow</helplink> property to true. </p>
            <p>Tag names can be entered into the editor’s edit box directly. This functionality is controlled by the <helplink href="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row">TextFormatString</helplink> property, which defines the column ("TagName") whose values should be entered and represented within the edit box.  By default, a semicolon character (;) is used as the value separator. List items (grid rows) that correspond to the tag names entered are automatically selected after the value is submitted (for instance, by pressing the ENTER key).</p>
            <p>When used together, all of these features provide end-users with easy-to-use features for searching and selecting the required data.</p>       
            ]]>
        </Description>
      </Demo>
      <Demo Key="FilterServerMode" Title="Incremental Filtering">
        <Keywords>autocomplete</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress Grid Lookup (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup">ASPxGridLookup</helplink>) editor combines the functionality of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDropDownEdit">ASPxDropDownEdit</helplink>, to allow an end-user to select items from a drop-down grid. ASPxGridLookup also supports the server mode functionality of ASPxGridView, which allows the editor to work efficiently with large data sources by loading data in small portions, on demand. To work in server mode, the editor must be bound to a data source of the <helplink href="https://docs.devexpress.com/XPO/DevExpress.Xpo.XpoDataSource">XpoDataSource</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.LinqServerModeDataSource">LinqServerModeDataSource</helplink> type.
</p>
<p>
The Grid Lookup editor enables end-users to filter list items dynamically, based on the text typed into the editor's input box on the client side (“find-as-you-type” filtering). The following filter modes are available, which are controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.IncrementalFilteringMode">IncrementalFilteringMode</helplink> property: 
</p>
<ul>
<li><b>Contains</b> - The editor is filtered for list items that contain the search string. The search string matches are highlighted.</li>
<li><b>StartsWith</b> - The editor is filtered for list items that begin with the search string. The editor value is autocompleted with the first corresponding value.</li>
<li><b>None</b> - Filtering is not applied to list items.</li>
</ul>
<p>
The value typed in the edit box by an end-user is searched for within the editor's item list, based on the defined format of the <helplink href="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row">TextFormatString</helplink> property.
</p>
<p>
In this demo, the <b>Filter Row</b> option allows you to hide the incremental filter and display a grid <helplink href="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row">filter row</helplink> that allows end-users to filter the grid data by a specific column.
</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="ItemTemplate" Title="Item Template">
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Grid Lookup (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup">ASPxGridLookup</helplink>) control includes many of the powerful data representation features of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>, including support for templates. Templates can be defined for different elements of the built-in grid such as data rows and data cells.</p>
            <p>This demo illustrates how the layout of the editor's list items can be modified by creating a template for the drop-down grid data rows via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewTemplates.DataRow">Templates.DataRow</helplink> property. Note that the incremental filtering functionality (enabled via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.IncrementalFilteringMode">IncrementalFilteringMode</helplink> property) works correctly when list item templating is used. In this demo, incremental filtering is performed over the values of the first two data columns defined within the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.Columns">Columns</helplink> collection - 'First Name' and 'Last Name'. The <helplink href="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row">TextFormatString</helplink> property using indexed placeholders ({0} and {1}) that correspond to column indexes within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.Columns">Column</helplink> collection. Thus, the <helplink href="https://docs.devexpress.com/AspNet/3753/aspnet-webforms-controls/grid-view/concepts/filter-data/filter-row">TextFormatString</helplink> property defines the format for displaying the value of the selected item within the edit box. The indexed placeholders ({0} and {1}) correspond to column indexes within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridLookup.Columns">Column</helplink> collection.</p>
            ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Adaptivity" Title="Adaptivity">
      <Keywords>Adaptivity, responsive, bootstrap</Keywords>
      <Demo Key="ResponsiveLayout" Title="Responsive Layout" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/ResponsiveLayout.png" HighlightedTitle="Adaptivity Support">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to build adaptive and responsive page layouts. The control can automatically resize or hide grid data when the browser's width changes. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsAdaptivity">SettingsAdaptivity</helplink> property allows you to specify how the layout changes in different cases.</p>
<p>This demo illustrates the ASPxGridView with a responsive layout (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptivityMode">AdaptivityMode</helplink> property value is set to 'HideDataCells'). The column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.MinWidth">MinWindth</helplink>/<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridViewColumn.MaxWidth">MaxWidth</helplink> properties allow you to specify a column's minimum and maximum widths. The column's width can be changed within the limits of these values depending on the grid's width. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AllowHideDataCellsByColumnMinWidth">AllowHideDataCellsByColumnMinWidth</helplink> property to specify whether the grid should hide a column if its width is less than the MinWidth value.</p>
<p>In responsive mode, the grid automatically hides columns one by one when the browser window is resized. Each hidden row displays an ellipsis button you can click to expand a detail row.</p>
                ]]>
        </Description>
        <HighlightedDescription>
          <![CDATA[  
          The Grid View can automatically resize or hide grid data when the browser window is resized, allowing you to build adaptive or responsive page layouts with ease.
          ]]>
        </HighlightedDescription>
        <SourceFile>~/Adaptivity/ResponsiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to build adaptive or responsive page layouts with ease. The control can automatically resize or hide grid data when the browser window is resized. The layout behavior can be customized by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsAdaptivity">SettingsAdaptivity</helplink> property.</p>
<p>In this demo, the grid provides an adaptive layout, which is enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptivityMode">AdaptivityMode</helplink> property to <b>HideDataCellsWindowLimit</b>. </p>
<p>In adaptive mode, the Grid View automatically changes its layout when the browser window inner width is less than or equal to the value specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.HideDataCellsAtWindowInnerWidth">HideDataCellsAtWindowInnerWidth</helplink> property. In this case, the control content is reordered into one column containing adaptive detail rows. The column headers are displayed above the data.</p>
<p>In this demo, the Grid View changes its layout when the browser window width is less than 800 pixels.</p>
<p>You can try Grid View with a responsive layout in the <a href="ResponsiveLayout.aspx">Responsive Layout</a> demo.</p>
                ]]>
        </Description>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="AdaptiveLayoutWithFormLayout" Title="Adaptive Layout with Form Layout">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) allows you to build adaptive page layouts with ease. The control can automatically resize or collapse grid data when the browser window is resized.</p> 
<p>The grid layout behavior can be customized by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.SettingsAdaptivity">SettingsAdaptivity</helplink> property. In this demo, the Grid View automatically reorders its content into one column containing adaptive detail rows, when the browser window inner width is less than or equal to 800 pixels (specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.HideDataCellsAtWindowInnerWidth">HideDataCellsAtWindowInnerWidth</helplink> property).</p>
<p>The adaptive detail row layout behavior can be customized by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewAdaptivitySettings.AdaptiveDetailLayoutProperties">AdaptiveDetailLayoutProperties</helplink> property. In this demo, an adaptive detail row automatically reorders its content into one column when the browser window is less than or equal to 600 pixels (specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FormLayoutAdaptivitySettings.SwitchToSingleColumnAtWindowInnerWidth">SwitchToSingleColumnAtWindowInnerWidth</helplink> property).</p>
                ]]>
        </Description>
        <SourceFile>~/Adaptivity/AdaptiveLayoutWithFormLayoutPage.aspx</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility">
      <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, ASPxGridView implements the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for the control.
</p>
<p>
This demo illustrates how to make the ASPxGridView control more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.AccessibilityCompliant">AccessibilityCompliant</helplink> property and defining a caption through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Caption">Caption</helplink> property.
</p> 
<p>
Check ASPxGridView's accessibility level in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that ASPxGridView can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
      <Demo Key="ComplianceEditing" Title="Section 508/WCAG Editing" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) is designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, ASPxGridView implements the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for the control.
</p>
<p>
This demo illustrates how to make the ASPxGridView control more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.AccessibilityCompliant">AccessibilityCompliant</helplink> property and defining a caption through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.Caption">Caption</helplink> property.
</p> 
<p>
Check ASPxGridView's accessibility level in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that ASPxGridView can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
      <Demo Key="KeyboardSupport" Title="Keyboard Support" SeoTitle="Keyboard Navigation">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET GridView (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) includes built-in keyboard support, allowing you to perform navigation operations using a keyboard instead of a pointing device. For example, you can access the grid within a form, move focus through grid rows, select grid rows, and expand/collapse rows. By enabling keyboard support for the ASPxGridView, you can create web pages that conform to accessibility guidelines.
                </p>
                <p>
                    To enable keyboard navigation, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView.KeyboardSupport">KeyboardSupport</helplink> property of the grid to true. This will activate the following grid features: 
                </p>
                <ul>
                    <li>Access Key - The grid control can be accessed (focused) using a user-defined keyboard shortcut. This shortcut is created by combining the preset CTRL+SHIFT combination with a single character string specified via the AccessKey property. For example, setting the access key of a grid control to the string "D" indicates that an end-user can navigate to the grid by pressing CTRL + SHIFT + D. 
                    </li>
                    <li>
                        Focused Row - The Focused Row feature is automatically activated, regardless of the corresponding feature property setting (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowFocusedRow">SettingsBehavior.AllowFocusedRow</helplink>). Focus can be moved between rows using the UP and DOWN ARROW keys. The LEFT and RIGHT ARROW keys can also be used to move row focus, but these keys initially try to collapse/expand a row. In this case, focus is only moved when it is not possible to collapse/expand a row. When focus is on the first row in a page and you press the UP ARROW or LEFT ARROW key, the previous page is displayed. When focus is on the last row in a page and you press the DOWN ARROW or RIGHT ARROW key, the next page is displayed.
                    </li>
                    <li>
                        Row Selection - The SPACE key can be used to mark a focused row as selected/unselected. This works if selection can be applied to a row (if the row is not a group or detail row, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridViewBehaviorSettings.AllowSelectByRowClick">SettingsBehavior.AllowSelectByRowClick</helplink> property is enabled, or the row contains a selection check box or button). Multiple rows can easily be selected by moving row focus with the ARROW keys (UP/DOWN or LEFT/RIGHT) while holding down the SHIFT key. 
                    </li>
                    <li>
                        Expanding/Collapsing Rows - The PLUS and MINUS keys can be used to expand and collapse group and detail rows, respectively. In addition, rows can be collapsed and expanded using the LEFT and RIGHT ARROW keys.
                    </li>
                    <li>
                        Paging - The SHIFT + PAGE UP and SHIFT + PAGE DOWN key combinations can be used to go to the previous grid page and next grid page, respectively.
                    </li>
                </ul>]]>
        </Description>
      </Demo>
      <Demo Key="RightToLeft" Title="Right to Left">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) provides support for right-to-left languages such as Arabic and Hebrew. To switch the ASPxGridView to a right-to-left representation, you will need to enable a single grid property - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.RightToLeft">RightToLeft</helplink>. When this property is active, text flows right-to-left and the layout of most grid UI elements is reversed.</p>
                <p>If you need to apply right-to-left display for all DevExpress web controls within your web application, you can enable a specific configuration option within the web.config file, rather than switch the RightToLeft property for each control. This is the <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> option, which can be accessed within the settings group of the devExpress section in the web.config file.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Localization" Title="Localization">
        <Description>
          <![CDATA[
          <p>This demo illustrates how resources can be localized for a specific culture, to display an ASP.NET Web Forms application with DevExpress controls in a different language.</p>
<p>In this demo, you can select a culture from the combo box and apply it to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">Grid View</helplink>. When the language is changed, the Grid View changes the following:</p>
<ul>
<li><i>Column captions</i>. Each column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.WebColumnBase.Caption">Caption</helplink> property is set to a corresponding resource value. When the current culture is changed, the required resource value is retrieved.</li>
<li><i>Date formatting</i>. Grid View columns automatically display DateTime values based on the applied culture.</li>
<li><i>Grid View element text</i>. The control automatically retrieves the required strings from the localization resources provided by DevExpress controls.</li>
</ul>
               ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxCardView" Url="ASPxCardViewDemos" Title="DevExpress ASPxCardView" SeoTitle="" NavItemTitle="Card View" OrderIndex="10" HighlightedTagNames="dx:ASPxCardView">
    <Keywords></Keywords>
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      https://docs.devexpress.com/AspNet/114048/aspnet-webforms-controls/card-view
    </DocUrl>

    <IntegrationImageUrl>~/Content/CardView.png</IntegrationImageUrl>
    <IntegrationDescription>
      Microsoft Outlook® Contacts View style interface provided with rich data shaping and editing capabilities.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Data Card Control">
      <BannerTitle>
        Card View control for ASP.NET AJAX
      </BannerTitle>

      <BannerText>
        Microsoft Outlook® Contacts View style interface provided with rich data shaping and editing capabilities.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=TL8E_SBPg_U</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxCardView control
      </DescriptionTitle>
      <Description>
        <![CDATA[
            This website demonstrates some of the many features and capabilities available to you when using our ASP.NET card view. These features include:
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
            <p>
              The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) is an editing and data shaping component allowing end-users to manage information and display it in a card view (set of cards). The ASPxCardView provides a rich UI and comprehensive APIs allowing you to build complex card view layouts (filtering, sorting, exporting, flexible layout performance, etc.).
            </p>
            ]]>
      </Description>
      <KeyFeature Name="Data Sorting" DemoUrl="~/SortingAndGrouping/Sorting.aspx">
        <Description>
          <![CDATA[
             ASPxCardView makes it easy for end-users to sort data against an unlimited number of columns. When necessary, you can disable runtime sort options and handle all sort operations in code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Editing Support" DemoUrl="~/Editing/EditModes.aspx">
        <Description>
          <![CDATA[
            ASPxCardView provides functionality that checks the data input by end-users to ensure that data is error-free. Data entered by an end-user can be validated on the client or server before it is posted to a data source.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Filtering" DemoUrl="~/Filtering/SearchPanel.aspx">
        <Description>
          <![CDATA[
             ASPxCardView provides multiple data filtering options so you can address customer needs more effectively using the data search panel, header filter or filter editor control.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Endless Paging" DemoUrl="~/PagingAndScrolling/EndlessPaging.aspx">
        <Description>
          <![CDATA[
             ASPxCardView supports endless paging mode, which allows control cards to load on demand. 
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="DataShaping" Title="Data Binding and Summaries">
      <Keywords>amount, total, data, bind</Keywords>
      <Demo Key="LargeDatabase" Title="Large Database (Server Mode)" SeoTitle="Large Database (Server Mode)" >
        <Description>
          <![CDATA[
                <p>
                    The DevExpress <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.EntityServerModeDataSource">EntityServerModeDataSource</helplink> component improves performance when binding the DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) to a large data set. In this mode, only small portions of the data are loaded into the ASPxCardView on demand, and all required data processing (such as sorting) is performed on the data server. This technique significantly reduces the application's response time.                  
                </p>
                <p>
                    Switch between the DevExpress datasource (EntityServerModeDataSource) and the standard .NET datasource (EntityDataSource), and perform the same data operations (such as grouping or sorting) in the ASPxCardView control, to test the application’s performance.
                </p>          
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/114316/aspnet-webforms-controls/card-view/concepts/binding-to-data/binding-to-large-data-database-server-mode/data-binding-to-large-data-via-ef" Title="Data Binding to Large Data via EF" />
      </Demo>
      <Demo Key="TotalSummary" Title="Total Summary" SeoTitle="Total Summary Calculation" >
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) is a powerful data shaping control that includes a variety of data summary calculation options. Total summaries are aggregate function values calculated against all cards within <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>, and displayed in the summary panel, provided that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowSummaryPanel">Settings.ShowSummaryPanel</helplink> property is set to true.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink> stores its total summary items, which are instances of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSummaryItem">ASPxCardViewSummaryItem</helplink> class, in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.TotalSummary">TotalSummary</helplink> collection. </p>
<p>Built-in aggregate functions include: Min, Max, Avg, Sum and Count.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Filtering" Title="Filtering">
      <Keywords>filtercontrol, filters</Keywords>
      <Demo Key="SearchPanel" Title="Search Panel" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/SearchPanel.png" >
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows you to filter data and highlight search results using its integrated <b>search panel</b>. To enable the easy-to-use search panel, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to <b>true</b>. The search panel filter criterion that is applied to control data can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SearchPanelFilter">SearchPanelFilter</helplink> property. You can customize search panel functionality using the following <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.SettingsSearchPanel">SettingsSearchPanel</helplink> property settings. 
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.AllowTextInputTimer">AllowTextInputTimer</helplink> specifies if a search panel filter is applied automatically or manually.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSearchPanelSettings.ColumnNames">ColumnNames</helplink> lists the names of columns to which the filter criteria will be applied.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Delay">Delay</helplink> specifies the time interval between the initiation of search input and when filtering is applied.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.GroupOperator">GroupOperator</helplink> specifies the logical operator used to combine conditions (multiple words separated by space characters).</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.HighlightResults">HighlightResults</helplink> specifies whether a text matching the filter condition is highlighted within the grid.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowApplyButton">ShowApplyButton</helplink> specifies whether the Apply button is displayed within the search panel.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowClearButton">ShowClearButton</helplink> specifies whether the Clear button is displayed within the search panel.</li>
</ul>
                ]]>
        </Description>
        <HighlightedDescription>The Search panel allows end-users to filter data and highlight search results by typing filter criteria in the panel's editor. This demo illustrates the main features provided by the grid search panel.</HighlightedDescription>

      </Demo>
      <Demo Key="HeaderFilter" Title="Header Filter" SeoTitle="Excel Style Data Filtering">
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) provides a powerful data filtering mechanism that displays a dropdown list of all unique values within a column. This allows end-users to easily filter cards by selecting the values displayed within the dropdown. 
                </p>
                <p>
                Additionally, end-users can filter items by entering text in the filter editor above the list. When typing a filter string, the header filter items list is automatically updated, so only the relevant items that match the filter string are displayed.
                </p>
                <p>
                Filter dropdown buttons are disabled by default. To show filter buttons, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterButton">ShowHeaderFilterButton</helplink> property to true.
                </p>
                <p>
                You can specify the header filter mode for a column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property.  
                </p>
                <ul>
                <li>In <b>List</b> mode, the column's header filter dropdown displays a regular list of filter items, allowing end-users to select single value.</li>
                <li>In <b>CheckedList</b> mode, the column's header filter dropdown contains a check box list, allowing end-users to select multiple values for the filter criteria.</li>
                <li><b>DateRangeCalendar</b> and <b>DateRangePicker</b> modes are available for date columns only. You can take a look at these modes in the <a href="DateRangeHeaderFilter.aspx">Date Range Header Filter</a> demo.</li>
                </ul>
                <p>
                The ASPxCardView allows you to create custom filter values, define filter criteria and display these values within the column's filter dropdown. To do this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.HeaderFilterFillItems">HeaderFilterFillItems</helplink> event. In this demo, custom filter values are displayed within the 'Total' and 'Quantity' columns' filter dropdowns.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Card View (ASPxCardView) provides a powerful data filtering mechanism. This demo illustrates the main features provided by the grid header filter.</HighlightedDescription>
      </Demo>
      <Demo Key="DateRangeHeaderFilter" Title="Date Range Header Filter">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) provides a powerful data filtering mechanism allowing end-users to filter dates.
</p> 
<p>A date column's dropdown header filter displays a date editor (date range picker or calendar) and a list of predefined date periods. End-users can filter the records stored in the underlying dataset by selecting the values displayed within the dropdown.
</p>
<p>
By default, the header filter is disabled, set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnSettings.AllowHeaderFilter">AllowHeaderFilter</helplink> property to <b>true</b> to enable it.
</p>
<p>
To specify a date editor that is displayed in the dropdown, set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property to one of the following values.
</p>
<ul>
<li>
<b>DateRangeCalendar</b> – a calendar is displayed in the filter dropdown. The calendar settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewDataColumnHeaderFilterSettings.DateRangeCalendarSettings">DateRangeCalendarSettings</helplink> property.
</li>
<li>
<b>DateRangePicker</b> – a date range picker is displayed in the filter dropdown. The editors' settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewDataColumnHeaderFilterSettings.DateRangePickerSettings">DateRangePickerSettings</helplink> property.
</li>
</ul>          
      ]]>
        </Description>
      </Demo>
      <Demo Key="FilterBuilder" Title="Filter Control" SeoTitle="Built-in Filter Builder">
        <Description>
          <![CDATA[
             <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) Filter Control allows end-users to build complex filter criteria with an unlimited number of filter conditions and logical operators. You can activate the Filter Control by clicking the image or filter expression link displayed within the Filter Bar displayed at the bottom of the card view. 
</p>
<p>The following properties (available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.SettingsFilterControl">SettingsFilterControl</helplink> property) allow you to customize Filter Control functionality.</p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ViewMode">ViewMode</helplink> property specifies how a filter expression is displayed in the Filter Control: either in the visual representation only, or in the visual representation and text filter expression editor.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.AllowHierarchicalColumns">AllowHierarchicalColumns</helplink> property specifies if the Filter Control can display hierarchical columns. The max hierarchy depth level can be limited by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.MaxHierarchyDepth">MaxHierarchyDepth</helplink> property.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ShowAllDataSourceColumns">ShowAllDataSourceColumns</helplink> property specifies which columns are visible in the Filter Control: all data source columns or only the columns that are visible in a card.</li>
        </ul>        
        ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="SortingAndGrouping" Title="Sorting and Grouping">
      <Keywords>cardview, sorting, grouping</Keywords>
      <Demo Key="Sorting" Title="Sorting Data" SeoTitle="Sorting Data">
        <Description>
          <![CDATA[
 <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows end-users to sort data against an unlimited number of columns. A column's current sort order is indicated by a sort glyph displayed on the right side of the column header located within the customization panel. When a column is not sorted, the sort glyph is hidden.
</p>

<p>
You can specify the sorting settings in code by using a column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewColumn.SortOrder">SortOrder</helplink> property.
</p>

<p>
In this demo, you can click a column header to initiate sorting or change column sort order (from ascending to descending, and vice versa). To sort data against multiple columns, click the required column headers while holding down the SHIFT key.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Grouping" Title="Grouping">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows you to group cards by columns. 
          In this demo, the card view groups its cards by the "Brand" column and sorts in ascending order. 
          Use the "Group by" combo box to group card view cards by other columns.</p>
          <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowGroupSelector">Settings.ShowGroupSelector</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.ShowHeaderPanel">Settings.ShowHeaderPanel</helplink> properties to true to enable grouping in the card view.</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Editing" Title="Editing" >
      <Keywords>crud, dataedit</Keywords>
      <Demo Key="EditModes" Title="Edit Modes">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) provides different data editing options so that you can create web applications that effectively address the needs of your end-users. 
</p>
<p>
This demo illustrates two built-in data edit modes. Use the <b>Edit Mode</b> combo box to select the desired edit mode. 
</p>
<ul>
<li>
<b>EditForm</b> - Card values are edited using the inline edit form.
</li> 
<li>
<b>PopupEditForm</b> - Card values are edited using the popup edit form. 
</li>
</ul>
<p>
Note: The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.KeyFieldName">KeyFieldName</helplink> property must be specified to enable data edit, insert and delete operations. 
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Card View (ASPxCardView) provides two built-in data edit modes. This demo allows you to try both modes in action.</HighlightedDescription>
      </Demo>
      <Demo Key="BatchEditing" Title="Batch Editing and Updating" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/CardViewBatch.png" HighlightedTitle="Batch Editing">
        <Keywords>batch updating, batch modification, multiple row editing</Keywords>
        <Description>
          <![CDATA[
               <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) control allows end-users to edit and update multiple cards on the client side and send them to the server in a single request.
</p>

<p>
To enable the batch editing functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewEditingSettings.Mode">SettingsEditing.Mode</helplink> property to '<b>Batch</b>'. In this mode, the control data contained in a page can be edited using in-line editors. The modified cells are colored in green. Deleted cards are highlighted with gray and display the <b>Recover</b> command item. To hide the deleted cards from the view, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewBatchEditSettings.HighlightDeletedCards">SettingsEditing.BatchEditSettings.HighlightDeletedCards</helplink> property to <b>false</b>. All changes are maintained on the client side until the <b>Save changes</b> link is clicked. You can cancel all changes by clicking the <b>Cancel changes</b> link.
</p>

<p>
If a control contains modified data, it displays a confirm message before a callback or postback is performed.
</p>

<p>In this demo, use the <b>Edit mode</b> combo box (“Cell” or “Card”) to specify the control element used to edit the data. The <b>Start edit action</b> combo box (“Click”, “DblClick”, or “FocusedCellClick”) allows you to specify the action that should be used to begin editing data.
</p>

                ]]>
        </Description>
        <HighlightedDescription>The Batch edit mode speeds up the Card View control's performance by eliminating excessive data updates. The main objective is to update the control only once - after all the necessary changes have been made. In this demo, end-users can modify data on the client side and send it to the server in a single request.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="PagingAndScrolling" Title="Data Paging and Scrolling">
      <Demo Key="PagerSettings" Title="Pager Settings">
        <Description>
          <![CDATA[
             <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) automatically splits large content across multiple pages and provides a built-in pager, which enables end-users to navigate through data.
</p>
<p>
The embedded pager control can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.SettingsPager">SettingsPager</helplink> property.
</p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridPagerSettings.Position">Position</helplink> property controls the pager's position within ASPxCardView: at the control's top, bottom, or both. </li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where a page size item is displayed to the left or right of the pager. </li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls page size item visibility.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.Summary">Summary</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">Visible</helplink> property controls the pager's summary visibility.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of pager buttons that cannot be used at the moment and are temporarily disabled.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of pager numeric buttons that navigate a user to corresponding pages.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies if number separators are displayed.</li>
</ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="EndlessPaging" Title="Endless Paging" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/EndlessPaging.png">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) supports endless paging mode, which allows control cards to be loaded on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.Mode">Mode</helplink> property to <b>EndlessPaging</b>.</p>
<p>In this mode, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewPagerSettings.EndlessPagingMode">EndlessPagingMode</helplink> property to specify when the Card View should load more cards. The property can be set to one of the following values.</p>
<ul>
<li><b>OnClick</b> - cards are loaded when a 'Show more cards' link is clicked.</li>
<li><b>OnScroll</b> - cards are loaded when a page or the control is scrolled.</li>
</ul>
<p>You can enable control scrolling by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">VerticalScrollBarMode</helplink> property, which can be switched by the <b>Enable scrolling</b> check box in this demo.</p>
                ]]>
        </Description>
        <HighlightedDescription>The Endless Paging mode in the DevExpress Card View (ASPxCardView) allows cards to load on demand based on user actions. In this demo, cards are loaded when an end-user scrolls to the bottom of the control.</HighlightedDescription>
      </Demo>
      <Demo Key="Scrolling" Title="Scrolling">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows you to display more information in a smaller grid using vertical scroll bars.
</p>
<p>
By default, grid height is determined by the number of cards displayed within a page, which is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewFlowLayoutSettings.ItemsPerPage">CardViewFlowLayoutSettings.ItemsPerPage</helplink> property for the <b>Flow</b> layout mode, and by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewTableLayoutSettings.RowsPerPage">CardViewTableLayoutSettings.RowsPerPage</helplink> and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewTableLayoutSettings.ColumnCount">CardViewTableLayoutSettings.ColumnCount</helplink> properties for the <b>Table</b> layout mode respectively. To reduce the grid's height, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.VerticalScrollBarStyle">VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewSettings.VerticalScrollBarStyle">VerticalScrollBarMode</helplink> property has the following values.
</p>
<ul>
<li>Hidden – the scrollbar is hidden.</li >
<li>Visible – the scrollbar is visible.</li>
<li>Auto – the scrollbar is automatically shown when the size of the content within the control exceeds the size of the control itself.</li>
</ul>
            ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="FocusingAndSelection" Title="Focusing and Selection">
      <Demo Key="Focusing" Title="Focusing">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows end-users to focus cards. By default, card focusing is disabled; set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewBehaviorSettings.AllowFocusedCard">SettingsBehavior.AllowFocusedCard</helplink> property to <b>true</b> to enable this feature. 
</p>
<p>
The focused card's appearance can be specified using the style settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewStyles.FocusedCard">Styles.FocusedCard</helplink> property. 
</p>
<p>
<b>Server Side </b>
</p>
<p>
The focused card is identified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FocusedCardIndex">FocusedCardIndex</helplink> property. Use this property to move card focus in code. Changing this property raises the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FocusedCardChanged">FocusedCardChanged</helplink> event. 
</p>
<p>
<b>Client Side </b>
</p>
<p>
End-users move focus by clicking the desired cards. To respond to a change in card focus, handle the <b>FocusedCardChanged</b> event. To identify a card currently being focused, use the <b>GetFocusedCardIndex</b> client method. 
</p>
<p>
This demo shows how to dynamically display a focused employee's details outside the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>. 
</p>

                ]]>
        </Description>
      </Demo>
      <Demo Key="Selection" Title="Selection" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/Selection.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows end-users to select cards with a simple mouse click. To enable this selection mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewBehaviorSettings.AllowSelectByCardClick">SettingsBehavior.AllowSelectByCardClick</helplink> property to true. Once set, clicking any cards clears the previous selection and selects this card.
</p>
<p>
To select multiple cards, click the desired cards while holding down the CTRL key, or click a card's check box. Clicking a card in this manner toggles its selected state and preserves the selection. To select contiguous cards, click the first card you wish to select, hold down the SHIFT key, and click the last card. You can continue to customize selection by clicking individual cards while holding down the CTRL key.
</p>
                ]]>
        </Description>
        <HighlightedDescription>This demo illustrates how multiple cards can be selected by using standard row clicks.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Appearance" Title="Appearance Customization">
      <Demo Key="ConditionalFormatting" Title="Conditional Formatting">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. This feature helps end-users to quickly notice critical information, identify trends and exceptions, and compare data. </p>
<p>Formatting rules can be created at design time or programmatically. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.FormatConditions">FormatConditions</helplink> property provides an access to a collection of rules, which are represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridFormatConditionBase">GridFormatConditionBase</helplink> class descendants. </p>
<p>The style settings applied to card cells can be exported together with data to various formats using our data aware export engine. Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export. You can take a look at a card view export capabilities in the <a href="../Exporting/ExportWithFormatConditions.aspx">Export with Format Conditions</a> demo.</p>
      ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Adaptivity" Title="Adaptivity">
      <Keywords>Adaptivity, responsive, bootstrap</Keywords>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) control allows creating adaptive layouts so that the control's content looks consistent across all devices. This functionality uses breakpoints at which the control shifts, resizes, or moves its cards to a new line. It allows you to create, for example, a two-column layout for narrow screens or a three-column layout for wider screens.</p>
          <p>In this demo, resize the browser width to see how the Card View adjusts its content to different widths. The Card View cards change their position and size at each breakpoint.</p>
          <p>The ASPxCardView stores breakpoints (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewBreakpoint">CardViewBreakpoint</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardViewBreakpointsLayoutSettings.Breakpoints">Breakpoints</helplink> collection. Breakpoints define the number of cards in a row (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewBreakpoint.CardsPerRow">CardsPerRow</helplink>) and maximum width (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.MaxWidth">MaxWidth</helplink>) specifications for different screen sizes specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.DeviceSize">DeviceSize</helplink> property.</p>

        ]]>
        </Description>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="Ellipsis" Title="Text Truncation with Ellipsis">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) can automatically truncate cell values if they don't fit into cell width. To indicate that the text is clipped, the control displays an ellipsis ('...'). </p>
<p>By default, this functionality is disabled, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowEllipsisInText">AllowEllipsisInText</helplink> property to true to enable it.</p>
      ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Templates" Title="Templates">
      <Demo Key="Card" Title="Card">
        <Description>
          <![CDATA[
                               <p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) provides a set of templates that allow you to create custom layouts for its visual elements (card headers and footers, edit form, pager bar, etc.) This demo illustrates how to use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewTemplates.Card">Card</helplink> template to display detail information when a card is hovered. 
</p>
<p>
In this demo, the Eval function is used to define one-way (read-only) binding. The Eval method takes the name of a data field, and returns a string containing the value of that field from the current record in the data source.
</p> 
                ]]>
        </Description>
        <SourceFile>~/Templates/CSS/Card.css</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Exporting" Title="Data Export" HighlightedTagNames="dx:ASPxCardView">
      <Keywords>export, data export</Keywords>
      <Demo Key="Exporting" Title="Exporting to Different Formats" SeoTitle="Exporting to PDF, RTF, DOCX, XLS (DataAware), XLSX (DataAware) formats">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) allows you to export data with ease. Data can be exported to a file or stream in the following formats:
</p>
                <ul>
                    <li>PDF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttopdf.overloads">ExportToPdf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportpdftoresponse.overloads">ExportPdfToResponse</helplink>)</li>
                    <li>XLS (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttoxls.overloads">ExportToXls</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlstoresponse.overloads">ExportXlsToResponse</helplink>)</li>
                    <li>XLSX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttoxlsx.overloads">ExportToXlsx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportxlsxtoresponse.overloads">ExportXlsxToResponse</helplink>)</li>
                    <li>RTF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttortf.overloads">ExportToRtf</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportrtftoresponse.overloads">ExportRtfToResponse</helplink>)</li>
                    <li>CSV (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttocsv.overloads">ExportToCsv</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportcsvtoresponse.overloads">ExportCsvToResponse</helplink>)</li>
                    <li>DOCX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exporttodocx.overloads">ExportToDocx</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxgridbase.exportdocxtoresponse.overloads">ExportDocxToResponse</helplink>)</li>
                </ul>
      ]]>
        </Description>
      </Demo>
      <Demo Key="ExportSelected" Title="Export Selected Cards" SeoTitle="Export Selected Cards">
        <Description>
          <![CDATA[
<p>
This demo illustrates how to only export records that are selected within the DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>). Cards can be selected and unselected using corresponding check boxes. To restrict data export, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Mvc.MVCxCardViewExportSettings.ExportSelectedCardsOnly">ExportSelectedCardsOnly</helplink> property to true.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ExportWithFormatConditions" Title="Export with Format Conditions" SeoTitle="Export with Format Conditions">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. The style settings applied to grid cells can be exported together with data to various formats using our data aware export engine.
</p>
<p>
When data is exported to a PDF or RTF file, the grid maintains the style settings applied to the cells (with the exception of images). Moreover, when you export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export.
</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Customization" Title="Customization Tools">
      <Demo Key="Toolbar" Title="Toolbar" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Toolbar.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access. 
</p>
<p>
The ASPxCardView stores toolbars (which are <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbar">CardViewToolbar</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.Toolbars">Toolbars</helplink> collection. You can add or remove toolbars, change their availability and position (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Visible">Visible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Enabled">Enabled</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink>) and populate them with toolbar items (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbarItem">CardViewToolbarItem</helplink> class instances) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbar.Items">Items</helplink> property. Toolbar items can trigger standard grid commands (that is, data item editing, deletion, creation, etc.) and any custom actions, if required. 
</p>
<ul>
<li>
<b>Standard Toolbar Items</b><br/>
To make a toolbar item execute a standard command, set the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbarItem.Command">Command</helplink> property to the desired command name listed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbarCommand">CardViewToolbarCommand</helplink> enumeration. A standard toolbar item automatically displays the command-related text and image (optional). Clicking a standard toolbar item executes the corresponding grid command.
</li>
<li>
<b>Custom Toolbar Items</b><br/>
If you need to perform a custom action, set a toolbar item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbarItem.Command">Command</helplink> property to the Custom value (the default setting), specify a custom command name through the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">Name</helplink> property and define item characteristics (such as text, image, etc.). Then handle the server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView.ToolbarItemClick">ToolbarItemClick</helplink> event or client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.ToolbarItemClick">ToolbarItemClick</helplink> event (or both) to identify the triggered custom command by its name and execute the required action.
</li>
</ul>
<p> 
Note that toolbar items expose the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CardViewToolbarItem.Items">Items</helplink> property allowing you to create hierarchies of nested toolbar items of unlimited depth.
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Card View (ASPxCardView) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access.</HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Accessibility" Title="Accessibility">
      <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Card View control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCardView">ASPxCardView</helplink>) is designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, ASPxCardView implements the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for the control.
</p>
<p>
This demo illustrates how to make the ASPxCardView control more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.AccessibilityCompliant">AccessibilityCompliant</helplink> property.
</p> 
<p>
Check ASPxCardView's accessibility level in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that ASPxGridView can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
    </DemoGroup>

  </DemoProduct>

  <DemoProduct Key="ASPxVerticalGrid" Url="ASPxVerticalGridDemos" Title="DevExpress ASPxVerticalGrid" SeoTitle="" NavItemTitle="Vertical Grid" OrderIndex="14" HighlightedTagNames="dx:ASPxVerticalGrid" >
    <Keywords></Keywords>
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      https://docs.devexpress.com/AspNet/116045/aspnet-webforms-controls/vertical-grid
    </DocUrl>

    <IntegrationImageUrl>~/Content/VerticalGrid.png</IntegrationImageUrl>
    <IntegrationDescription>
      A feature-rich grid component presenting data records as grid columns.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Vertical Grid Control">
      <BannerTitle>
        Vertical Grid control for ASP.NET AJAX
      </BannerTitle>

      <BannerText>
        The ASP.NET Vertical Grid (ASPxVerticalGrid) is a feature-rich grid component presenting data records as grid columns.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://youtu.be/0aNameC4FYc</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxVerticalGrid control
      </DescriptionTitle>
      <Description>
        <![CDATA[
            This website demonstrates some of the many features and capabilities available to you when using our ASP.NET vertical grid. These features include:
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
            <p>
              The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) is a feature-rich data presentation component that displays inverted tabular data. In contrast with the traditional grid, the Vertical Grid displays data records as grid columns and data fields as grid rows. The ASPxVerticalGrid control supports data editing and allows an end-user to sort and filter data against an unlimited number of data fields.
            </p>
            ]]>
      </Description>
      <KeyFeature Name="Data Sorting" DemoUrl="~/FilteringAndSorting/Sorting.aspx">
        <Description>
          <![CDATA[ASPxVerticalGrid makes it easy for end-users to sort data against an unlimited number of rows. When necessary, you can disable runtime sort options and handle all sort operations in code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Filtering" DemoUrl="~/FilteringAndSorting/HeaderFilter.aspx">
        <Description>
          <![CDATA[ASPxVerticalGrid provides multiple data filtering options, so you can address customer needs more effectively using the header filter or filter editor control. 
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Batch Editing" DemoUrl="~/Editing/BatchEditing.aspx">
        <Description>
          <![CDATA[ASPxVerticalGrid provides functionality that checks the data input by end-users to ensure that data is error-free. The data entered by an end-user in batch edit mode can be validated on the client before it is posted to a data source.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Category Rows" DemoUrl="~/GridRows/Categories.aspx">
        <Description>
          <![CDATA[DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) allows you to group rows in category rows. In this demo you can click a category row to expand or collapse it.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Total Summary" DemoUrl="~/DataShaping/TotalSummary.aspx">
        <Description>
          <![CDATA[The grid supports the usage of aggregate functions to display summarized information about columns within the ASPxVerticalGrid (e.g., the number of records or the maximum value across all columns in a dataset).
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Export" DemoUrl="~/Exporting/Exporting.aspx">
        <Description>
          <![CDATA[The grid's content can be exported to many popular formats (with the same layout as it appears on-screen), including RTF, PDF, XLSX and XLS.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="DataShaping" Title="Data Binding and Summaries">
      <Keywords>amount, total, data, bind</Keywords>
      <Demo Key="LargeDatabase" Title="Large Database (Server Mode)" SeoTitle="Large Database (Server Mode)" >
        <Description>
          <![CDATA[
          <p>
The DevExpress EntityServerModeDataSource component improves performance when binding the DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) to a large data set. In this mode, only small portions of the data are loaded into the ASPxVerticalGrid on demand, and all required data processing (such as sorting) is performed on the data server. This technique significantly reduces the application's response time.
</p>
<p>
Switch between the DevExpress data source (EntityServerModeDataSource) and the standard .NET data source (EntityDataSource), and perform the same data operations in the ASPxVerticalGrid control to test application performance.
</p>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116351/aspnet-webforms-controls/vertical-grid/concepts/binding-to-data/binding-to-large-data-database-server-mode" Title="Data Binding to Large Data via EF" />
        <HighlightedDescription>
          The DevExpress EntityServerModeDataSource component improves performance when binding the DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) to a large data set, because only small portions of data are loaded on demand. This demo illustrates how easily and quickly the ASPxVerticalGrid control operates with a data source consisting of 300,000 records.
        </HighlightedDescription>
      </Demo>
      <Demo Key="TotalSummary" Title="Total Summary" SeoTitle="Total Summary Calculation" >
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) is a powerful data shaping control that includes a variety of data summary calculation options. Total summaries are aggregate function values calculated against all columns within ASPxVerticalGrid, and displayed in the summary panel, provided that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridSettings.ShowSummaryPanel">Settings.ShowSummaryPanel</helplink> property is set to true.
</p>

<p>
ASPxVerticalGrid stores its total summary items, which are instances of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridSummaryItem">ASPxVerticalGridSummaryItem</helplink> class, in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.TotalSummary"TotalSummary></helplink> collection.
Built-in aggregate functions include: Min, Max, Avg, Sum and Count.
</p>

<p>
In this demo, the <b>Total</b> grid row is declared as unbound by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridDataRow.UnboundType">UnboundType</helplink> property to <b>Decimal</b>. The column's cell values are calculated by using the expression specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridDataRow.UnboundExpression">UnboundExpression</helplink> property. 	
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="FilteringAndSorting" Title="Filtering and Sorting">
      <Keywords>filtercontrol, filters, sorting</Keywords>
      <Demo Key="SearchPanel" Title="Search Panel">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows you to filter data and highlight search results using its integrated Search Panel. To enable the easy-to-use Search Panel, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to true. The Search Panel filter criterion that is applied to grid data can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.SearchPanelFilter">SearchPanelFilter</helplink> property. You can customize Search Panel functionality using the following <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.SettingsSearchPanel">SettingsSearchPanel</helplink> property settings.
</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.AllowTextInputTimer">AllowTextInputTimer</helplink> - specifies whether a search panel filter is applied automatically or manually.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridSearchPanelSettings.RowNames">RowNames</helplink> - lists the names of rows to which the filter criteria will be applied.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Delay">Delay</helplink> - specifies the time interval between the initiation of search input and when filtering is applied.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.GroupOperator">GroupOperator</helplink> - specifies the logical operator used to combine conditions (multiple words separated by space characters).</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.HighlightResults">HighlightResults</helplink> - specifies whether a text matching the filter condition is highlighted within the grid.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowApplyButton">ShowApplyButton</helplink> - specifies whether the Apply button is displayed within the search panel.</p>
<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowClearButton">ShowClearButton</helplink> - specifies whether the Clear button is displayed within the search panel.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="HeaderFilter" Title="Header Filter" SeoTitle="Excel Style Data Filtering" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/HeaderFilter.png">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) provides a powerful data filtering mechanism that displays a dropdown list of all unique values within a row. Invoked by activating the row header’s filter button, end-users can filter the records stored in the underlying dataset by selecting the values displayed within the dropdown.
</p>
<p>
Additionally, end-users can filter items by entering text in the filter editor above the list. When typing a filter string, the header filter items list is automatically updated, so only the relevant items that match the filter string are displayed.
</p>
<p>
Filter dropdown buttons are disabled by default. To show filter buttons, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.ShowHeaderFilterButton">Settings.ShowHeaderFilterButton</helplink> property to true.
</p>
<p>
You can specify the header filter mode for a row using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property.
</p>
<ul>
<li>In <b>List</b> mode, the row's header filter dropdown displays a regular list of filter items, allowing end-users to select a single value. </li>
<li>In <b>CheckedList</b> mode, the row's header filter dropdown contains a check box list, allowing end-users to select multiple values for the filter criteria. </li>
<li><b>DateRangeCalendar</b> and <b>DateRangePicker</b> modes are available for date rows only. </li>
</ul>
<p>The ASPxVerticalGrid allows you to create custom filter values, define filter criteria and display these values within the row's filter dropdown. To do this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.HeaderFilterFillItems">HeaderFilterFillItems</helplink> event. In this demo, custom filter values are displayed within the 'Price' and 'House Size' rows' filter dropdowns.
</p>
                ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) provides a powerful data filtering mechanism. This demo illustrates the main features provided by the grid header filter.
        </HighlightedDescription>
      </Demo>
      <Demo Key="FilterBuilder" Title="Filter Control" SeoTitle="Built-in Filter Builder">
        <Description>
          <![CDATA[
          <p>
This demo illustrates how end-users can build complex filter criteria with an unlimited number of filter conditions and logical operators by using the built-in Filter Control within the DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>). You can activate the Filter Control by clicking the image or filter expression link displayed within the Filter Bar displayed at the bottom of the grid.
</p>

<p>
The following properties (available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.SettingsFilterControl">SettingsFilterControl</helplink> property) allow you to customize Filter Control functionality.
</p>
<ul>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ViewMode">ViewMode</helplink> property specifies how a filter expression is displayed in the Filter Control: either visual representation only, or visual representation with the text filter expression editor.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.AllowHierarchicalColumns">AllowHierarchicalColumns</helplink> property specifies if the Filter Control can display hierarchical rows. The max hierarchy depth level can be limited by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.MaxHierarchyDepth">MaxHierarchyDepth</helplink> property.</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ShowAllDataSourceColumns">ShowAllDataSourceColumns</helplink> property specifies which rows are visible in the Filter Control: all data source rows or only the rows that are visible in the grid.</li>
</ul>
        ]]>
        </Description>
      </Demo>
      <Demo Key="Sorting" Title="Sorting Data" SeoTitle="Sorting Data">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows you to sort data against an unlimited number of rows, without writing a single line of code. A row's current sort order is indicated by a sort glyph displayed on the right side of the row header. When a row is not sorted, the sort glyph is hidden.
</p>
<p>
In this demo, you can click a row header to initiate sorting or change row sort order (from ascending to descending, and vice versa). To sort data against multiple rows, click the required row headers while holding down the SHIFT key.
</p>
<p>
Sorting can be enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBehaviorSettings.AllowSort">SettingsBehavior.AllowSort</helplink> option to true.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Editing" Title="Editing" >
      <Keywords>crud, dataedit</Keywords>
      <Demo Key="BatchEditing" Title="Batch Editing and Updating" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/BatchEditing.png" HighlightedTitle="Batch Editing">
        <Keywords>batch updating, batch modification, multiple row editing</Keywords>
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) control allows end-users to edit and update multiple grid columns on the client side and send them to the server in a single request.
</p>

<p>
To enable the batch editing functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridEditingSettings.Mode">SettingsEditing.Mode</helplink> property to <b>Batch</b>, so the control data contained in a page can be edited using in-line editors. The modified cells are colored in green. Deleted records are highlighted with gray and display the <b>Recover</b> command item. To hide the deleted records from the view, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridBatchEditSettings.HighlightDeletedRecords">SettingsEditing.BatchEditSettings.HighlightDeletedRecords</helplink> property to <b>false</b>. All changes are maintained on the client side until the <b>Save</b> changes link is clicked. You can cancel all changes by clicking the <b>Cancel</b> changes link.
</p>

<p>
If a control contains modified data, it displays a confirm message before a callback or postback is performed.
</p>

<p>
In this demo, use the <b>Start edit action</b> combo box (“Click”, “DblClick”, or “FocusedCellClick”) to specify the action that should be used to begin editing data.
</p>
                ]]>
        </Description>
        <HighlightedDescription>
          The Batch edit mode speeds up the grid control's performance by eliminating excessive data updates. The main objective is to update the grid control only once - after all necessary changes have been made. In this demo, end-users can modify data on the client side and send it to the server in a single request.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="PagingAndScrolling" Title="Data Paging and Scrolling">
      <Demo Key="PagerSettings" Title="Pager Settings">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) automatically splits large content across multiple pages and provides a built-in pager, which enables end-users to navigate through data.
</p>
<p>
The embedded pager control can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.SettingsPager">SettingsPager</helplink> property.
</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.Position">Position</helplink> property controls the pager's position within ASPxVerticalGrid: at the control's top, bottom, or both. In this demo, use the 'Position' combo box to select the required location.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls page size item visibility. In this demo, use the 'Show PageSizeItem' check box to show and hide the item.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where a page size item is displayed: to the left or right of the pager. In this demo, use the 'PageSizeItem position' combo box to select the desired location.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">Summary.Visible</helplink> property controls the pager's summary visibility. In this demo, use the ' Show Summary' check box to show and hide this element.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of the pager's buttons that cannot be used at the moment, and are temporarily disabled.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of the pager's numeric buttons that navigate a user to the corresponding pages.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies whether or not page number separators are displayed.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Scrolling" Title="Scrolling">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows you to display more information in a smaller grid using vertical and horizontal scroll bars.</p>
<p>Grid width is determined by the number of columns displayed within a page, which is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridPagerSettings.PageSize">SettingsPager.PageSize</helplink> property whose default value is 10. Grid width depends on the number of visible columns. If there are too many columns within the vertical grid, you can enable horizontal scrolling by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property and define the scrollable area using the grid’s <b>Width</b> property. </p>
<p>To reduce the grid's height, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollableHeight">Settings.VerticalScrollableHeight</helplink> property.</p>
<p>The <b>VerticalScrollBarMode</b> and <b>HorizontalScrollBarMode</b> properties have the following values.</p>
<ul>
<li><b>Hidden</b> – the scrollbar is hidden.</li>
<li><b>Visible</b> – the scrollbar is visible.</li>
<li><b>Auto</b> – the scrollbar is automatically shown when the size of the content within the control exceeds the size of the control itself.</li>
</ul>
            ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="GridRows" Title="Grid Rows">
      <Demo Key="Categories" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Categories.png" Title="Categories">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows end-users to group rows in categories (category rows). A category row (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridCategoryRow">VerticalGridCategoryRow</helplink>) stores its rows within the Rows collection. Individual rows are represented by standard grid row objects (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridDataRow">VerticalGridDataRow</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridImageRow">VerticalGridImageRow</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridHyperLinkRow">VerticalGridHyperlinkRow</helplink> and others).
</p>

<p>
In this demo, you can click a category to expand or collapse it, provided that the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridBehaviorSettings.AllowRowExpanding">AllowRowExpanding</helplink> property is set to true (the “Allow expanding” check box is checked). To expand or collapse a category row programmatically, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridHierarchicalRow.Expanded">Expanded</helplink> property. Animation during row expansion can be enabled by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridBehaviorSettings.AllowExpandAnimation">AllowExpandAnimation</helplink> property (the “Enable row expanding animation” check box is checked). To indent a row from a category row, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGridSettings.ShowCategoryIndents">ShowCategoryIndents</helplink> property to true (the “Show category indents” check box is checked).  
</p>
            ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) allows you to group rows in categories (category rows). In this demo, you can click a category row to expand or collapse it.
        </HighlightedDescription>
      </Demo>
      <Demo Key="FixedRows" Title="Fixed Rows">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows you to anchor rows to the top edge. When fixed, rows are always displayed, and not scrolled vertically with the grid. This feature is active when vertical scrolling is enabled using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and the total height of the rows exceeds the grid's height. To fix a row, set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridRow.Fixed">Fixed</helplink> property value to True. Non-fixed rows (whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridRow.Fixed">Fixed</helplink> property is set to False) cannot be positioned before fixed rows.
</p>
            ]]>
        </Description>
        <SourceFile>~/Scripts/FixedRowsOffset.js</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Selection" Title="Selection">
      <Demo Key="Selection" Title="Selection" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Selection.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) provides the capability to allow end-users to select columns using checkboxes. To do this, add a command row to the ASPxVerticalGrid and set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridCommandRow.ShowSelectCheckbox">ShowSelectCheckBox</helplink> property to ‘true’. The row will display check boxes within its cells. End-users can check or uncheck these check boxes to select or deselect the corresponding columns.
</p>
<p>
This demo illustrates how you can display a headphone’s model and price selected within the ASPxVerticalGrid in a list box. The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientVerticalGrid.SelectionChanged">SelectionChanged</helplink> event is handled to display the selected headphone’s model and price in the list box, and the total number of selected columns below the list box. Models and prices are obtained using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientVerticalGrid.GetSelectedFieldValues(fieldNames-onCallback)">GetSelectedFieldValues</helplink> function. The number of selected columns is returned by the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientVerticalGrid.GetSelectedRecordCount">GetSelectedRecordCount</helplink> client function.
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) allows end-users to select columns using checkboxes.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Appearance" Title="Appearance Customization">
      <Demo Key="ConditionalFormatting" Title="Conditional Formatting" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/ConditionalFormatting.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) supports conditional formatting, i.e., automatically applies cell formatting based on the specified rules. This feature helps end-users to quickly notice critical information, identify trends and exceptions, and compare data.
</p>
<p>
Formatting rules can be created at design time or programmatically. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.FormatConditions">FormatConditions</helplink> property provides an access to a collection of rules, which are represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridFormatConditionBase">GridFormatConditionBase</helplink> class descendants.
</p>
<p>
The style settings applied to grid cells can be exported together with data to various formats using our data aware export engine. Moreover, when we export data to Excel formats (XLS and XLSX), the format conditions are transformed to corresponding Excel conditional formatting rules. Therefore, you can manage the rules in Excel after export. 
</p>          
      ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Vertical Grid (ASPxVerticalGrid) supports Microsoft Excel inspired conditional formatting of individual cells. In this demo, grid data is highlighted by applying several formatting rules.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Customization" Title="Customization Tools">
      <Demo Key="Toolbar" Title="Toolbar">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access. 
</p>
<p>
The ASPxVerticalGrid stores toolbars (which are <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbar">VerticalGridToolbar</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.Toolbars">Toolbars</helplink> collection. You can add or remove toolbars, change their availability and position (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Visible">Visible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Enabled">Enabled</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink>), and populate them with toolbar items (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbarItem">VerticalGridToolbarItem</helplink> class instances) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbar.Items">Items</helplink> property. Toolbar items can trigger standard grid commands (that is, data item editing, deletion, creation, etc.) and any custom actions, if required. 
</p>
<ul>
<li>
<b>Standard Toolbar Items</b><br/>
To make a toolbar item execute a standard command, set the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbarItem.Command">Command</helplink> property to the desired command name listed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbarCommand">VerticalGridToolbarCommand</helplink> enumeration. A standard toolbar item automatically displays the command-related text and image (optional). Clicking a standard toolbar item executes the corresponding grid command.
</li>
<li>
<b>Custom Toolbar Items</b><br/>
If you need to perform a custom action, set a toolbar item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbarItem.Command">Command</helplink> property to the Custom value (the default setting), specify a custom command name through the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">Name</helplink> property and define item characteristics (such as text, image, etc.). Then handle the server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid.ToolbarItemClick">ToolbarItemClick</helplink> event or client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridBase.ToolbarItemClick">ToolbarItemClick</helplink> event (or both) to identify the triggered custom command by its name and execute the required action.
</li>
</ul>
<p> 
Note that toolbar items expose the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.VerticalGridToolbarItem.Items">Items</helplink> property allowing you to create hierarchies of nested toolbar items of unlimited depth.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <!--<DemoGroup Key="Adaptivity" Title="Adaptivity">
      <Keywords>Adaptivity, responsive, bootstrap</Keywords>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout">
        <Description>
          <![CDATA[
        ]]>
        </Description>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="Ellipsis" Title="Text Truncation with Ellipsis">
        <Description>
          <![CDATA[
      ]]>
        </Description>
      </Demo>
    </DemoGroup>-->

    <DemoGroup Key="Templates" Title="Templates">
      <Demo Key="DataCell" Title="Data Cell">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) provides a set of templates that allow you to create custom layouts for its visual elements.
</p>
<p>
This demo shows how you to  create a template to display cells within the 'Products' row. The template contains product names shown as tags.
</p>          
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Exporting" Title="Data Export" HighlightedTagNames="dx:ASPxVerticalGrid">
      <Keywords>export, data export</Keywords>
      <Demo Key="Exporting" Title="Exporting to Different Formats" SeoTitle="Exporting to PDF, RTF, DOCX, XLS (DataAware), XLSX (DataAware) formats">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) allows you to export data with ease. Data can be exported to a file or stream in the following formats: PDF, XLS, XLSX, RTF, DOCX.
</p>          
      ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility">
      <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Vertical Grid control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxVerticalGrid">ASPxVerticalGrid</helplink>) is designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, ASPxVerticalGrid implements the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for the control.
</p>
<p>
This demo illustrates how to make the ASPxVerticalGrid control more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridBase.AccessibilityCompliant">AccessibilityCompliant</helplink> property.
</p> 
<p>
Check ASPxVerticalGrid's accessibility level in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that ASPxVerticalGrid can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
    </DemoGroup>

  </DemoProduct>

  <DemoProduct Key="ASPxHtmlEditor" Url="ASPxHTMLEditorDemos" Title="DevExpress ASPxHtmlEditor" SeoTitle="ASP.NET AJAX HTML Editor" NavItemTitle="HTML Editor" OrderIndex="12" HighlightedTagNames="dx:ASPxHtmlEditor">
    <Keywords>htmleditor, office, texteditor, content editing</Keywords>
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxHtmlEditor_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/HtmlEditor.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX HTML Editor">
      <BannerTitle>
        HTML Editor Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Microsoft Word&#174; style WYSIWYG interface synchronized with HTML code editor, built using DevExpress ASP.NET controls
      </BannerText>
      <BannerImageUrl>~/Content/DemoIcons/intro-video.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=69qEHlHAj7Y</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxHtmlEditor Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxHtmlEditor Suite</b>. These features include:</p>
            ]]>
      </Description>
    </Intro>
    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> is a powerful HTML Text Editor for ASP.NET. Regardless of the solution you need to build – be it a blog editor, an email client or a simple application for exchanging formatted documents within your company - you can drop the control onto a form and have instant access to a text editor with an intuitive user interface that resembles Microsoft® Word (with similar toolbars and keyboard shortcuts).
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/products/net/controls/asp/htmleditor/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="http://www.youtube.com/watch?v=69qEHlHAj7Y" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/4024/aspnet-webforms-controls/html-editor" Title="Documentation" />
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <KeyFeature Name="Safe Markup Generation">
        <Description>
          <![CDATA[
             ASPxHtmlEditor automatically performs validation and is able to remove all potentially harmful code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Paste Formatting" DemoUrl="~/Features/PasteFormatting.aspx">
        <Description>
          <![CDATA[
             ASPxHtmlEditor provides the capability to automatically format the pasted HTML content. 
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Insert Media Content" DemoUrl="~/Features/InsertMediaContent.aspx">
        <Description>
          <![CDATA[
             Explorer-like tools help simplify the way in which end-users insert images, documents, flash, audio, video, and YouTube video files to editor content. 
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Tag Inspector" DemoUrl="~/Features/TagInspector.aspx">
        <Description>
          <![CDATA[
             The built-in tag inspector allows end-users to easily navigate through tag hierarchy and customize tag properties.
            ]]>
        </Description>
      </KeyFeature>
            <KeyFeature Name="Placeholders" DemoUrl="~/Features/Placeholders.aspx">
        <Description>
          <![CDATA[
             Placeholders allow end-users to create template documents, which then can be filled with required data, e.g., from a database.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Validation Support" DemoUrl="~/Features/Validation.aspx">
        <Description>
          <![CDATA[
             ASPxHtmlEditor allows you to provide custom HTML markup validation logic. In addition, you can enable powerful content validation, which can be performed both on the client and the server.
            ]]>
        </Description>
      </KeyFeature>
        <KeyFeature Name="Spell Checking" DemoUrl="~/Dialogs/SpellChecking.aspx">
          <Description>
            <![CDATA[
             ASPxHtmlEditor provides end-users with built-in spell-checking capabilities.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Import and Export" DemoUrl="~/Features/ImportExport.aspx">
          <Description>
            <![CDATA[
             With ASPxHtmlEditor, you can import and export editor content from/to various document formats including Rich Text (.rtf), Office Open XML (.docx), MIME HTML (.mht), Open Document (.odt), Plain Text (.txt) and Portable Document (.pdf).
            ]]>
          </Description>
        </KeyFeature>
    </Overview>
    <DemoGroup Key="Features" Title="Features">
      <Demo Key="General" Title="Html Editing" SeoTitle="Html Editing and Content Filtering" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/intro-html-editing.png">
        <Keywords>full, whole, head editing</Keywords>
        <Description>
          <![CDATA[
<p>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> is a rich-text WYSIWYG HTML editor for ASP.NET. Its intuitive user interface enables even inexperienced users to edit HTML page contents with ease. This demo describes several of the features available to you when using the ASPxHtmlEditor control.
</p>
<p>
The ASPxHtmlEditor control automatically performs validation, editing and filtering of the entered HTML code and is able to remove all potentially harmful code. The editor exposes several options, allowing you to control required automatic transformations.
</p>
<p><b>Content Filtering</b></p>
<p>
Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowScripts">AllowScripts</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowIFrames">AllowIFrames</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowFormElements">AllowFormElements</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowIdAttributes">AllowIdAttributes</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowStyleAttributes">AllowStyleAttributes</helplink> properties to control whether tags and attributes of certain predefined types – scripts, IFRAME, form elements, ID attributes, and style attributes respectively – are allowed within the editor's HTML code.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowedDocumentType">AllowedDocumentType</helplink> property specifies the document types that are allowed within the editor. The available options are: XHTML 1.0 Transitional, HTML 5, or both. HTML code entered into the editor's HTML View is automatically transformed according to the specified document type.
</p>
<p><b>Content Editing</b></p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.UpdateDeprecatedElements">UpdateDeprecatedElements</helplink> property specifies whether deprecated elements (such as u, s, strike, font, center) occurring within the editor's HTML markup should be replaced with their valid analogs. 
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.UpdateBoldItalic">UpdateBoldItalic</helplink> property specifies the necessity of converting the 'b' and 'i' elements into the 'strong' and 'em' elements respectively.
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.ResourcePathMode">ResourcePathMode</helplink> property specifies if resource paths should be changed to absolute, relative, or root relative.
</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorSettings.AllowCustomColorsInColorPickers">AllowCustomColorsInColorPickers</helplink> property specifies whether an end-user can specify a custom color in editor color buttons.</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorHtmlEditingSettings.EnterMode">EnterMode</helplink> property allows you to specify the editor's behavior when the ENTER key is pressed by an end-user – you can choose between a paragraph or line break rendering.
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowEditFullDocument">AllowEditFullDocument</helplink> property specifies if end-users can edit full document content or the body tag content only.
</p> 
                ]]>
        </Description>
              <HighlightedDescription>Easily edit rich text with the intuitive DevExpress ASP.NET HTML Editor (ASPxHtmlEditor). This demo illustrates the features of ASPxHtmlEditor.</HighlightedDescription>
      </Demo>
      <Demo Key="PasteFormatting" Title="Paste Formatting" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/intro-paste-formatting.png">
        <Description>
          <![CDATA[
         <p> The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) can automatically format pasted HTML content based on its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorHtmlEditingSettings.PasteMode">PasteMode</helplink> property - which can be set using one of the following values: </p>
<ul>
<li><b>SourceFormatting</b>: Formatting of pasted content is retained. </li>
<li><b>MergeFormatting</b>: Formatting of pasted content is mostly discarded. However, emphasis formatting, such as bold and italic text, is retained.</li>
<li><b>PlainText</b>: Formatting of pasted content and non-text elements (such as pictures or tables) is discarded.</li>
</ul> 

<p>End-users can change formatting of pasted HTML content using the buttons that appear in the top right corner of the design area once content is pasted. By default, this functionality is disabled. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorHtmlEditingSettings.EnablePasteOptions">EnablePasteOptions</helplink> property to <b>true</b> to enable it. </p>
<p>You can also format pasted HTML content in code using the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.BeforePaste">BeforePaste</helplink> event. To explore this functionality, review the <a href="../ClientSideAPI/ManualPasteFormatting.aspx">Manual Paste Formatting</a> demo. </p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) provides the capability to automatically format the pasted HTML content. This demo allows end-users to paste HTML content to the editor with predefined formatting, and then change the formatting for the pasted content dynamically. </HighlightedDescription>
      </Demo>
      <Demo Key="HtmlHighlighting" Title="Html Highlighting">
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) can display Html code as plain text (<b>Simple mode</b>), or using the Html code editor (<b>Advanced mode</b>) based on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.Mode">SettingsHtmlView.Mode</helplink> property value.  </p>
<p>In <b>Advanced</b> mode, you can use the following properties to control editor functionality.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.EnableAutoCompletion">EnableAutoCompletion</helplink> property controls the availability of an intellisense support.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.EnableTagAutoClosing">EnableTagAutoClosing</helplink> property specifies if a closing tag is added automatically when an end-user types an opening tag.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.HighlightActiveLine">HighlightActiveLine</helplink> property specifies if an active line is highlighted.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.HighlightMatchingTags">HighlightMatchingTags</helplink> property specifies if a tag is highlighted when end-user selects a matching tag.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.ShowCollapseTagButtons">ShowCollapseTagButtons</helplink> property controls the visibility of buttons, allowing end-users to collapse and expand tags.</p>
  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlViewSettings.ShowLineNumbers">ShowLineNumbers</helplink> property controls the line number visibility.</p>
          ]]>
        </Description>
              <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) provides end-users with an advanced Html code editor. This demo illustrates the editor’s functionality.</HighlightedDescription>
      </Demo>
      <Demo Key="BinaryImageAutoUpload" Title="Binary Image Auto Upload">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Html Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) provides end-users with the capability to save a dropped and pasted image on the server, and use its generated URL in an html instead of inserting this image as a base64 image. This functionality is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorSettings.AllowSaveBinaryImageToServer">ASPxHtmlEditorSettings.AllowSaveBinaryImageToServer</helplink> property that is disabled by default.</p>
                <p>In this demo, when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorSettings.AllowSaveBinaryImageToServer">ASPxHtmlEditorSettings.AllowSaveBinaryImageToServer</helplink> property is enabled, dropped and pasted images are uploaded to the Azure storage, whose settings are specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertImageDialogSettings.SettingsImageUpload">SettingsImageUpload</helplink> property.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="FullPageEditMode" Title="Full Page Edit Mode">
        <Keywords>full, whole, head editing</Keywords>
        <Description>
          <![CDATA[
                <p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor's</helplink> ability to create and edit a full html page.</p>
                <p>The enabled <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowEditFullDocument">AllowEditFullDocument</helplink> option allows the editor to edit content of the whole HTML tag instead of the BODY tag only.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="FullScreenMode" Title="Full-Screen Mode">
        <Keywords>Responsive, Adaptive</Keywords>
        <Description>
          <![CDATA[
                <p>This demo illustrates how to use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> with a complete set of toolbar commands in full-screen mode. The primary demo page provides two links you can use to open the HTML editor with a standard or ribbon toolbar. This behavior is controlled by the control’s <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ToolbarMode">ToolbarMode</helplink> property. </p>  
                <p>To load the ASPxHtmlEditor in full-screen mode programmatically, execute the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCommandConsts">ASPxClientCommandConsts</helplink><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCommandConsts">.</helplink><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCommandConsts">FULLSCREEN</helplink>_<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCommandConsts">COMMAND</helplink> client command on the control's Init event. An end-user can click the <b>Fullscreen</b> toolbar button or press F11 when the editor has focus to activate/deactivate the ASPxHtmlEditor's full-screen mode. </p>  
                <p>ASPxHtmlEditor can automatically rearrange the Menu toolbar content in response to browser window resizing using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorAdaptivitySettings.Enabled">SettingsAdaptivity.Enabled</helplink> property. In adaptive mode, when the browser window is resized, the editor can hide toolbar items. To control the item hiding order, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorToolbarItem.AdaptivePriority">HtmlEditorToolbarItem.AdaptivePriority</helplink> property. </p>
                ]]>
        </Description>
        <SourceFile>~/Features/FullScreenModeStandardUI.aspx</SourceFile>
        <SourceFile>~/Features/FullScreenModeRibbonUI.aspx</SourceFile>
        <SourceFile>~/Content/Demo/Css/CustomCss_Preview.css</SourceFile>
      </Demo>
      <Demo Key="Tables" Title="Tables">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>'s support for HTML table operations. 
                    The ASPxHtmlEditor allows end-users to create, customize, and delete tables and their elements by using a set of specific predefined commands. 
                    Within the ASPxHtmlEditor, these commands can be visually represented either by a separate toolbar or 
                    by using an individual toolbar button (of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarTableOperationsDropDownButton">ToolbarTableOperationsDropDownButton</helplink> type) that exposes a dropdown list of commands. 
                    Note that by default, a toolbar button of the ToolbarTableOperationsDropDownButton type belongs to a StandardToolbar1.
                </p>
                <p>
                    In this demo, click the corresponding radio button to select how HTML table operation commands are represented within the ASPxHtmlEditor.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Placeholders" Title="Placeholders (Mail Merge)" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/intro-placeholders.png">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) allows end-users to add placeholders to editor content. The placeholders can then be replaced with the required values.
</p>
<p>
The collection of placeholders available for end-users is accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Placeholders">Placeholders</helplink> property. End-users can type a placeholder in the text or use the <b>Insert Placeholder</b> dialog, which can be invoked using the <b>Insert Placeholder</b> toolbar button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarInsertPlaceholderDialogButton">ToolbarInsertPlaceholderDialogButton</helplink>). The <b>Insert Placeholder</b> dialog allows you to insert and change placeholders.
</p>
<p>
To replace placeholders with the required values, use the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.ReplacePlaceholders(html-placeholders)">ReplacePlaceholders</helplink> or server-side <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxhtmleditor.aspxhtmleditor.replaceplaceholders.overloads">ReplacePlaceholders</helplink> method.
</p>
<p>
In this demo, placeholder values are gotten from a database. You can modify a document template and preview the results for different persons (database records).
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) allows end-users to use placeholders in the editor content. In this demo, you can modify a document template and then preview the results with placeholder values gotten from a database.</HighlightedDescription>
      </Demo>
       <Demo Key="PasteProcessing" Title="Paste Processing" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/intro-paste-processing.png">
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) can process HTML content copied/pasted from another application (for example, Microsoft Word). </p>  <p>Use the following settings to format the pasted content:</p>  <ul>  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorSettings.AllowSaveBinaryImageToServer">AllowSaveBinaryImageToServer</helplink> - Specifies whether a pasted image is saved to the      server and its generated URL used in HTML, or if it is processed as a      base64 image. </li>  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.ProcessRtfContentPastingOnServer">ProcessRtfContentPastingOnServer</helplink> - Specifies whether to process the copied/cut RTF      content on the server side. Using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.RtfContentPastingProcessed">RtfContentPastingProcessed</helplink> event allows processing the HTML obtained from the      copied/cut RTF before pasting it to the ASPxHtmlEditor. </li>  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributeFilterMode">StyleAttributeFilterMode</helplink> - Specifies the filtering mode for the Html Editor's      style attributes defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributes">StyleAttributes</helplink> property. </li>  <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributes">StyleAttributes</helplink> - Specifies the list of allowed/unallowed style      attributes depending on the filtering mode defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributeFilterMode">StyleAttributeFilterMode</helplink> property. </li> </ul>  <p>In this demo, use the options on the right to see how these options affect the pasted content.</p>
        ]]>
        </Description>
      <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) can process HTML content copied/pasted from another application (for example, Microsoft Word).</HighlightedDescription>
      </Demo>
      <Demo Key="ContentElementFiltering" Title="Content Element Filtering">
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) provides you with the ability to filter content elements. You can specify filter rules for tags, attributes, and style attributes.
</p>
<p>
For every element type, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> control provides a property listing filtered elements (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.Tags">Tags</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.Attributes">Attributes</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributes">StyleAttributes</helplink>), and a property specifying a filter mode (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.TagFilterMode">TagFilterMode</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.AttributeFilterMode">AttributeFilterMode</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorContentElementFiltering.StyleAttributeFilterMode">StyleAttributeFilterMode</helplink>).
</p>
<p>
The filter mode properties can be set to one of the following values. 
</p>
<ul>
<li><b>WhiteList</b> - the specified elements are allowed and will be maintained; other elements will be removed.</li>
<li><b>BlackList</b> - the specified elements are prohibited and will be removed; other elements will be maintained.</li>
</ul>
<p>
In this demo, you can use the editors above the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> control to customize the content filter settings, apply them, and see the result.
</p>
                ]]>
        </Description>
      <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) allows you to filter content elements, i.e., tags, attributes, and style attributes. In this demo, you can customize the content filter settings and see the result.</HighlightedDescription>
      </Demo>
      <Demo Key="Resizing" Title="Resizable Editor">
        <Keywords>fullscreen</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>'s ability to be resized and be maximized to full-screen by end-users.
                </p>
                <p>
                    If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorResizeSettings.AllowResize">AllowResize</helplink> property is enabled, end-users can dynamically change the ASPxHtmlEditor's size by using a 
                    size grip displayed at the bottom right corner. The resize limits can be defined via the 
                    <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorResizeSettings.MinHeight">MinHeight</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorResizeSettings.MaxHeight">MaxHeight</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorResizeSettings.MinWidth">MinWidth</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorResizeSettings.MaxWidth">MaxWidth</helplink> properties. 
                    The editor's actual size is preserved within the client state, and it's restored after application round trips (postbacks or callbacks).
                </p>
                <p>
                    The full-screen mode supported by the ASPxHtmlEditor makes work with the editor extremely comfortable for end-users. 
                    To activate/deactivate this mode, an end-user should click a specific toolbar button (Fullscreen) or press F11 when the editor has focus. 
                    In the full-screen mode, the ASPxHtmlEditor occupies the browser's entire client region.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Validation" Title="Validation">
        <Keywords>validate, validating</Keywords>
        <Description>
          <![CDATA[
                <p>
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> provides a built-in means to perform powerful validation of its content, both on the client and server. Different validation settings are available for customization through the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.SettingsValidation">SettingsValidation</helplink> property.
                </p>
                <p>
                    To define editor validation logic, the following easy-to-use methods are provided (which can be combined together, if required):
                </p>
                <ul>
                    <li>
                        The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorValidationSettings.RequiredField">SettingsValidation.RequiredField</helplink> property can be used to force an editor to require input, and give you the ability to display an error message if input is not received.
                    </li>
                    <li>
                        The editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Validation">Validation</helplink> event (client or server, or both) can be handled to setup custom editor validation. Review the code sample tabs within this demo, to learn how easy this really is.
                    </li>
                </ul>
                <p>
                    Client validation of the ASPxHtmlEditor can be triggered automatically via a click on an ASPxButton, whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxButton.CausesValidation">CausesValidation</helplink> property is set to true. You can also manually initiate the editor's client validation by using the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.Validate">Validate</helplink> client method or specific static client methods (such as the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateEditorsInContainer.static(container)">ASPxClientEdit.ValidateEditorsInContainer</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateEditorsInContainerById.static(containerId)">ASPxClientEdit.ValidateEditorsInContainerById</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientEdit.ValidateGroup.static(validationGroup)">ASPxClientEdit.ValidateGroup</helplink>).
                </p>
                <p>
                    The editor's server validation is always performed during processing of an external postback, if the editor's content has been changed. The server validation can also be initiated programmatically by using the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Validate">Validate</helplink> server method, or a specific static server method <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxedit.validateeditorsincontainer.overloads">ASPxEdit.ValidateEditorsInContainer</helplink>.
                </p>
                <p>
                    Additionally, you are allowed to validate the editor's content programmatically (when required), and indicate the validation result manually, by either setting the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.IsValid">IsValid</helplink> server property or using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.SetIsValid(isValid)">SetIsValid</helplink> client method.
                </p>
                <p>
                    When an editor fails validation logic, a specific error frame containing the error description can be displayed within the editor's View. The error frame's appearance is customized via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorValidationSettings.ErrorFrameStyle">SettingsValidation.ErrorFrameStyle</helplink> property. The error text can be specified by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorValidationSettings.ErrorText">SettingsValidation.ErrorText</helplink> property, in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Validation">Validation</helplink> event's handler, or via the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ErrorText">ErrorText</helplink> property (depending upon the validation method used).
                </p>
                <p>
                    This demo illustrates the built-in flexibility and efficiency of our validation engine, allowing you to easily implement different validation scenarios.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ImportExport" Title="Import/Export" SeoTitle="Import and Export"  HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/intro-import-export.png">
        <Keywords>importing, exporting, docx, rtf, mht, txt, pdf, odt, Office, Open, XML, MIME, html, Plain</Keywords>
        <Description>
          <![CDATA[
                <p>This demo shows how to import and export <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> contents.</p>
                <p>With ASPxHtmlEditor, you can import and export editor contents from/to various document formats including:</p>
                <ul>
                <li>Rich Text (.rtf)</li>
                <li>Office Open XML (.docx)</li>
                <li>MIME HTML (.mht)</li>
                <li>Open Document (.odt)</li>
                <li>Plain Text (.txt)</li>
                <li>Portable Document (.pdf). Available for export only.</li>
                </ul>
                <p>To import or export in code, call the editor's <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxhtmleditor.aspxhtmleditor.import.overloads">Import</helplink> or <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxhtmleditor.aspxhtmleditor.export.overloads">Export</helplink> method. You can allow end-users to export editor contents via a specially designed toolbar item (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarExportDropDownButton">ToolbarExportDropDownButton</helplink>) that provides all the required functionality out of the box. All you have to do is add it to the editor's toolbar and customize output document formats available for end-users via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarExportDropDownButton.Items">Items</helplink> collection.</p>
                ]]>
        </Description>
        <HighlightedDescription>The ASPxHtmlEditor allows importing and exporting editor content from/to various document formats (RTF, DOCX, MHT, ODT, TXT, PDF).</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Dialogs" Title="Dialogs">
      <Demo Key="InsertMediaContent" Title="Insert Media Content" >
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) allows you to insert media content using its built-in toolbar buttons, dialogs, and media file selectors. This demo illustrates how easily media files can be inserted into the content of the editor. </p>
            <p>The HTML Editor’s toolbar provides the following default buttons: </p>
            <ul>
            <li>Insert Flash button</li>
            <li>Insert Video button</li>
            <li>Insert Audio button</li>
            <li>Insert YouTube Video button</li>
            </ul>
            <p>Use these buttons to invoke the Insert Media dialog. Once activated, the Insert Media dialog allows end-users to manage content media via a point-and-click UI. </p>
            <p>To enable these features, activate the corresponding <b>Enabled</b> options via the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.SettingsFlashSelector">SettingsFlashSelector</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.SettingsVideoSelector">SettingsVideoSelector</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.SettingsAudioSelector">SettingsAudioSelector</helplink> option sets. </p>
            <p>To prohibit the use of media elements in the editor, use the following properties: </p>
            <ul>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowHTML5MediaElements">AllowHTML5MediaElements</helplink>: Specifies whether the editor's HTML markup can contain HTML5 media elements, i.e. <i>audio</i> and <i>video</i> elements.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowObjectAndEmbedElements">AllowObjectAndEmbedElements</helplink>: Specifies whether the editor's HTML markup can contain <i>object</i> and <i>embed</i> elements.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorHtmlEditingSettings.AllowYouTubeVideoIFrames">AllowYouTubeVideoIFrames</helplink>Specifies whether the editor's HTML markup can contain <i>iframe</i> element containing link to YouTube.</li>
            </ul>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET HTML Editor (ASPxHtmlEditor) provides built-in buttons, dialogs, and selectors that allow end-users to insert media files to editor content. In this demo, end-users can insert flash, audio, video, and YouTube video content to an HTML Editor.</HighlightedDescription>
      </Demo>
      <Demo Key="FindAndReplace" Title="Find and Replace">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) provides the 'Find and Replace' feature that allows your end-users to easily locate and modify text within Design and HTML views. The 'Find and Replace' functionality is implemented by using two elements: search panel and Find and Replace dialog.</p>
<p>The <b>Search Panel</b> allows end-users to search text and navigate through search results. To invoke the panel, press the CTRL+F keys. </p>
<p>The <b>Find and Replace dialog</b> allows end-users to search text, navigate through search results and replace them. To invoke the dialog, click the corresponding button in a toolbar or in the search panel, or press the CTRL+H keys.</p>

                ]]>
        </Description>
        <HighlightedDescription>ASP.NET HTML Editor provides the 'Find and Replace' feature that allows your end-users to easily locate and modify text within Design and HTML views. In this demo search results are displayed as clickable list items through which you can navigate.</HighlightedDescription>
      </Demo>
      <Demo Key="ImageSelector" Title="Image Selector" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/intro-image-selector.png">
        <Keywords>filemanager</Keywords>
        <Description>
          <![CDATA[
<p>
This demo shows how easily images can be inserted into the content of the editor with the built-in image selector, which allows end-users to manage content images using a point-and-click UI, rather than typing image web addresses.
</p>
<p>
The image selector is accessible in the <b>Insert Image</b> dialog within the <b>From the gallery</b> tab when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorFileManagerSettingsBase.Enabled">SettingsImageSelector.Enabled</helplink> property is set to <b>true</b>. 
</p>
<p>
Thanks to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> control integrated into the image selector all file/folder management, access control, and upload capabilities are available to you out-of-the-box. To enable these capabilities, turn on the corresponding options using the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertImageDialogSettings.SettingsImageSelector">SettingsImageSelector</helplink> option sets. In this demo, you can adjust some of these options using the settings displayed to the right of the editor.
</p>
<p>
<b>Settings Image Selector</b>
</p>
<ul>
<li>Enable Editing (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowMove">AllowMove</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowDelete">AllowDelete</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowRename">AllowRename</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowCreate">AllowCreate</helplink>) specifies the allowed file editing capabilities.</li>
<li>Enable Upload (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorFileManagerUploadSettings.Enabled">UploadSettings.Enabled</helplink>) specifies if the file upload is enabled for the document selector.</li>
<li>Show Toolbar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsToolbar.Visible">ToolbarSettings.Visible</helplink>) specifies the visibility of a toolbar.</li>
<li>Show Folders Area (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorFileManagerFoldersSettings.Visible">FoldersSettings.Visible</helplink>) specifies the visibility of the folder section.</li>
<li>Show Breadcrumbs (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsBreadcrumbs.Visible">BreadcrumbsSettings.Visible</helplink>) specifies the visibility of breadcrumbs.</li>
<li>File List View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">FileListSettings.View</helplink>) specifies the view of files (details or thumbnails) within the file section.</li>
</ul>
<p>
<b>Settings Image Dialog</b>
</p>
<ul><li>
Show More Options (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertImageDialogSettings.ShowMoreOptionsButton">ShowMoreOptionsButton</helplink>) specifies if the <b>More options</b> check box is displayed within the image dialog form. The check box controls the visibility of the section allowing end-users to customize image settings. 
</li></ul>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertMediaDialogSettingsBase.ShowStyleSettingsSection">ShowStyleSettingsSection</helplink> property is set to <b>true</b>. Therefore, the HTML Editor allows end-users to specify the CSS class for an image, using the image dialog. To select the CSS class for the current image, use the CSS class combo box in the <b>More options</b> section. The CSS styles listed in the combo box can be specified using the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertImageDialogSettings.CssClassItems">CssClassItems</helplink> property.
</p>
                ]]>
        </Description>
        <HighlightedDescription>The built-in Image Selector allows managing content images using a point-and-click UI as well as typing an image's web addresses directly.</HighlightedDescription>
      </Demo>
      <Demo Key="UploadProcessing" Title="Image Upload Processing" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/intro-image-upload-processing.png">
        <Keywords>upload, processing, watermark</Keywords>
        <Description>
          <![CDATA[
                <p>
The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) provides you with an ability to process an uploaded file before it is saved to the server. You can process image, audio, video, and flash files by handling the corresponding events: <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ImageFileSaving">ImageFileSaving</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.AudioFileSaving">AudioFileSaving</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.VideoFileSaving">VideoFileSaving</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.FlashFileSaving">FlashFileSaving</helplink>.
</p>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ImageFileSaving">ImageFileSaving</helplink> event and its arguments (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSavingEventArgs.OutputStream">e.OutputStream</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileSavingEventArgs.FileName">e.FileName</helplink>) are used to overlay an uploaded image with the watermark text and to resize a picture to fit the specified size limitation.
</p>
                ]]>
        </Description>
      <HighlightedDescription>This demo illustrates how to process (resize and add a watermark) an uploaded image before it is saved to the server.</HighlightedDescription>
      </Demo>
      <Demo Key="DocumentSelector" Title="Document Selector">
        <Keywords>filemanager</Keywords>
        <Description>
          <![CDATA[
<p>
This demo shows how easily hyperlinks to documents can be inserted into the content of the editor with a built-in <b>Select Document</b> dialog.  </p>
<p>
The <b>Select Document</b> dialog is a useful addition to the <b>Insert Link</b> and <b>Change Link</b> dialogs, allowing end-users, to manage content hyperlinks using a point-and-click UI, rather than typing URLs manually.
</p> 
<p>
Because the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFileManager">ASPxFileManager</helplink> control is integrated into the <b>Select Document</b> dialog, all file/folder management, access control, and upload capabilities are available to you out-of-the-box. To enable these capabilities, turn on the corresponding options using the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertLinkDialogSettings.SettingsDocumentSelector">SettingsDocumentSelector</helplink> option set. In this demo, you can adjust some of these options using the settings displayed to the right of the editor.
</p>
<p>
<b>Settings Document Selector</b>
</p>
<ul>
<li>Enable Editing (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowMove">AllowMove</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowDelete">AllowDelete</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowRename">AllowRename</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsEditing.AllowCreate">AllowCreate</helplink>) specifies the allowed file editing capabilities.</li>
<li>Enable Upload (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorFileManagerUploadSettings.Enabled">UploadSettings.Enabled</helplink>) specifies if the file upload is enabled for the document selector.</li>
<li>Show Toolbar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsToolbar.Visible">ToolbarSettings.Visible</helplink>) specifies the visibility of a toolbar.</li>
<li>Show Breadcrumbs (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsBreadcrumbs.Visible">BreadcrumbsSettings.Visible</helplink>) specifies the visibility of breadcrumbs.</li>
<li>File List View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FileManagerSettingsFileList.View">FileListSettings.View</helplink>) specifies the view of files (details or thumbnails) within the file section.</li>
</ul>
<p>
<b>Settings Document Dialog</b>
</p>
<ul>
<li>Show 'Open in new window' button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertLinkDialogSettings.ShowOpenInNewWindowButton">ShowOpenInNewWindowButton</helplink>) specifies the visibility of "Open in new window" check box.</li>
<li>Show the 'E-mail address' section (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorInsertLinkDialogSettings.ShowEmailAddressSection">ShowEmailAddressSection</helplink>) specifies the visibility of a section that allows you to enter the e-mail address.</li>
</ul>

                ]]>
        </Description>
      </Demo>
      <Demo Key="SpellChecking" Title="Spell Checking">
        <Keywords>spellchecker, spelling</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo shows how the spell-checking functionality provided by the 
                   <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpellChecker.ASPxSpellChecker">ASPxSpellChecker</helplink> control can be used within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>'s Design View to check the spelling of the editor's content. Spell checking is performed based upon the selected dictionary 
                    (<a href="http://lasr.cs.ucla.edu/geoff/ispell-dictionaries.html" target="_blank">ISpell</a> and 
                    <a href="http://lingucomponent.openoffice.org/" target="_blank">OpenOffice</a> dictionaries are supported), culture and grammar. 
                    These settings can be defined by using the ASPxHtmlEditor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.SettingsSpellChecker">SettingsSpellChecker</helplink> property.
                </p>
                <p>
                    To start spell checking, click the default Check Spelling button within the first standard toolbar.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CustomDialogs" Title="Custom Dialogs">
        <Description>
          <![CDATA[
                <p>This demo shows how to extend the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> with custom dialogs.</p>
                <p>In addition to built-in dialogs available within the ASPxHtmlEditor, you can use any number of custom dialogs, which can be easily added at both design and runtime. To add custom dialogs to the editor, use its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.CustomDialogs">CustomDialogs</helplink> collection. A custom dialog is represented by an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog">HtmlEditorCustomDialog</helplink> object, which provides the following settings.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.Caption">Caption</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.Name">Name</helplink>. Use these properties to specify a dialog's caption and name. The dialog's name is used for reference, as described below.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.FormPath">FormPath</helplink>. Use this property to provide a path to a user control representing a dialog's form. In the demo, a form contains the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> bound to the InsertTemplateData.xml file, which provides predefined content templates.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.OkButtonText">OkButtonText</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.OkButtonVisible">OkButtonVisible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.CancelButtonText">CancelButtonText</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorCustomDialog.CancelButtonVisible">CancelButtonVisible</helplink>. These options allow you to specify the visibility and caption of two standard dialog buttons. By default, these buttons are labeled "OK" and "Cancel". You can customize default button captions as necessary. In this demo, the Ok button's caption is changed to reflect the dialog's functionality.</li>
                </ul>
                <p>You can associate a custom dialog with a toolbar item, which when clicked, invokes the dialog. To accomplish this, add a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDialogButton">ToolbarCustomDialogButton</helplink> toolbar item to the ASPxHtmlEditor, and assign the dialog's name to the toolbar item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDialogButton.Name">Name</helplink> property.</p>
                <p>Click the Insert Template button to invoke the corresponding custom dialog in this demo. In the dialog, select an appropriate template and click the Insert button (or simply double click a template) to insert it in the editor. You may switch off the dialog's "Overwrite content" option to preserve the current content when inserting templates.</p>
                <p>The ASPxHtmlEditor provides you with events that allow you to respond to end-user interactions with custom dialogs and dialog button clicks on the client side.</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogOpened">CustomDialogOpened</helplink>. You can handle this event to initialize a custom dialog. In the demo, the OnCustomDialogOpened JavaScript function represents the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogOpened">CustomDialogOpened</helplink> event handler. This function calls the RestoreInsertTemplateFormDialogState function to focus the recently selected template in the dialog and restore the checked state of the "Overwrite content" option.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogClosing">CustomDialogClosing</helplink>. You can handle this event to respond to closing a custom dialog (initiated via a click on a dialog button or the header's close button). To identify a dialog and an element being clicked, use the event parameter's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorCustomDialogEventArgs.name">name</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.status">status</helplink> properties. To prevent default processing on closing a dialog, assign true to the event parameter's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorCustomDialogClosingEventArgs.handled">handled</helplink> property. In the demo, the OnCustomDialogClosing JavaScript function represents the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogClosing">CustomDialogClosing</helplink> event handler. This function retrieves the selected template's text when the Insert dialog button is clicked (it's the Ok dialog button labeled "Insert"), and closes the dialog via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogComplete.static(status-data)">ASPxClientHtmlEditor.CustomDialogComplete</helplink> method call. Since the dialog is closed programmatically, the function prevents the default closing of the dialog. Note that you can also double click a template to select it and close the dialog. This is accomplished by handling the RowDblClick client event of the ASPxGridView located in the dialog (see the OnGridRowDblClick function).</li> 
                    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogClosed">CustomDialogClosed</helplink>. Handle this event to perform specific actions, based on the dialog button that has been clicked or any other suitable condition. In this demo, the OnCustomDialogClosed JavaScript function represents the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomDialogClosed">CustomDialogClosed</helplink> event handler. This function inserts the selected template's text in the editor in response to clicking the dialog's Insert button or double-clicking the template. Also, this function calls the SaveInsertTemplateFormDialogState function to store the dialog's selected template and the checked state of the "Overwrite content" option for future use.</li>
                </ul>
                <p>This demo also demonstrates how to define the keyboard shortcut (Ctrl+Shift+I) used to open a custom dialog by creating a corresponding item within the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Shortcuts">Shortcuts</helplink> collection.</p>
                ]]>
        </Description>
        <HighlightedDescription>Easily add custom dialogs to the DevExpress ASP.NET HTML Editor (ASPxHtmlEditor). This demo illustrates a custom dialog associated with a toolbar item in the ASPxHtmlEditor.</HighlightedDescription>
        <SourceFile>~/Dialogs/InsertTemplateForm.ascx</SourceFile>
        <SourceFile>~/Scripts/InsertTemplateForm.js</SourceFile>
        <SourceFile>~/App_Data/InsertTemplateData.xml</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ToolbarsAndUI" Title="Toolbars and UI">
      <Demo Key="ContextMenu" Title="Context Menu">
        <Keywords>rightclick</Keywords>
        <Description>
          <![CDATA[
		<p>An <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> context menu is a popup menu, displayed when an end-user right-clicks the content within the editor. You can select the context menu type that you wish to be displayed for end-users: a browser's context menu (for IE, Opera, etc.) that provides commands specific to this browser, or the editor's menu that provides common (Cut, Copy, Paste, Select All) and context-specific  (Modify Table, Change Image, etc.) operations. It is also possible to disable the context menu.</p>
		<p>By default, ASPxHtmlEditor provides a set of context menu items. You can customize the default items or add your custom items. Additionally a context menu content can be easily customizable at run time by changing an items' visibility. Visibility of default items is switched based on the currently selected element  (text, image, table, etc.) automatically.</p>
		<p>In this demo three custom context menu items are added to the default item collection. The custom item is shown provided that an image is selected. </p>
                ]]>
        </Description>
        <SourceFile>~/Scripts/ContextMenu.js</SourceFile>
      </Demo>
      <Demo Key="CustomToolbars" Title="Custom Toolbars">
        <Keywords>customization</Keywords>
        <Description>
          <![CDATA[
                <p>
                    This demo shows how to programmatically create a custom toolbar with a set of specific commands and display it instead of the editor's default toolbars. 
                    This can also be achieved at design time with the help of the editor's easy-to-use toolbar designer.
                </p>
                <p>
                    Select an item from the dropdown list to specify a toolbar displayed within the editor.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ExternalToolbar" Title="External Ribbon">
        <Description>
          <![CDATA[
	<p>The DevExpress ASP.NET HTML Editor <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> provides the capability to utilize an external <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control as a toolbar. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ToolbarMode">ToolbarMode</helplink> property to <b>ExternalRibbon</b>. The ribbon control used by the editor can be specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.AssociatedRibbonID">AssociatedRibbonID</helplink> property.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="RibbonContextTabs" Title="Ribbon Context Tabs">
        <Description>
          <![CDATA[
		        <p>A context tab is a hidden ribbon tab that is displayed when a corresponding element (such as an image or a table) is selected. One element can correspond to several context tabs. Therefore, the tabs are combined into categories. The collection of categories is accessible by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.RibbonContextTabCategories">RibbonContextTabCategories</helplink> property.</p> 
<p>By default, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> provides a <b>Layout</b> context tab that contains table-related commands and is displayed when a selection is in a table.</p>
<p>You can create custom context tabs and manually change tab visibility based on a selected element using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.SetRibbonContextTabCategoryVisible(categoryName-active)">SetRibbonContextTabCategoryVisible</helplink> method.</p>
<p>In this demo, a default <b>Layout</b> and custom <b>Format</b> tabs are provided for <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>.</p>

                ]]>
        </Description>
        <SourceFile>~/Scripts/RibbonContextTabs.js</SourceFile>
      </Demo>
      <Demo Key="TagInspector" Title="Tag Inspector">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) provides a built-in tag inspector that allows end-users to easily navigate through tag hierarchy, remove tags, and customize tag properties.
</p>
<p>
By default, the tag inspector is hidden; set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorSettings.ShowTagInspector">ShowTagInspector</helplink> property to <b>true</b> to display it. Tag inspector style settings can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.StylesTagInspector">StylesTagInspector</helplink> property.
</p>
                ]]>
        </Description>
        <HighlightedDescription>A tag inspector is an element that allows end-users to easily navigate through tag hierarchy and customize tag properties. This demo illustrates the tag inspector functionality.</HighlightedDescription>
      </Demo>
      <Demo Key="ToolbarMode" Title="Toolbar Mode">
        <Keywords>ribbon toolbar</Keywords>
        <Description>
          <![CDATA[
<p>This demo illustrates the DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) control's ability to support either a menu toolbar or a ribbon toolbar element.</p>  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.ToolbarMode">ToolbarMode</helplink> property specifies the type of the toolbar. This property can be set to the following values.</p>  <ul>  <li><b>Menu</b> – the toolbar for the HTML Editor is rendered as a      menu. The menu toolbars can be customized via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Toolbars">Toolbars</helplink>      collection. </li>  <li><b>Ribbon</b> – the toolbar for the HTML Editor is rendered as a      ribbon. The ribbon tabs can be customized via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.RibbonTabs">RibbonTabs</helplink>      collection. </li>  <li><b>OneLine</b> <b>Ribbon</b> –      the toolbar for the HTML Editor is rendered as a ribbon that displays all      items in an active tab in one line. </li>  <li><b>None</b> – the HTML Editor does not have a toolbar. </li>  <li><b>ExternalRibbon</b> – the HTML Editor uses an external <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>      control as a toolbar. To try this toolbar mode, see the <helplink href="https://demos.devexpress.com/ASPxHtmlEditorDemos/ToolbarsAndUI/ExternalToolbar.aspx">External Ribbon</helplink> demo. </li> </ul>  <p>In this demo, use the <b>Toolbar Mode</b> combo box to specify the HTML Editor toolbar mode. Since the menu toolbar and ribbon tab collections are not customized in the markup, the default collections are rendered in the HTML Editor. </p>
]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="ToolbarItems" Title="Toolbar Items">
      <Demo Key="CustomCSS" Title="Custom CSS">
        <Keywords>formatting</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) control provides the <b>Custom CSS</b> feature, which enables your custom formatting (defined by custom CSS classes) to be accessed by end-users, and applied to the content selected within the editor. Using the Custom CSS feature, content titles, headers, text blocks, and other elements can be formatted using individual formatting styles, which are defined by the names of the associated CSS class and HTML tag.
</p>
<p>

A standard toolbar's <b>Apply CSS</b> drop-down editor (which is of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomCssEdit">ToolbarCustomCssEdit</helplink> type) allows you to list the custom CSS styles available to end-users. The editor's items can be manipulated via the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomCssEdit.Items">Items</helplink> property. You can specify the following attributes for each item:
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ListEditItem.Text">Text</helplink> – defines the item's display text. </li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomCssListEditItem.CssClass">CssClass</helplink> – specifies the name of the corresponding CSS class name. </li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomCssListEditItem.TagName">TagName</helplink> – specifies the name of the tag to wrap the content element to which the associated style is applied. </li>
</ul>
<p>
 The CSS files that contain custom CSS class definitions can be specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.CssFiles">CssFiles</helplink> property.
</p>
<p>
In this demo, custom styles are defined for content elements such as article title, headers, main content text, etc. To apply any of the predefined styles to the element selected within the Design View, choose the desired style item in the <b>Apply CSS</b> combo box in the toolbar. 
</p>
                ]]>
        </Description>
        <SourceFile>~/Content/Demo/Css/CustomCss.css</SourceFile>
      </Demo>
      <Demo Key="DropdownItemPicker" Title="Drop-down Item Picker" >
        <Description>
          <![CDATA[
                <p>This demo shows how to extend toolbars with dropdown item pickers.</p>
                <p>A dropdown item picker represents a button with a dropdown, containing a list of items available for selection. To select an item, users can hover the mouse pointer over a button or click it to open its dropdown list and then select an item within the list. In this demo, you can insert smilies and special symbols to the editor's content via corresponding dropdown item pickers.</p>
                <p>In ASPxHtmlEditor toolbars, a dropdown item picker is represented by a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker">ToolbarDropDownItemPicker</helplink> toolbar item. This item provides a number of options that allow you to customize the appearance and behavior of a dropdown item picker. The most important options include:</p>
                <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.Items">Items</helplink>. Use this collection to add items to a dropdown list.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ColumnCount">ColumnCount</helplink>. Use this property to specify the number of columns in which items are arranged within a dropdown list.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ItemHeight">ItemHeight</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ItemWidth">ItemWidth</helplink>. Use these properties to adjust the item size.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarItemBase.Image">Image</helplink> property set. Allows you to define images to be displayed within the ToolbarDropDownItemPicker toolbar item.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ImagePosition">ImagePosition</helplink>. You can display a caption and/or an image within a list item. The element to display is determined automatically, based upon a list item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomItem.Text">Text</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.Url">Image.Url</helplink> property values. To customize a list item's image alignment, use an item picker's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ImagePosition">ImagePosition</helplink> property. Also, a list item can be assigned a tooltip and value via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarItemBase.ToolTip">ToolTip</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomItem.Value">Value</helplink> properties, respectively.</li>
                <li>
                <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.ClickMode">ClickMode</helplink>. Use this property to specify the response to clicks on the ToolbarDropDownItemPicker toolbar item. The following options are available.</p>
                <ul>
                <li>ShowDropDown. Determines that a click on an item picker invokes a dropdown list with the available options.</li>
                <li>ExecuteAction. Specifies that a click on an item picker executes a command associated with it via its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.CommandName">CommandName</helplink> property, and implemented using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CommandExecuted">CommandExecuted</helplink> event.</li>
                <li>ExecuteSelectedItemAction. This value is used by default. It specifies that a click on an item picker executes an action associated with an item being currently selected within a dropdown list. In this mode, a toolbar button displays the recently selected item's image or caption (see the Insert Smiley item picker). This allows users to select this item by clicking the button, rather than opening a dropdown and selecting the item again. To specify the initially selected item, use an item picker's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.SelectedItemIndex">SelectedItemIndex</helplink> property.</li>
                </ul>
                </li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownItemPicker.CommandName">CommandName</helplink>. Use this property to associate a command name with an item picker. You can use this command name to respond to item picker clicks on the client side via the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler. In this demo, the OnCommandExecute JavaScript function is designated as the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler (see the demo's ASPX markup file). Each time a list item or dropdown button is clicked, the selected item's value (specified via its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomItem.Value">Value</helplink> property) is passed as a parameter to the OnCommandExecute function. Then, this function passes the value to the InsertSmiley or InsertSpecialSymbol function, which handles clicks within a corresponding item picker.</li>
                </ul>
                ]]>
        </Description>
        <HighlightedDescription>A Drop-down Item Picker is a button with a drop-down menu that allows an end-user to choose from a list of items. This demo illustrates how to add a Drop-down Item Picker to the toolbar of the DevExpress ASP.NET HTML Editor (ASPxHtmlEditor).</HighlightedDescription>
      </Demo>
      <Demo Key="DropdownMenu" Title="Drop-down Menu">
        <Description>
          <![CDATA[
                <p>This demo illustrates how to add a dropdown menu item to a toolbar.</p>
                <p>In <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> toolbars, a dropdown menu item represents a button that displays a dropdown menu when clicked. In this demo, you can insert the current date and time into the editor, by selecting an appropriate date/time format in a dropdown menu.</p>
                <p>An ASPxHtmlEditor dropdown menu is represented by a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu">ToolbarDropDownMenu</helplink> toolbar item. You can use <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu">ToolbarDropDownMenu</helplink> options to customize the appearance and behavior of a dropdown menu item, as required. The most important options are listed below:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu.Items">Items</helplink>. Use this collection to add items to a dropdown menu.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarItemBase.Image">Image</helplink>. Allows you to define an image to be displayed within the ToolbarDropDownMenu toolbar item.</li>
                    <li>
                        <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.ClickMode">ClickMode</helplink>. Use this property to specify the response to a click on the ToolbarDropDownMenu toolbar item. The following options are available:</p>
                        <ul>
                            <li>ShowDropDown. This value is used by default, and determines that a click on a dropdown button invokes a dropdown menu.</li>
                            <li>ExecuteAction. Specifies that a click on a dropdown button executes an action associated with the ToolbarDropDownMenu toolbar item (using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu.CommandName">CommandName</helplink> property and the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CommandExecuted">CommandExecuted</helplink> event).</li>
                            <li>ExecuteSelectedItemAction. Specifies that a click on a dropdown button executes an action associated with an item being currently selected within a dropdown menu. In this mode, a toolbar button displays the recently selected menu item's image or caption. This allows users to select this menu item by clicking the button, rather than opening a dropdown menu and selecting the item again. To specify the initially selected menu item, use a dropdown menu's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.SelectedItemIndex">SelectedItemIndex</helplink> property.</li>
                        </ul>
                    </li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu.CommandName">CommandName</helplink>. Use this property to associate a command name with a dropdown menu. You can use this command name to respond to menu item clicks on the client side, via the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler. In this demo, the OnCommandExecute JavaScript function is designated as the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler (see the demo's ASPX markup file). Each time a menu item or dropdown button is clicked, the selected menu item's value (the date/time format specified via the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomItem.Value">Value</helplink> property) is passed as a parameter to the OnCommandExecute function. Then, this function passes the value to the InsertDateTime function, which inserts a date/time value to the editor, in the specified format.</li>
                </ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ComboBox" Title="Combo Box" SeoTitle="Custom Combo Box Toolbar Item">
        <Description>
          <![CDATA[
                <p>This demo shows how to add a combo box item to a toolbar, and update its value in response to selection changes.</p>
                <p>As with a standard combo box, an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> combo box provides a dropdown list with a choice of items for selection. In this demo, you can apply a specific font size to the currently selected content, by picking an appropriate combo box item.</p>
                <p>An ASPxHtmlEditor combo box is represented by a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox">ToolbarComboBox</helplink> toolbar item. <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox">ToolbarComboBox</helplink> options allow you to customize the appearance and behavior of a combo box. The most important options include:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox.Items">Items</helplink>. Use this collection to add items to a dropdown list. </li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBoxBase.DefaultCaption">DefaultCaption</helplink>. Use this property to provide a text to be displayed within the edit box of a combo box when none of its items are selected.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox.CommandName">CommandName</helplink>. Use this property to associate a command name with a combo box. You can use this command name to respond to selecting combo box items on the client side via the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler. In this demo, the OnCustomCommand JavaScript function is designated as the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> client event handler (see the demo's ASPX markup file). Each time a combo box item is selected, its value (the font size specified via the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomItem.Value">Value</helplink> property) is passed as a parameter to the OnCustomCommand function. Then, this function passes the value to the SetFontSize function, which applies the font size to the selected content.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox.PropertiesComboBox">PropertiesComboBox</helplink>. This property set provides a number of appearance and behavior options that are common to all combo box editors.</li>
                </ul>
                <p>In addition to selecting font sizes, the combo box in the demo allows you to determine the font size that is applied to the currently selected content. If the applied font size matches one of the combo box's font sizes, the corresponding combo box item is automatically selected. If the selected content has a mix of font sizes, the combo box displays "Font Size" (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBoxBase.DefaultCaption">DefaultCaption</helplink> property value), as if none of its items are selected. The combo box value is updated in response to selection changes (see the demo's OnSelectionChanged> function representing a <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.SelectionChanged">SelectionChanged</helplink> client event handler).</p>]]>
        </Description>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>This demo shows how to bind toolbar items (a dropdown menu, dropdown item picker, and combo box) to data sources.</p>
                <p>In addition to populating these toolbar items with data directly in the ASPX markup, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> allows you to bind them to data sources via the following properties:</p>
                <ul>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.DataSourceID">DataSourceID</helplink>. Specifies the bound data source's name.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.TextField">TextField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.ValueField">ValueField</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.ImageUrlField">ImageUrlField</helplink>. Allow you to designate the data source's fields that provide captions, values, and image URLs for individual control items.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarCustomDropDownBase.TooltipField">TooltipField</helplink> (for dropdown menus and dropdown item pickers only). Use it to designate the bound data source's field providing item tooltips.</li>
                    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarDropDownMenu.BeginGroupField">BeginGroupField</helplink> (for dropdown menus only). Allows you to designate the field that contains Boolean values for a menu item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorToolbarItem.BeginGroup">BeginGroup</helplink> flag.</li>
                </ul>
                <p>In combo boxes, these properties are available via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ToolbarComboBox.PropertiesComboBox">PropertiesComboBox</helplink> property set.</p>
                <p>In this demo, the dropdown menu, dropdown item picker, and combo box toolbar items are bound to the MenuData.xml, ItemPickerData.xml, and ComboBoxData.xml files, which provide all the required fields for data binding.</p>]]>
        </Description>
        <SourceFile>~/App_Data/MenuData.xml</SourceFile>
        <SourceFile>~/App_Data/ItemPickerData.xml</SourceFile>
        <SourceFile>~/App_Data/ComboBoxData.xml</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ClientSideAPI" Title="Client-Side API">
      <Keywords>formatting, selection, selected</Keywords>
      <Demo Key="DialogCustomization" Title="Dialog Customization" SeoTitle="Customize and Extend Default Dialog">
        <Description>
          <![CDATA[            
            <p>
              This demo illustrates how to customize and extend default <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>'s dialogs using client-side API.
            </p>
            <p>
              In this demo, the <b>Insert Link</b> dialog is modified to let a user select a style for the link (simple link, external link, button link). To change the look and layout of the <b>Insert Link</b> dialog, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorDialogSettingsBase.TopAreaTemplate">TopAreaTemplate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.HtmlEditorDialogSettingsBase.BottomAreaTemplate">BottomAreaTemplate</helplink> templates. Use the <b>e.dialog</b> property on the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.DialogInitialized">DialogInitialized</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.DialogClosing">DialogClosing</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.DialogClosed">DialogClosed</helplink> client-side events to access standard dialog editors located in the dialog. For the <b>Insert Link</b> dialog, the <b>e.dialog</b> property value is of the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorLinkDialog">ASPxClientHtmlEditorInsertLinkDialog</helplink> type.
            </p>
            <p>
              Use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.DialogClosing">DialogClosing</helplink> client-side event to validate and change the dialog's command arguments before passing it to the command (for example <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCommandConsts">ASPxClientCommandConsts.INSERTLINK_COMMAND</helplink>). To change dialog command arguments, use the <b>e.parameter</b> property (for the <b>Insert Link</b> dialog, the <b>e.parameter</b> property value is of the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorInsertLinkCommandArguments">ASPxClientHtmlEditorInsertLinkCommandArguments</helplink> type). To prevent dialog closing, handle the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.DialogClosing">DialogClosing</helplink> cliet-side event and set <b>e.cancel = true</b>.
            </p>          
          ]]>
        </Description>
        <SourceFile>~/Content/Demo/Css/CustomLinks.css</SourceFile>
    </Demo>
      <Demo Key="ClientSideCommands" Title="Client-Side Commands">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how to execute custom commands within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> on the client.
                </p>
                <p>
                    A custom command is a sequence of calls to standard editor commands. 
                    Custom commands can be executed by handling the  editor's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.CustomCommand">CustomCommand</helplink> event. 
                    This event fires if a command name associated with the clicked toolbar item  doesn't coincide with any standard predefined editor command.
                </p>
                <p>
                    In this demo, two custom commands are implemented: one deletes the editor's content, and another inserts an e-mail template text. 
                    To initiate these commands, a custom toolbar with two items is created. Custom item command names are 'deleteall' and 'pasteemailtemplate', respectively. It is also demonstrated how to assign custom keyboard shortcuts to these commands by defining corresponding items within the editor's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.Shortcuts">Shortcuts</helplink> collection.
                </p>]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideSelection" Title="Client-Side Selection">
        <Description>
          <![CDATA[
                <p>This demo shows how to interact with the editor's selection using the client-side API.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> provides a comprehensive API, allowing you to access and modify the currently selected content at the client side. To access the selection, use the editor's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.GetSelection">GetSelection</helplink> client function, which returns an <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorSelection">ASPxClientHtmlEditorSelection</helplink> class instance. With methods of this class, you can perform your tasks on the selection. In this demo, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditorSelection.GetElements">ASPxClientHtmlEditorSelection.GetElements</helplink> client function is used to access the selection's HTML elements (XML DOM nodes). These elements are used then to retrieve references to text nodes and modify their values based on the case update method (see the demo's ChangeCase JavaScript function). You can select the case update method via the corresponding toolbar dropdown menu.</p>
                <p>Note that the selection API is available only in the Design View.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ManualPasteFormatting" Title="Manual Paste Formatting">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET HTML Editor (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink>) allows end-users to format pasted HTML content using buttons that appear in the top right corner of the design area once content is pasted. By default, this functionality is disabled. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditorHtmlEditingSettings.EnablePasteOptions">EnablePasteOptions</helplink> property to <b>true</b> to enable it. </p>
<p>Available formatting options include: </p>
<ul>
<li><b>SourceFormatting</b>: Formatting of pasted content is retained. </li>
<li><b>MergeFormatting</b>: MergeFormatting: Formatting of pasted content is mostly discarded. However, emphasis formatting, such as bold and italic text, is retained.</li>
<li><b>PlainText</b>: Formatting of pasted content and non-text elements (such as pictures or tables) is discarded.</li>
</ul>
<p>You can also format pasted HTML content in code using the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.BeforePaste">BeforePaste</helplink> event. In this demo, you can use the <b>Formatting Settings</b> check boxes to apply the corresponding formatting options to the pasted content in the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientHtmlEditor.BeforePaste">BeforePaste</helplink> event handler. </p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility">
      <Demo Key="RightToLeft" Title="Right to Left">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
				        <p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor">ASPxHtmlEditor</helplink> provides support for right-to-left languages like Arabic or Hebrew. So, you can completely rely on our editor when creating international web pages that include support for a right-to-left reading order and the mirroring of UI elements.</p>
				        <p>To switch ASPxHtmlEditor to a right-to-left representation, just enable a single property - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.RightToLeft">RightToLeft</helplink>. When this property is on, text in the editor flows from right to left, and the layout of the editor UI elements, as well as its built-in dialogs, is reversed.</p>
				        <p>If you need to apply right-to-left representation to all DevExpress web controls within your web application, you can enable our specifically provided configuration option within the web.config file, instead of switching the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHtmlEditor.ASPxHtmlEditor.RightToLeft">RightToLeft</helplink> property for each control individually. This is the <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> option that can be accessed within the settings group of our <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section.</p>
				        ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxperience.ImageAndDataNavigation" Url="ASPxImageAndDataNavigationDemos" Title="DevExpress ASPxperience" SeoTitle="ASP.NET AJAX Image and Data Browsing Controls" NavItemTitle="Image and Data Navigation" OrderIndex="18">
    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxperience_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Image_and_Data_Navigation.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Image and Data Navigation Controls">
      <BannerTitle>
        Image and Data Browsing Controls for ASP.NET
      </BannerTitle>
      <BannerText>
        A rich collection of multi-purpose image and data browsing tools designed to address a wide-range of business use scenarios
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=QQK11oQ_r24</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxperience Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxperience Suite</b>. 
                These features include: 
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress Image and Data Navigation Controls Suite is a collection of multi-purpose image and data browsing tools designed to address a wide-range of business uses.
          </p>
        ]]>
      </Description>
    </Overview>

    <DemoGroup Key="DataView" Title="Data View" SeoTitle="ASP.NET AJAX Data View Control" HighlightedTagNames="dx:ASPxDataView">
      <Keywords>read, database, </Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) control displays data using a highly customizable card or list based UI metaphor.
    </p><p>
    The markup fragment below demonstrates how to add the ASPxDataView control to your project, bind it to a data source, specify the item template, and set the control layout settings. In this demo, an XML file is used as the data source.

            </p>
            <code lang="html">
              <dx:ASPxDataView runat="server" DataSourceID="XmlDataSource1">
                  <SettingsTableLayout RowsPerPage="1" />
                  <ItemTemplate>
                      <dx:ASPxImage ID="imgCover" runat="server" 
                        ImageUrl='<%# Eval("PhotoUrl") %>' />
                  </ItemTemplate>
              </dx:ASPxDataView>
              <asp:XmlDataSource ID="XmlDataSource1" runat="server" 
                DataFile="~/App_Data/Contacts.xml" XPath="//Contact" />
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/DataView/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxDataView supports standard data binding, so it can obtain data from any object that implements the IEnumerable or IDataSource interface.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Built-in Paging and Record Navigation">
          <Description>
            <![CDATA[
             ASPxDataView provides data pagination using the built-in pager.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Endless Paging" DemoUrl="~/DataView/EndlessPaging.aspx">
          <Description>
            <![CDATA[
             ASPxDataView supports endless paging mode, which loads items on demand.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support">
          <Description>
            <![CDATA[
             The look of the items can be modified by using templates that define how an element will be rendered by the client browser.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Custom Callbacks" DemoUrl="~/DataView/CustomCallback.aspx">
          <Description>
            <![CDATA[
             Data view can perform round-trips to the server using AJAX-based callback technology.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates how to bind the DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) to a data source. It supports standard data binding with any object that implements the IEnumerable or IDataSource interface (e.g., SqlDataSource, XmlDataSource).
				</p>
                <p>
In this example, the ASPxDataView control is bound to the XmlDataSource component, which obtains data from an XML file with the following structure.
				</p>
                <p>
                    <code lang="xml">
<Contacts>
<Contact Name="..." Address="..." Phone ="..." PhotoUrl ="..." />
 ...
</Contacts>
                    </code>
                </p>
                <p>
 The appearance of the ASPxDataView control's data items is defined via an ItemTemplate type template. Controls that make up the template are bound to data using data binding expressions. (See the ASPX code.) 
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="EndlessPaging" Title="Endless Paging" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/DataViewEndlessPaging.png" HighlightedTitle="Data View - Endless Paging">
        <Keywords>endless, paging</Keywords>
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) control supports endless paging mode, which loads items on demand. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewPagerSettings.EndlessPagingMode">EndlessPagingMode</helplink> property to one of the following values.  
                </p>
            <ul>
            <li><b>OnClick</b> - items are loaded on a 'Show more items' link click.</li>
            <li><b>OnScroll</b> - items are loaded on page scroll.</li>
            </ul>
                <p>Note that in this example, we intentionally pause callback processing on the server side for half a second in order to make the loading panel visible during this time.</p>
				]]>
        </Description>
        <HighlightedDescription>The Endless Paging mode in the DevExpress Data View (ASPxDataView) allows data to load on demand based on user actions. In this demo, more items are loaded on demand when the end-user clicks the “Show more items…” link.</HighlightedDescription>
      </Demo>
      <Demo Key="SEOFriendly" Title="SEO Friendly Paging">
        <Keywords>pager, uri, url</Keywords>
        <Description>
          <![CDATA[
                <p>
                    A known issue is that search engines simply ignore pagers. When indexing a site, they only use the information contained within the first page. The reason for this is that pager links are usually not represented as hyperlinks to other pages. Instead, they simply respond to click events to raise data update callbacks.
                </p>
                <p>
					The DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) allows you to make your website SEO-friendly. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewPagerSettings.SEOFriendly">PagerSettings.SEOFriendly</helplink> property to accomplish this.
				</p>
                <p>
					If this property is set to <b>CrawlerOnly</b>, hyperlinks are rendered in the pager when a web-crawler is detected. Thus, search engines can index the entire content of a website that uses pagers. For all other visitors to the site, standard pager links are generated.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="CustomCallback" Title="Custom Callback">
        <Description>
          <![CDATA[
                <p>
					The DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) provides the ability to initiate a custom callback on demand via the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDataView.PerformCallback(parameter)">PerformCallback</helplink> method, and then perform any server-side processing required. In order to enable the use of callbacks, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataViewBase.EnableCallBacks">EnableCallBacks</helplink> property should be set to <b>true</b>. (It is set to true by default.) Typically, calling custom callbacks may be useful to solve the task of sorting or filtering data displayed by the ASPxDataView control.
				</p>
                <p>
					This demo shows how the ASPxDataView data can be sorted using custom callbacks. The data field to sort and the sort order can be selected using the two combo boxes on the top right. When the combo box value is changed, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDataView.PerformCallback(parameter)">PerformCallback</helplink> method of the ASPxDataView is called. Then, a specific SQL query is formed on the server side depending on the current values of the combo boxes.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout">
        <Keywords>Adaptivity, responsive, bootstrap</Keywords>
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) control allows creating adaptive layouts so that the content looks consistent across all devices. This functionality uses breakpoints at which the control shifts, resizes, or moves its items to a new line. It allows you to create, for example, a two-column layout for narrow screens or a three-column layout for wider screens.</p>
          <p>In this demo, resize the browser width to see how the Data View adjusts its content to different widths. The Data View items change their position and size at each breakpoint.</p>
          <p>The ASPxDataView stores breakpoints (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewBreakpoint">DataViewBreakpoint</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewBreakpointsLayoutSettings.Breakpoints">Breakpoints</helplink> collection. Breakpoints define the number of items in a row (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewBreakpoint.ItemsPerRow">ItemsPerRow</helplink>) and maximum width (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.MaxWidth">MaxWidth</helplink>) specifications for different screen sizes specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.DeviceSize">DeviceSize</helplink> property.</p>
                ]]>
        </Description>
        <SourceFile>~/DataView/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Headline" Title="Headline" SeoTitle="ASP.NET News Headline Control" HighlightedTagNames="dx:ASPxHeadline">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              DevExpress ASP.NET Headline (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHeadline">ASPxHeadline</helplink>) is used to organize/display news-like announcements on a web page. It is a constituent part of the ASP.NET News Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl">ASPxNewsControl</helplink>), but can be used independently when required. 
            </p>
            <p>
            The following code demonstrates how to add a Headline control to your project and manually populate it with data.
            </p>
            <code lang="Html">
              <dx:ASPxHeadLine HeaderText="Header text" Date="11.17.2006"
                ID="ASPxHeadline1" runat="server" TailText="Tail text"
                ContentText="Content text" NavigateUrl="javascript:void(0);">
              </dx:ASPxHeadLine>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Max Length">
          <Description>
            <![CDATA[
        The Headline control allows you to set the maximum length of displayed text.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Example" Title="Example" >
        <Keywords>newscontrol, newspaper, lenta</Keywords>
        <Description>
          <![CDATA[
                <p>
DevExpress ASP.NET Headline (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHeadline">ASPxHeadline</helplink>) is used to organize/display news-like announcements on a web page. It is a constituent part of the ASP.NET News Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl">ASPxNewsControl</helplink>), but can be used independently when required. 
				</p>
                <p>
ASPxHeadline exposes a broad set of properties that allow you to customize the appearance of its individual elements, giving you the power to refine the look and feel of the control as needed.
				</p>
                <p>
In this demo, the page contains a standard Repeater control, which obtains its items from an XML file through an XmlDataSource component. The XML file (WebSiteNewsRSS.xml) conforms to RSS 2.0 specifications.
				</p>
                <p>
Each Repeater control item is represented by a specific template (ItemTemplate type) that contains an instance of the ASPxHeadline control. The ASPxHeadline control's properties are bound to data with specific databinding expressions.
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ImageGallery" Title="Image Gallery" SeoTitle="ASP.NET AJAX Image Gallery Control" HighlightedTagNames="dx:ASPxImageGallery">
      <Keywords>image, gallery, photos, images</Keywords>
      <Overview Title="Overview" SeoTitle="Overview">
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control provides an elegant way to display and navigate a list of images (displayed as thumbnails), and allows images to be displayed in full-screen mode. 
</p><p>
The markup fragment below demonstrates how to add the Image Gallery control to your project, and specify a folder for control images and a folder for cached images. The control layout settings are defined to display one row with three columns on a page.

            </p>
            <code lang="html">
              <dx:ASPxImageGallery ID="ASPxImageGallery" runat="server">
                  <SettingsFolder ImageSourceFolder="~/Images/" 
                                  ImageCacheFolder="~/Thumb/" />
                  <SettingsTableLayout ColumnCount="3" RowsPerPage="1" />
              </dx:ASPxImageGallery>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Multiple Data-Binding Options" DemoUrl="~/ImageGallery/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxImageGallery supports data binding, the loading of images from a specified folder, and the manual creation of image items.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Automatic Image Thumbnails">
          <Description>
            <![CDATA[
             The control can create image thumbnails automatically, or you can create them beforehand to increase control performance.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Keyboard support">
          <Description>
            <![CDATA[
             ASPxImageGallery provides keyboard support for paging via the image gallery.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Endless Paging">
          <Description>
            <![CDATA[
             ASPxImageGallery supports endless paging mode, which loads items on demand.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/ImageGallery/Templates.aspx">
          <Description>
            <![CDATA[
             The look of the ASPxImageGallery control's default elements can be modified by using a template that defines how an element will be rendered by a client browser.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Description>
          <![CDATA[
<p>This demo illustrates how the DevExpress ASP.NET Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control can be populated with image information taken from a data source. The ASPxImageGallery control can be bound to a data source in a standard manner - using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property. While binding, the control automatically creates image items and retrieves their property values from the corresponding data items. The control implements specific properties that point to data fields containing the required data: </p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.FullscreenViewerTextField">FullscreenViewerTextField</helplink></li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.FullscreenViewerThumbnailUrlField">FullscreenViewerThumbnailUrlField</helplink></li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.ImageUrlField">ImageUrlField</helplink></li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.NavigateUrlField">NavigateUrlField</helplink></li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.TextField">TextField</helplink></li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.ThumbnailUrlField">ThumbnailUrlField</helplink></li>
</ul>
<p>In this demo, the image gallery control is bound to a standard XmlDataSource type data source by specifying the DataSourceID property. The FullscreenViewerThumbnailUrlField, ImageUrlField, TextField, and ThumbnailUrlField properties are used to get the corresponding property values from specified fields.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="FolderBinding" Title="Folder Binding" SeoTitle="Folder Binding" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/ImageGalleryFolderBinding.png" HighlightedTitle="Image Gallery - Folder Binding">
        <Keywords>Display Images from Directory</Keywords>
        <Description>
          <![CDATA[
<p>
This demo illustrates how to use the DevExpress ASP.NET Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control by specifying a single property. All you need to do to start working with our image gallery is to set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryFolderSettings.ImageSourceFolder">ImageSourceFolder</helplink> property to the required folder path, and the control is ready for use. Images are scaled and thumbnails are created automatically.
</p>
<p>
In this demo, the <b>Apply watermark</b> check box allows you to apply a watermark to the images by handling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.CustomImageProcessing">CustomImageProcessing</helplink> event.
        </p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress Image Gallery (ASPxImageGallery) control allows you to display images from a source folder simply by setting the ImageSourceFolder property to the folder path containing the images. In this demo, end-users can switch between different source folders at runtime using a combo box.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomImageViewer" Title="Custom Image Viewer" SeoTitle="Custom Image Viewer" HighlightedTagNames="dx:ASPxCallback dx:ASPxPopupControl">
        <Keywords>Image Viewer</Keywords>
        <Description>
          <![CDATA[
                This demo illustrates how to implement a custom image viewer. For this purpose, the built-in image viewer is disabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryFullscreenViewerSettings.Visible">SettingsFullscreenViewer.Visible</helplink> property to <b>false</b>. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientImageGallery.FullscreenViewerShowing">FullscreenViewerShowing</helplink> event is handled to display a modal popup window, which implements the image viewer functionality when a gallery image is clicked.
                ]]>
        </Description>
      </Demo>
      <Demo Key="BindingToBinaryData" Title="Binding to Binary Data" SeoTitle="Binding to Binary Data Column">
        <Keywords>BLOB</Keywords>
        <Description>
          <![CDATA[
<p>The DevExpress Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control has the ability to display binary images. In this demo, the image gallery is bound to an EntityDataSource object from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> property. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.ImageContentBytesField">ImageContentBytesField</helplink> property specifies the data source field from which binary images should be retrieved. The ASPxImageGallery control caches the images to the folder specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryFolderSettings.ImageCacheFolder">ImageCacheFolder</helplink> property.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates" SeoTitle="Using and Customizing Item Templates">
        <Keywords>template, customize, using</Keywords>
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control supports template technology, allowing you to customize a control's appearance and layout.</p>

<p>The look of the ASPxImageGallery control's default elements can be modified by using a specific template that defines how an element will be rendered by a client browser. This control allows you to create templates for the following elements.</p>
<ul>
<li>Item Text (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryItem.TextTemplate">ImageGalleryItem.TextTemplate</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.ItemTextTemplate">ASPxImageGallery.ItemTextTemplate</helplink>)</li>
<li>Fullscreen Viewer Item Text (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryItem.FullscreenViewerTextTemplate">ImageGalleryItem.FullscreenViewerTextTemplate</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.FullscreenViewerTextTemplate">ASPxImageGallery.FullscreenViewerTextTemplate</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.FullscreenViewerItemTextTemplate">ASPxImageGallery.FullscreenViewerItemTextTemplate</helplink>)</li>
</ul>
<p>You can apply templates for all identical elements within the control (using control level templates) or for a particular element (using item level templates). Each template can consist of a group of HTML controls. Each HTML control used in a template can be bound to the property value of the rendered item.</p>

<p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.ItemTextTemplate">ItemTextTemplate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery.FullscreenViewerItemTextTemplate">FullscreenViewerItemTextTemplate</helplink> properties are used to display rich text formatting.</p>
          ]]>
        </Description>
        <SourceFile>~/ImageGallery/css/Templates.css</SourceFile>
      </Demo>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout" HighlightedTagNames="dx:FullScreenHyperLink">
        <Keywords>Fullscreen, adaptivity, responsive, bootstrap</Keywords>
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Image Gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageGallery">ASPxImageGallery</helplink>) control allows creating adaptive layouts so that the control's content looks consistent across all devices. This functionality uses breakpoints at which the control shifts, resizes, or moves its items to a new line. It allows you to create, for example, a two-column layout for narrow screens or a three-column layout for wider screens.</p>
          <p>In this demo, resize the browser width to see how the Image Gallery adjusts its content to different widths. The Image Gallery items change their position and size at each breakpoint.</p>
          <p>The ASPxImageGallery stores breakpoints (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryBreakpoint">ImageGalleryBreakpoint</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageGalleryBreakpointsLayoutSettings.Breakpoints">Breakpoints</helplink> collection. Breakpoints define the number of items in a row (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.DataViewBreakpoint.ItemsPerRow">ItemsPerRow</helplink>) and maximum width (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.MaxWidth">MaxWidth</helplink>) specifications for different screen sizes specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.BreakpointsLayoutBreakpoint.DeviceSize">DeviceSize</helplink> property.</p>
                ]]>
        </Description>
        <SourceFile>~/ImageGallery/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>

    </DemoGroup>

    <DemoGroup Key="ImageZoom" Title="Image Zoom" SeoTitle="ASP.NET AJAX Image Zoom Control" HighlightedTagNames="dx:ASPxImageZoom">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Image Zoom (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom">ASPxImageZoom</helplink>) control provides you with the ability to display images in high-res detail. The ASPxImageZoom control combines two image zoom effects. Hovering over the image displays a zoomed area, a click on the image enlarges it in a full-screen popup.</p>
              <p>The markup fragment below demonstrates how to add ASPxImageZoom to your project and specify small and large images to be displayed in the control.</p>
              <code lang="html">
                <dx:ASPxImageZoom ID="ASPxImageZoom1" runat="server" 
                    ImageUrl="~/ImageZoom/images/small.jpg"
                    LargeImageUrl="~/ImageZoom/images/large.jpg">
                </dx:ASPxImageZoom>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Zoom Window Position and Size">
          <Description>
            <![CDATA[
               The Zoom Window can be displayed at any side (right, bottom, left, top) of the image. You can also change the size of the Zoomed Window. Note that in this case, the mouse box (the square area under the cursor) automatically changes its size as well.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Zoom Inside the Image">
          <Description>
            <![CDATA[
               The Zoom Window can be displayed within the image borders so that you can zoom inside the image. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Hint">
          <Description>
            <![CDATA[
               A hint can be displayed over the image to indicate that the image is zoomable. The hint can be text or an image or both.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Zoom and Expand Window Captions">
          <Description>
            <![CDATA[
               Provide individual text descriptions to be displayed within the control's Zoom and Expand Windows.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Image Zoom Navigator">
          <Description>
            <![CDATA[
             A data-bound navigation bar that allows you to display images within the assigned ImageZoom control. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedTitle="Image Zoom - Features">
        <Description>
          <![CDATA[
              <p>The DevExpress ASP.NET Image Zoom (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom">ASPxImageZoom</helplink>) control allows your end-users to view a magnified portion of a small image on mouse hover. The control consists of two parts: a small image (defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.ImageUrl">ImageUrl</helplink> property) and a Zoom Window that pops up when an end-user hovers the mouse pointer above the small image.</p>
              <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.ShowHint">ShowHint</helplink> - specifies whether or not hint text is displayed within the small image;</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.EnableExpandMode">EnableExpandMode</helplink> - enables the Expand Window, which displays a full-screen image when an end-user clicks the small image;</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomZoomModeSettings.ZoomWindowPosition">ZoomWindowPosition</helplink> - specifies the position of a Zoom Window;</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomZoomModeSettings.MouseBoxOpacityMode">MouseBoxOpacityMode</helplink> - specifies whether the opacity effect should be applied inside the mouse box or outside it;</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.LargeImageLoadMode">LargeImageLoadMode</helplink> - specifies the large image’s load mode.</li>
              </ul>
          ]]>
        </Description>
        <HighlightedDescription>The ASP.NET Image Zoom (ASPxImageZoom) control allows your end-users to view a magnified portion of a small image on mouse hover. This demo shows the primary features of the Image Zoom control.</HighlightedDescription>
      </Demo>
      <Demo Key="BindingToBinaryData" Title="Binding to Binary Data" SeoTitle="" HighlightedTagNames="dx:ASPxImageZoom" HighlightedIndex="3" HighlightedTitle="Image Zoom - Binding to Binary Data" HighlightedImageUrl="~/Content/DemoIcons/ImageZoomBindingToBinaryData.png">
        <Description>
          <![CDATA[
              <p>
The DevExpress Image Zoom (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom">ASPxImageZoom</helplink>) control has the ability to display images from a binary stream. The editor content (an array of bytes) that will be displayed in the preview image and zoom window is specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.ImageContentBytes">ImageContentBytes</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom.LargeImageContentBytes">LargeImageContentBytes</helplink> properties respectively.
</p>
<p>
The Image Zoom control caches binary images to the folder specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomAutoGeneratedImagesSettings.ImageCacheFolder">SettingsAutoGeneratedImages.ImageCacheFolder</helplink> property. The cached image sizes are specified by using the following properties.
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomAutoGeneratedImagesSettings.ImageWidth">ImageWidth</helplink> specifies the width of cached images that will be displayed in the preview image element.</li> 
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomAutoGeneratedImagesSettings.ImageHeight">ImageHeight</helplink> specifies the height of cached images that will be displayed in the preview image element.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomAutoGeneratedImagesSettings.LargeImageWidth">LargeImageWidth</helplink> specifies the width of cached images that will be displayed in the zoom window element.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageZoomAutoGeneratedImagesSettings.LargeImageHeight">LargeImageHeight</helplink> specifies the height of cached images that will be displayed in the zoom window element.</li>
</ul>
          ]]>
        </Description>
        <HighlightedDescription>This demo illustrates Image Zoom control capability to display images from a binary stream.</HighlightedDescription>
      </Demo>
      <Demo Key="ImageZoomNavigator" Title="Image Zoom Navigator" SeoTitle="" HighlightedTagNames="dx:ASPxImageZoomNavigator" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/ImageZoomNavigator.png">
        <Description>
          <![CDATA[
              <p>This demo illustrates how to associate the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoom">ASPxImageZoom</helplink> control with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoomNavigator">ASPxImageZoomNavigator</helplink> control. <b>ASPxImageZoomNavigator</b> is a data control that displays a set of thumbnails. Clicking a thumbnail opens a corresponding image within an associated <b>ASPxImageZoom</b> control. Small images and their large equivalents are defined via the ASPxImageZoomNavigator's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoomNavigator.Items">Items</helplink> collection.</p>
              <p>All options available in this demo are described below:</p>
              <ul>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoomNavigator.ActiveItemChangeAction">ActiveItemChangeAction</helplink> - specifies whether an end-user should hover a particular item or click it to activate the corresponding image within the <b>ASPxImageZoom</b> control;</li>
              <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageZoomNavigator.NavigationButtonVisibility">NavigationButtonVisibility</helplink> - specifies whether navigation buttons should always be visible or only when the width of all items exceeds the width of the <b>ASPxImageZoomNavigator</b> control.</li>
              </ul>
          ]]>
        </Description>
        <HighlightedDescription>The ASPxImageZoomNavigator is a data control that displays a set of thumbnails. Clicking a thumbnail opens a corresponding image within an associated ASPxImageZoom control.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ImageSlider" Title="Image Slider" SeoTitle="ASP.NET AJAX Image Slider Control" HighlightedTagNames="dx:ASPxImageSlider">
      <Keywords>image, slider, photos, photoslider</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
              The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) control provides an elegant way to display and navigate individual images within your desktop or mobile web application.
        </p><p>
      The markup fragment below demonstrates how to add ASPxImageSlider to your project and specify a folder that contains images displayed in the control.
            </p>
            <code lang="html">
              <dx:ASPxImageSlider ID="ASPxImageSlider" runat="server" 
                  ImageSourceFolder="~/Images/">
              </dx:ASPxImageSlider>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=QQK11oQ_r24" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Multiple Data-Binding Options" DemoUrl="~/ImageSlider/BindingToBinaryData.aspx">
          <Description>
            <![CDATA[
             ASPxImageSlider supports data binding, the loading of images from a specified folder, and the manual creation of image items.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Automatic Image Thumbnails">
          <Description>
            <![CDATA[
             ASPxImageSlider can create image thumbnails automatically, or you can create them beforehand manually to increase control performance.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Keyboard Support">
          <Description>
            <![CDATA[
             ASPxImageSlider provides keyboard support for paging via the image slider.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Horizontal and Vertical Orientations">
          <Description>
            <![CDATA[
             Images can be navigated in horizontal and vertical directions.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/ImageSlider/VideoGallery.aspx">
          <Description>
            <![CDATA[
             The look of the ASPxImageSlider control's default elements can be modified by using templates that define how an element will be rendered by a client browser.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Slide Show" DemoUrl="~/ImageSlider/SlideShow.aspx">
          <Description>
            <![CDATA[
             Image Slider has the built-in ability to display an image slide show.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) is a data control used to display images and navigate through them. The control supports three different approaches to data binding: binding to a data source, loading images from a specified folder, or creating image items manually. Image thumbnails are created automatically, or you can create them manually and improve the control's performance.
</p>
<p>
The ASPxImageSlider control consists of an image area and a navigation bar. Both elements can be fully customized from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.SettingsImageArea">SettingsImageArea</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.SettingsNavigationBar">SettingsNavigationBar</helplink> properties, respectively.
</p>
<p>
This demo allows you to set one of the predefined scenarios using the 'Predefined Scenarios' combo box. A scenario provides the following preset properties that you can further customize using the options below.
</p>
<p><b>Image Area Settings</b></p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.EnableLoopNavigation">EnableLoopNavigation</helplink> - specifies whether or not the navigation order in either direction repeats in a loop.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.ImageSizeMode">ImageSizeMode</helplink> - specifies how an image fits in the image area.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.AnimationType">AnimationType</helplink> - contains a value specifying the animation type used to change images. If the slide animation type is used, images can be changed using the swipe gesture.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.NavigationDirection">NavigationDirection</helplink> - specifies the direction of image sliding.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.ItemTextVisibility">ItemTextVisibility</helplink> - specifies the visibility mode of the item text area.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderImageAreaSettings.NavigationButtonVisibility">NavigationButtonsVisibility</helplink> - specifies the visibility mode of the image area navigation button.</li>
</ul>
<p><b>Navigation Bar Settings</b></p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.Position">Position</helplink> - specifies the position of the navigation bar relative to the image area.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.Mode">Mode</helplink> - specifies the appearance of navigation bar items: dots or image thumbnails.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.ThumbnailsModeNavigationButtonVisibility">ThumbnailsModeNavigationButtonVisibility</helplink> - specifies the visibility of navigation buttons within the navigation bar. This property is in effect for <b>Thumbnails</b> mode only.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.PagingMode">PagingMode</helplink> - specifies how the navigation bar scrolls when an end-user clicks page navigation buttons.</li>
</ul>
<p><b>Behavior Settings</b></p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettings.AllowMouseWheel">AllowMouseWheel</helplink> - specifies whether or not an end-user is able to slide images using the mouse wheel.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettings.EnablePagingGestures">EnablePagingGestures</helplink> - specifies whether or not an end-user can switch pages with a swipe gesture.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettings.EnablePagingByClick">EnablePagingByClick</helplink> - specifies whether or not a user can change images by clicking the left or right side of the image area.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettings.ImageLoadMode">ImageLoadMode</helplink> - specifies the image loading mode.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettings.ExtremeItemClickMode">ExtremeItemClickMode</helplink> - specifies the effect produced when an end-user clicks the leftmost or rightmost navigation bar item.</li>
</ul>
<p><b>Appearance</b></p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ShowNavigationBar">ShowNavigationBar</helplink> - specifies navigation bar visibility.</li>
</ul>          
]]>
        </Description>
      </Demo>
      <Demo Key="PhotoGallery" Title="Photo Gallery" SeoTitle="Photo Image Gallery">
        <Description>
          <![CDATA[
<p>
This demo illustrates how to create a photo gallery using the DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>).
</p>
<p>
Photos are displayed in the table using the ASP.NET Data View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataView">ASPxDataView</helplink>) control. Click a photo to open a popup window containing a photo gallery. The gallery is implemented using the ASPxImageSlider control. Users can view photos using special navigation buttons or by a swipe gesture within the image slider. Additionally, the demo shows how to provide key support for the gallery: press the <b>Space</b> bar to see the next photo, or press the <b>Escape</b> key to close the gallery and return to the data view table.
</p>
<p>
Additionally, this demo shows how to create a link to a specific photo. For this purpose, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientImageSlider.ActiveItemChanged">ActiveItemChanged</helplink> client-side event is handled. In the event handler, we add an anchor to the current image link, allowing you to get the URL to the current image from a browser address bar.
</p>
<p>Note that the image gallery functionality is built into the <a href="../ImageGallery/DataBinding.aspx">Image Gallery</a> control.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="FolderBinding" Title="Folder Binding" SeoTitle="Display Images from Folder">
        <Description>
          <![CDATA[
<p>
This demo illustrates how you can use the DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) control by specifying a single property. All you need to do to start working with our image slider is set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSliderBase.ImageSourceFolder">ImageSourceFolder</helplink> property to the required folder path, and the control is ready for use. Images are scaled and thumbnails are created automatically.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="BindingToBinaryData" Title="Binding to Binary Data" SeoTitle="Binding to Binary Data Column">
        <Keywords>BLOB</Keywords>
        <Description>
          <![CDATA[
<p>The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) control has the ability to display binary images. In this demo, the image slider is bound to an EntityDataSource object from the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> property. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ImageContentBytesField">ImageContentBytesField</helplink> property specifies the data source field from which binary images should be retrieved. The ASPxImageSlider control caches the images to the folder specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.SettingsAutoGeneratedImages">SettingsAutoGeneratedImages</helplink>.<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AutoGeneratedImagesSettingsBase.ImageCacheFolder">ImageCacheFolder</helplink> property.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="SlideShow" Title="Slide Show" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Slide-Show.png" HighlightedTitle="Image Slider - Slide Show">
        <Keywords>ad rotator, web banner, adrotator control</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) has the built-in ability to display an image slide show. This feature allows you to easily create an ad rotator or a web banner. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.SettingsSlideShow">SettingsSlideShow</helplink> property provides access to the following properties related to slide show functionality.
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderSlideShowSettings.AutoPlay">AutoPlay</helplink> – specifies whether or not the slide show is initially enabled.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderSlideShowSettings.Interval">Interval</helplink> – specifies the time interval between image changes.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderSlideShowSettings.PausePlayingWhenMouseOver">PausePlayingWhenMouseOver</helplink> – specifies whether or not the image playing stops when a mouse hovers over the control.</li> 
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderSlideShowSettings.PlayPauseButtonVisibility">PlayPauseButtonVisibility</helplink> – specifies the Play/Pause button visibility.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderSlideShowSettings.StopPlayingWhenPaging">StopPlayingWhenPaging</helplink> – specifies whether or not the image playing stops when an end-user changes images manually.</li>
</ul>
<p>In this demo, you can use the editors in the Slide Show Settings panel to play with the values of the properties above, so you can see them in action.</p>


                ]]>
        </Description>
        <HighlightedDescription>The touch-enabled DevExpress Image Slider (ASPxImageSlider) allows end-users to display and navigate images. ASPxImageSlider provides built-in slide show functionality. This demo illustrates the main settings of the slide show.</HighlightedDescription>
        <SourceFile>~/ImageSlider/css/SlideShow.css</SourceFile>
      </Demo>
      <Demo Key="NavigationBarMode" Title="Navigation Bar Mode">
        <Description>
          <![CDATA[
       <p>This demo illustrates how to use the image slider navigation bar as a standalone control. For this purpose, the image area is hidden by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ShowImageArea">ShowImageArea</helplink> property to false. Item thumbnails are customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ItemThumbnailTemplate">ItemThumbnailTemplate</helplink> property, to display an image with a caption and serve as a link. The navigation buttons are displayed outside the thumbnail area by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.ThumbnailsNavigationButtonPosition">ThumbnailsNavigationButtonPosition</helplink> property to <b>Outside</b>.</p>
<p>In this demo, you can use the combo box to change the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderNavigationBarSettings.VisibleItemsCount">VisibleItemCount</helplink> property value, which specifies the number of thumbnails displayed within the navigation bar.</p> 
                ]]>
        </Description>
        <SourceFile>~/ImageSlider/css/NavigationBarMode.css</SourceFile>
      </Demo>
      <Demo Key="VirtualPaging" Title="Virtual Paging">
        <Description>
          <![CDATA[
       <p>The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) supports the virtual paging mode that allows end-users to load images on demand when navigating using the pager.</p>
       <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettingsBase.EnableVirtualPaging">SettingsBehavior.EnableVirtualPaging</helplink> property is set to <b>true</b>, allowing the ASPxImageSlider to dynamically load requested items (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImageSliderBehaviorSettingsBase.VirtualPagingItemsPerRequest">VirtualPagingItemsPerRequest</helplink>) using callbacks when a pager's navigation button is clicked.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="VideoGallery" Title="Templates (Video Gallery)" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/ImageSliderVideoGallery.png">
        <Description>
          <![CDATA[
        <p>The DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) control supports template technology, allowing you to completely customize a control's appearance and layout.
        </p>
<p>
The look of the ASPxImageSlider control's default elements can be completely modified by creating a specific template that defines how an element will be rendered by a client browser. The ASPxImageSlider control allows you to create templates for the following elements: item, item text and item thumbnail. You can apply templates for all identical elements within the control (using control level templates) or for a particular element (using item level templates). Each template can consist of a group of HTML controls. Each HTML control used in a template can be bound to the property values of the rendered item.
</p>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ItemTemplate">ItemTemplate</helplink> property is used to display video files within the control’s image area. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider.ItemThumbnailTemplate">ItemThumbnailTemplate</helplink> property is used to display information about items: text and time.</p>
                ]]>
        </Description>
        <HighlightedDescription>Templates allow you to customize a control's appearance and layout completely. The look of the ASPxImageSlider control's default elements can be modified by creating a specific template that defines how a client browser renders an element.</HighlightedDescription>
        <SourceFile>~/ImageSlider/css/VideoGallery.css</SourceFile>
      </Demo>
      <Demo Key="FullscreenSample" Title="Fullscreen Sample" SeoTitle="Fullscreen Responsive Adaptive Layout" HighlightedTagNames="dx:FullScreenHyperLink">
        <Description>
          <![CDATA[
<p>
This demo illustrates how to use the DevExpress ASP.NET Image Slider (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxImageSlider">ASPxImageSlider</helplink>) control in full-screen mode when a control fills an entire page and can be resized along with the browser window. To enable this mode, set the control <b>Height</b> and <b>Width</b> properties to 100%. 
</p>
<code lang="Html">
<dx:ASPxImageSlider ID="imageSlider" runat="server" Width="100%" Height="100%" ... >
</code>
<p>A style of the <i>html</i>, <i>body</i>, and <i>form</i> elements, which contain the image slider, should be specified as shown below.</p>
<code lang="Css">
html, body, form {
    height: 100%;
    margin: 0;
}
</code>
<p>
Additionally, the demo illustrates the ability to customize the navigation dots and item text area using cascading style sheets.
</p>
                ]]>
        </Description>
        <SourceFile>~/ImageSlider/FullscreenSamplePage.aspx</SourceFile>
        <SourceFile>~/ImageSlider/css/FullscreenSample.css</SourceFile>
      </Demo>

    </DemoGroup>

    <DemoGroup Key="NewsControl" Title="News Control" SeoTitle="ASP.NET AJAX News Control" HighlightedTagNames="dx:ASPxNewsControl">
      <Overview Title="Overview" SeoTitle="Overview">
        <Description>
          <![CDATA[
            <p>
The DevExpress ASP.NET News Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl">ASPxNewsControl</helplink>) is a simple and straightforward tool for websites that require a news ticker control.
</p><p>
The markup fragment below demonstrates how to add the ASPxNewsControl to your project, bind it to a data source, and customize the item settings. In this demo, an XML file is used as the data source.

            </p>
            <code lang="html">
              <dx:ASPxNewsControl ID="ASPxNewsControl1" runat="server"
                NavigateUrlFormatString="javascript:void('{0}');" 
                DataSourceID="XmlDataSource1" RowPerPage="1"
                EnablePagingCallbackAnimation="true">
                  <ItemSettings ShowImageAsLink="True" MaxLength="100" 
                    TailText="Details"/>
              </dx:ASPxNewsControl>
              <asp:XmlDataSource ID="XmlDataSource1" runat="server" 
                DataFile="~/App_Data/OverviewRSS.xml" XPath="//item"
                TransformFile="~/App_Data/RSS.xslt" />
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/NewsControl/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxNewsControl can be bound to a data source.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Max Length">
          <Description>
            <![CDATA[
             ASPxNewsControl allows you to set the maximum length of the text displayed in an item.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding"  HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/NewsControlDataBinding.png" HighlightedTitle="News Control - Data Binding">
        <Description>
          <![CDATA[<p>
					The DevExpress ASP.NET News Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl">ASPxNewsControl</helplink>) control was primarily designed to display a list of news/product announcements on a web page.
				</p><p>
					In this demo, the ASPxNewsControl obtains its items from an XML file through an XmlDataSource component. The XML file (NewsControlRSS.xml) conforms to RSS 2.0 specifications. A click on any news item's tail text invokes a popup (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink>) window containing the full text of the news entry. The ASPxPopupControl is bound to the same data source as the ASPxNewsControl. The ASPxPopupControl's popup window is invoked via the client ShowWindow method, which is passed with the popup window's name as a parameter.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl.NavigateUrlFormatString">NavigateUrlFormatString</helplink> property of the ASPxNewsControl is set in a specific manner in order to define the desired URLs for tail text. (See the ASPX code.)
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.TailPosition">ItemSettings.TailPosition</helplink> property of the ASPxNewsControl is set to KeepWithLastWord. (See the ASPX code.)
				</p>]]>
        </Description>
        <HighlightedDescription>The DevExpress News Control (ASPxNewsControl) displays a list of text such as news and product announcements on a web page. In this demo, the news items are displayed from an XML file via an XmlDataSource component.</HighlightedDescription>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[<p>
					This demo shows the main features available in the DevExpress ASP.NET News Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl">ASPxNewsControl</helplink>). Use the controls in the panel on the right to change the values of the control's properties, and see the results in the ASPxNewsControl.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataViewBase.EnableCallBacks">EnableCallBacks</helplink> property controls whether callback or postback technology is used to manage round trips to the server when moving to another page within the ASPxNewsControl.
				</p><p>
					Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNewsControl.ShowBackToTop">ShowBackToTop</helplink> property to display a "BACK TO TOP" link after each news headline. When clicked, this link navigates the end-user to the top of the page.
				</p><p>The embedded pager control can be customized using the following settings:</p><ul><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.EllipsisMode">EllipsisMode</helplink> property specifies how an Ellipsis symbol(s) is displayed to indicate page numbers that are omitted. An Ellipsis symbol(s) can be displayed inside the range of pages (InsideNumeric), outside the range of pages (OutsideNumeric), or can be hidden (None).
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.Position">Position</helplink> property can be used to specify the pager's position (Bottom, Top, TopAndBottom) within the ASPxNewsControl.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of the pager buttons that are not used at the moment, and are temporarily disabled.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of the pager's numeric buttons that navigate a user to a corresponding page.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies whether separators that separate page numbers are displayed.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls page size item visibility. In this demo, use the <b>Show PageSizeItem</b> check box to show and hide the item.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where a page size item is displayed: on the left or right side of the pager. In this demo, use the <b>PageSizeItem position</b> combo box to select the required location.
					</li><li>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NewsControlPagerSettings.EndlessPagingMode">EndlessPagingMode</helplink> property controls whether or not the NewsControl should load news headlines on demand.
          </li></ul><p>
					The following common settings can be used to customize news headlines displayed by the ASPxNewsControl:
				</p><ul><li>
						A pair of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.DateHorizontalPosition">DateHorizontalPosition</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NewsItemSettings.DateVerticalPosition">DateVerticalPosition</helplink> properties specifies the date's position (horizontal and vertical, respectively) within news headlines.
					</li><li>
						The positions of the tail text and tail image within news headlines can be controlled by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.TailPosition">TailPosition</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.TailImagePosition">TailImagePosition</helplink> properties.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.ShowContentAsLink">ShowContentAsLink</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.ShowHeaderAsLink">ShowHeaderAsLink</helplink> properties specify whether the news text and header text should be displayed as a hyper link within news headlines.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.ShowContentInToolTip">ShowContentInToolTip</helplink> property controls whether or not a headline's tooltip displays the entire content when the headline is clipped.
					</li><li>
						The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.HeadlineSettings.MaxLength">MaxLength</helplink> property specifies the maximum length of a news headline's text.
					</li></ul>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Pager" Title="Pager" SeoTitle="ASP.NET Pager Control" HighlightedTagNames="dx:ASPxRoundPanel">
      <Keywords>paging, navigation</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
            <p>
             The DevExpress ASP.NET Pager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPager">ASPxPager</helplink>) control is used to implement page-mode navigation. It allows you to implement custom paging logic by handling a single event. A built-in page size selector allows end-users to dynamically change the number of data items (rows) displayed within a control.
</p><p>
The markup fragment below demonstrates how to add the pager control to your project and specify its base settings.

            </p>
            <code lang="html">
              <dx:ASPxPager ID="ASPxPager1" runat="server" 
                ItemCount="9" ItemsPerPage="1">
              </dx:ASPxPager>
            </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Custom Number Count">
          <Description>
            <![CDATA[
             ASPxPager allows you to specify the maximum number of page numbers displayed within a pager.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Custom Item Count">
          <Description>
            <![CDATA[
             ASPxPager provides the capability to specify the maximum number of items that each page displays.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="SEO Friendly Paging">
          <Description>
            <![CDATA[
             ASPxPager allows you to make your website SEO-friendly.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Example" Title="Example" >
        <Description>
          <![CDATA[<p>
					The ASP.NET Pager (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPager">ASPxPager</helplink>) control is used by other DevExpress ASP.NET components to implement page navigation. When used as a standalone control, it allows you to implement custom paging algorithms by handling its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPagerBase.PageIndexChanged">PageIndexChanged</helplink> event.
				</p><p>
					This demo illustrates how the ASPxPager control can be used to change the active View within the MultiView control.
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames="dx:ASPxDataView">
      <Demo Key="RightToLeft" Title="Right-to-Left Layout">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
<p>
DevExpress visual controls provide support for right-to-left languages such as Arabic and Hebrew. Thus, you can rely on our web controls when creating international web pages that include support for right-to-left reading order, and the mirroring of UI elements.
</p>

<p>
To switch a control to right-to-left representation, just enable a single property - RightToLeft. When this property is on, text flows from right to left in a control and the control itself is mirrored (the layout of its UI elements is reversed).
</p>

<p>
If you need to apply right-to-left display to all DevExpress web controls within your web application, you can enable a special <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> configuration option within the Web.config file, instead of switching the RightToLeft property for each control. This option can be accessed within the settings group in the <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section of the Web.config file.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxperience.MultiUseControls" Url="ASPxMultiUseControlsDemos" Title="DevExpress ASPxperience" SeoTitle="ASP.NET AJAX Multi-Use Site Controls" NavItemTitle="Multi-Use Site Controls" OrderIndex="23">
    <Keywords>useful, utils</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxperience_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/MultiUse.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Multi-Use Site Controls">
      <BannerTitle>
        Multi-Use Site Controls for ASP.NET
      </BannerTitle>
      <BannerText>
        A collection of multi-use Web Forms site controls and components including the Rating Control, the Round Panel, the Callback Panel (to update content dynamically via callbacks), and many more.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/user/DeveloperExpress</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxperience Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxperience Suite</b>. 
                These features include: 
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            A collection of versatile Web Forms site controls and components including the Rating Control, the Round Panel, the Callback Panel (to update content dynamically via callbacks), and many others allow you to extend your web project capabilities.
          </p>
        ]]>
      </Description>
    </Overview>
    
    <DemoGroup Key="Features" Title="Features" SeoTitle="ASP.NET Multi-Use Features" HighlightedTagNames="">
      <Keywords>features, icons</Keywords>
      <Demo Key="IconLibraryExplorer" Title="Icon Library Explorer">
        <Description>
          <![CDATA[
<p>

In this demo, you can see all icons that are available in our Icon Library.

To easily find the required image, you can filter them by image size or used collection or group data by columns. In addition, you can use the Search Panel to find an icon by its text. Then, copy the required icon ID from the "Full Icon ID" column and insert it to the IconID property in your project.

</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Callback" Title="Callback" SeoTitle="ASP.NET Callback Component" HighlightedTagNames="dx:ASPxCallback dx:ASPxCallbackPanel">
      <Keywords>ajax, request, asynchronously</Keywords>
      <Demo Key="Example" Title="Example" >
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Callback (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCallback">ASPxCallback</helplink>) is a non-visual control that allows you to asynchronously transfer information from server to client, when this information is needed on the client side.
</p>
<p>
This demo initially displays short news headlines. Detailed news descriptions can be loaded dynamically, without refreshing the entire web page. This effect is achieved by using the client and server events available in the ASPxCallback component.
</p>
<p>
First, when a news headline is clicked, the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCallback.PerformCallback(parameter)">PerformCallback</helplink> method of the ASPxCallback is called. This method is passed with an argument that contains the number of the corresponding news entry.
</p>
<p>
Next, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCallback.Callback">Callback</helplink> event is raised on the server during server-side processing of the callback. In the event's handler, the required news description is obtained and assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CallbackEventArgs.Result">Result</helplink> property of the event's argument.
</p>
<p>
Finally, when the response comes back to the client, the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCallback.CallbackComplete">CallbackComplete</helplink> event of the ASPxCallback component is raised, allowing the resulting description text to be displayed within the page.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="CallbackPanel" Title="Callback Panel" SeoTitle="ASP.NET AJAX Callback Panel Control" HighlightedTagNames="dx:ASPxCallback dx:ASPxCallbackPanel">
      <Keywords>iframe, panel, request</Keywords>
      <Demo Key="Example" Title="Example" SeoTitle="Update Panel Replacement" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/CallbackPanel.png" HighlightedTitle="Callback Panel - Example">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Callback Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCallbackPanel">ASPxCallbackPanel</helplink>) is a lightweight web control that allows you to dynamically update its content using callbacks, preventing undesirable entire page postbacks. You can initiate an update callback by calling the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCallbackPanel.PerformCallback(parameter)">PerformCallback</helplink> client method.
</p>
<p>
The ASPxCallbackPanel content remains visible while its callback is being processed on the server. During callback processing, the panel control can be covered with a customizable Loading Panel and Loading Div elements. The appearance and functionality of the Loading Panel can be defined using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CallbackPanelStyles.LoadingPanel">LoadingPanel</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCallbackPanel.SettingsLoadingPanel">SettingsLoadingPanel</helplink> properties. The Loading Div's style is customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CallbackPanelStyles.LoadingDiv">LoadingDiv</helplink> property. 
</p>
<p>
In this example, ASPxCallbackPanel is used to display detail information on an employee selected within a list box. When the selected item in the list box is changed, ASPxCallbackPanel's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCallbackPanel.PerformCallback(parameter)">PerformCallback</helplink> client method is called to initiate a callback to update the panel content. On the server side, the selected list item's value is used as an SQL SELECT query parameter's value, and as a result, ASPxCallbackPanel displays the requested information.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCallbackPanel.EnableCallbackAnimation">EnableCallbackAnimation</helplink> check box specifies whether a specific animation effect is used when a callback panel's content is updated using a callback. 
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Callback Panel (ASPxCallbackPanel) control allows you to partially update a web page without performing a full postback. ASPxCallbackPanel is useful for controls that do not have built-in callback functionality. This demo illustrates how it can be used to display detailed employee information that changes dynamically when clicking on a name in the employee list box.</HighlightedDescription>
      </Demo>
      <Demo Key="CustomJavaScriptProperties" Title="Custom JavaScript Properties" SeoTitle="Data Exchange on Callbacks">
        <Keywords>iframe, parameters</Keywords>
        <Description>
          <![CDATA[
                <p>
					All DevExpress web controls that expose publicly available client-side API now allow any server data to easily be passed to the client, and accessed as values of specifically declared control properties. For this purpose, a web control exposes the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanelBase.CustomJSProperties">CustomJSProperties</helplink> event, and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanelBase.JSProperties">JSProperties</helplink> property, each of which enables you to declare custom properties for the client control. You can specify these property values on the server side and then access them on the client, as you would do with built-in properties. 
				</p>
                <p>
					In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanelBase.CustomJSProperties">CustomJSProperties</helplink> event is used to pass paging information (such as the current page index and the total number of pages) from the server to the client side. This information is used on the client to update label text and toggle the availability of the navigation buttons.
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="HiddenField" Title="Hidden Field" SeoTitle="ASP.NET Hidden Field Component" HighlightedTagNames="dx:ASPxHiddenField">
      <Demo Key="Example" Title="Example" >
        <Description>
          <![CDATA[
                <p>
					The DevExpress ASP.NET Hidden Field (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHiddenField">ASPxHiddenField</helplink>) control allows you to simplify the process of storing a set of values that should be persisted and synchronized between the server side and client side across round trips. 
				</p>
    <p>
					Using the ASPxHiddenField as a dictionary, you can pass any number of simple or typed values from the server to the client side. 
                    On the client, you can easily access and modify these values (and even add or remove values) using the control's comprehensive client-side API. 
                    If required, the changes made to the values on the client side can be synchronized with the server 
                    (this is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHiddenField.SyncWithServer">SyncWithServer</helplink> property).
				</p>
                <p>
					In this demo, a single ASPxHiddenField control is used to store selections made on all pages of a standard MultiView control.
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ObjectContainer" Title="Object Container" SeoTitle="ASP.NET Media and Flash Container Control" HighlightedTagNames="dx:ASPxObjectContainer">
      <Keywords>video, audio, ASF, ASX, AVI, MP4, MPE, MPEG, MPG, WM, WMV, WMX, WVX, AIF, AIFC, AIFF, AU, M4A, MID, MIDI, MP2, MP3, MPA, RMI, SND, WAV, WAX, WMA, flash, Html5Audio, Html5Video, Html5</Keywords>
      <Demo Key="Types" Title="Media Types" HighlightedTagNames="asp:PlaceHolder dx:ASPxObjectContainer" 
            HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Html5Media.png" HighlightedTitle="Object Container - Html5 Media Element Support">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Object Container (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer">ASPxObjectContainer</helplink>) allows different types of media (such as flash files, images, videos and audios) to be embedded in a web page.</p> 
<p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer">ASPxObjectContainer</helplink> control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer.ObjectType">ObjectType</helplink> property is used to define the type of media data to load onto the page. The source of the media data is specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer.ObjectUrl">ObjectUrl</helplink> property.</p>
<p>The Object Container can be rendered as the following Html5 media elements, which are supported by most modern platforms and browsers.</p>
<ul>
  <li>Audio – set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer.ObjectType">ObjectType</helplink> property to <b>Html5Audio</b> and provide an audio file in an MP3 format.</li>
  <li>Video – set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer.ObjectType">ObjectType</helplink> property to <b>Html5Video</b> and provide a video file in an MP4 format.</li>
</ul>
]]>
        </Description>
                <HighlightedDescription>The DevExpress ASP.NET Object Container (ASPxObjectContainer) allows you to embed Html5 media elements in web pages. In this demo, the audio and video elements are demonstrated.</HighlightedDescription>
        
        <SourceFile>~/ObjectContainer/ObjectTypes/Flash.ascx</SourceFile>
        <SourceFile>~/ObjectContainer/ObjectTypes/Html5Video.ascx</SourceFile>
        <SourceFile>~/ObjectContainer/ObjectTypes/Html5Audio.ascx</SourceFile>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[<p>
					This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxObjectContainer">ASPxObjectContainer</helplink> control can programmatically control the associated flash object by sending specific commands to the flash and responding to its feedback. Click the checkboxes in the rightmost panel, or specific countries in the Flash-based interactive map, and see how the corresponding checkboxes and countries are synchronized.
				</p><p>
					In this demo, when a checkbox is clicked, the corresponding country in the Flash object is specifically highlighted by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientObjectContainer.SetVariable(name-value)">SetVariable</helplink> method of the ASPxObjectContainer control. This method receives two parameters - the required variable of the flash object and the variable's value. (See JS code, the SelectCountryInFlash function)
				</p><p>
					When a country in the flash object is clicked, a specific client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientObjectContainer.FlashScriptCommand">FlashScriptCommand</helplink> event is raised by the ASPxObjectContainer control. In this event's handler, the corresponding checkbox state is changed based on the e.args parameter value. (See the ASPX code.)
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="RatingControl" Title="Rating Control" SeoTitle="ASP.NET AJAX Rating Control" HighlightedTagNames="dx:ASPxRatingControl">
      <Demo Key="DataBinding" Title="Data Binding" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/RatingControl.png" HighlightedTitle="Rating Control - Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[<p>
					This demo illustrates how the DevExpress ASP.NET Rating Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl">ASPxRatingControl</helplink>) can be used to visualize data taken from a data source.
				</p><p>
					In this demo, the ASPxRatingControl is used in read-only mode (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.ReadOnly">ReadOnly</helplink> property is set to true). It is placed within the data-bound ASPxDataView control's template of the ItemTemplate type. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.Value">Value</helplink> property of the ASPxRatingControl is bound to a data field by a specific data-binding expression.
				</p>]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Rating Control (ASPxRatingControl) allows end-users to rate content by clicking icons such as stars. This demo illustrates how ASPxRatingControl is used to display ratings data from a database.</HighlightedDescription>
      </Demo>
      <Demo Key="Voting" Title="Voting">
        <Keywords>votes, survey</Keywords>
        <Description>
          <![CDATA[
                <p>
                  The DevExpress ASP.NET Rating Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl">ASPxRatingControl</helplink>) is used to elegantly visualize end-user ratings. It also provides end-users with an intuitive interface to rate content by allowing them to select item images ("stars" by default) that represent the user’s rating.
                </p>
                <p>
                  The ASPxRatingControl allows you to specify:
                </p>
                <ul>
                  <li>
                    its value (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.Value">Value</helplink> property);
                  </li>
                  <li>
                    the number of items (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.ItemCount">ItemCount</helplink> property);
                  </li>
                  <li>
                    an image representing an individual item in different states (such as <i>normal</i>, <i>highlighted</i> or <i>selected</i>) by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.ImageMapUrl">ImageMapUrl</helplink> property, along with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.ItemWidth">ItemWidth</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.ItemHeight">ItemHeight</helplink> properties;
                  </li>
                  <li>
                    titles of items (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.Titles">Titles</helplink> property);
                  </li>
                  <li>
                    the manner in which items are filled to represent the control's value if it is a fractional number (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.FillPrecision">FillPrecision</helplink> property).
                  </li>
                </ul>
                <p>
                  The following fill types are available within the ASPxRatingControl, controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRatingControl.FillPrecision">FillPrecision</helplink> property:
                </p>
                <ul>
                  <li>
                    Full - An item is fully filled if the decimal part of the control's value is in the 50-99 range;
                  </li>
                  <li>
                    Half - An item is half filled if the decimal part of the control's value is in the 25-74 range; 
                  </li>
                  <li>
                    Exact - An item is filled according to the exact decimal part of the control's value. 
                  </li>
                </ul>
                <p>
                  On the client side, the ASPxRatingControl implements a set of client events (the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.ItemClick">ItemClick</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.ItemMouseOver">ItemMouseOver</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.ItemMouseOut">ItemMouseOut</helplink>events), allowing you to respond when end-users manipulate the control.
                </p>
                <p>
                  In this demo, the ASPxRatingControl is used to implement a simple voting system that allows an end-user to submit a single vote by selecting the desired number of stars (an end-user can resubmit his/her choice by repeating the selection process, and selecting another number of stars). 
                </p>
                <p>
                  Technically, this is implemented as follows. The second rating control's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.ItemClick">ItemClick</helplink> event is handled to initiate a callback sending the value obtained via the control's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.GetValue">GetValue</helplink> client method to the server. This value is used on the server to calculate the overall rating value. The calculated value is then sent back to the client and assigned to the first rating control using its <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRatingControl.SetValue(value)">SetValue</helplink> client method.
                </p>
                <p>
                  You can also select an item from the drop-down list to specify the first control's fill type.
                </p>
              ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="RoundPanel" Title="Round Panel" SeoTitle="ASP.NET AJAX Collapsible Round Panel Control" HighlightedTagNames="dx:ASPxRoundPanel">
      <Keywords>radius, round, borderradius, panel, collapsible</Keywords>
      <Demo Key="Features" Title="Features" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/RoundPanel.png" HighlightedTitle="Round Panel - Features">
            <Description>
                <![CDATA[
                <p>The DevExpress ASP.NET Round Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel">ASPxRoundPanel</helplink>) ccontrol is a container area with rounded corners. This demo illustrates the primary features available to you when using the ASPxRoundPanel. The options pane on the right allows you to modify control properties, including:</p>
<ul>
    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.View">View</helplink> – Specifies the round panel view: Standard or GroupBox. Note: Collapse functionality is available only for the Standard view.</li>
    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.ShowHeader">ShowHeader</helplink> – Specifies panel header visibility.</li>
    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.AllowCollapsingByHeaderClick">AllowCollapsingByHeaderClick</helplink> – Specifies whether an end-user can expand and collapse a panel by clicking the panel header.</li>
    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.ShowCollapseButton">ShowCollapseButton</helplink> – Specifies whether a collapse button is displayed in the panel header.</li>
    <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.EnableAnimation">EnabledAnimation</helplink> – Specifies whether a slide animation effect is used during expansion/collapse of the panel.</li>
</ul>
                ]]>
            </Description>
            <HighlightedDescription>
              The DevExpress ASP.NET Round Panel (ASPxRoundPanel) control provides rounded corner panels for your application. This demo illustrates the main features provided by this control.
            </HighlightedDescription>
        </Demo>
        <Demo Key="LoadOnDemand" Title="Load Content on Demand">
            <Description>
                <![CDATA[
                <p>The DevExpress ASP.NET Round Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel">ASPxRoundPanel</helplink>) is able to load panel content on demand via callbacks.</p> 
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRoundPanel.LoadContentViaCallback">LoadContentViaCallback</helplink> property specifies the manner in which content is loaded within its container. If the property is set to <b>true</b>, collapsed panel content is loaded during expansion (the panel is initially loaded without content); Otherwise, the content is displayed during initial load. As you might expect, by using delayed loading, you can improve the response time of your web page when displaying large amounts of information within the Round Panel.</p>

<p>The round panel’s content can be updated on demand programmatically by using the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRoundPanel.PerformCallback(parameter)">PerformCallback</helplink> method.</p> 
<p>Note that in this example, callback processing is delayed for two seconds in order to demonstrate the capabilities of the DevExpress Loading Panel.</p> 

                ]]>
            </Description>
        </Demo>
    </DemoGroup>

    <DemoGroup Key="Timer" Title="Timer" SeoTitle="ASP.NET AJAX Timer Component" HighlightedTagNames="dx:ASPxTimer">
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>
					        This example demonstrates the capabilities of our client-side event management technology. The DevExpress ASP.NET Timer (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimer">ASPxTimer</helplink>) component has two client-side events - <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimer.Tick">Tick</helplink> - which are traced and displayed in the Event monitor below the <b>Download</b> button.
				        </p>
                <p>
					        In this demo, ASPxTimer is used to implement a countdown timer, and to temporarily disable the download button during the countdown. In the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> event's handler, the button is disabled, the value of the seconds counter is set, and specific descriptive text with a countdown is displayed. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimer.Tick">Tick</helplink> event is handled to decrease the seconds counter and to refresh the page's information when the specified time runs out. 
				        </p>
                <p>
                  To learn more about client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
                </p>        
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[<p>
					This example demonstrates how to manipulate the DevExpress ASP.NET Timer <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimer">ASPxTimer</helplink> component on the client using its client-side functionality. The client-side programming interface is available if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTimer.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to true, or if there is a handler assigned for any client-side event. 
				</p><p>
					The ASPxTimer's client-side API includes two methods: <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimer.SetInterval(interval)">SetInterval</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTimer.SetEnabled(enabled)">SetEnabled</helplink>. In this demo, they are used to adjust the timer's interval, and turn the timer on and off on the client side. (See the ASPX code for the dropdown list and checkbox declarations.)
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxperience.NavigationAndLayout" Url="ASPxNavigationAndLayoutDemos" Title="DevExpress ASPxperience" SeoTitle="ASP.NET AJAX Navigation and Layout Controls" NavItemTitle="Navigation and Layout" OrderIndex="15">
    <Keywords>navigation, layout, markup</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxperience_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Navigation_and_Layout.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Navigation and Layout Controls">
      <BannerTitle>
        Navigation and Layout Controls for ASP.NET
      </BannerTitle>
      <BannerText>
        A comprehensive collection of site navigation and layout tools for building easy-to-navigate, user-friendly websites and web applications.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=Rx4DKR_NdvM</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the ASPxperience Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
                This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxperience Suite</b>. 
                These features include: 
            </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress Navigation and Layout Suite is a comprehensive set of form navigation and layout tools, designed to more effectively visualize information regardless of its complexity.
          </p>
        ]]>
      </Description>
    </Overview>

    <DemoGroup Key="CloudControl" Title="Cloud Control" SeoTitle="ASP.NET AJAX Tag Cloud Control" HighlightedTagNames="dx:ASPxCloudControl">
      <Keywords>tags</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
	              The ASP.NET Tag Cloud Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl">ASPxCloudControl</helplink>) provides the ability to display information in 'tag clouds'. The control organizes hyperlinks by automatically arranging them within a specified area, and by indicating their weight (importance) using fonts of different size and colors. A weight value is also displayed. 
              </p>
              <p>
	              The following code demonstrates how to add a cloud control to your project and manually populate it with items that specify the item text and value.
              </p>
              <code lang="html">
                <dx:ASPxCloudControl ID="ASPxCloudControl" runat="server">
                    <Items>
                        <dx:CloudControlItem Text="Bolivia" Value="1098575" />
                        <dx:CloudControlItem Text="Brazil" Value="8511196" />
                        <dx:CloudControlItem Text="Peru" Value="1285215" />
                        <%-- And other items --%>
                    </Items>
                </dx:ASPxCloudControl>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/CloudControl/DataBinding.aspx">
          <Description>
            <![CDATA[
             The ASPxCloudControl supports standard data binding to any object that implements the IEnumerable or IDataSource interface.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Two Link Size Scales">
          <Description>
            <![CDATA[
             Link sizes can be determined using either a linear or logarithmic scale. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Automatic Coloring">
          <Description>
            <![CDATA[
             ASPxCloudControl provides automatic link coloring based on link weight. You only need to specify two colors corresponding to the maximum and minimum values.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Value Display">
          <Description>
            <![CDATA[
            The item weight values can be displayed near links. You can customize the value color, the string format and the offset from the corresponding link.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Custom Rank Count">
          <Description>
            <![CDATA[
             You can customize the number of size grades available for links. More size grades provide more font sizes, allowing you to provide a greater difference between the minimum and maximum font size.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Sorting">
          <Description>
            <![CDATA[
             ASPxCloudControl allows you to sort links alphabetically.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Appearance" Title="Additional Appearances" HighlightedTagNames="asp:PlaceHolder dx:ASPxCloudControl">
        <Description>
          <![CDATA[
                <p>
					This demo illustrates how the appearance of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl">ASPxCloudControl</helplink> can be customized. 
                    To select a different look and feel, choose an option from the rightmost list.
				</p>
                <p>
					The ASPxCloudControl allows you to enhance your site's appearance and functionality by introducing 'tag clouds' - 
                    a unique data visualization metaphor. Tag clouds consist of links which appear differently based upon their weight (rank). 
                    Tags in the control can be ranked by different criteria, such as the number of user messages, product sales volume, number of elements in a category, etc.
				</p>
                ]]>
        </Description>
        <SourceFile>~/CloudControl/Appearances/Demo.ascx</SourceFile>
        <SourceFile>~/CloudControl/Appearances/Strict.ascx</SourceFile>
        <SourceFile>~/CloudControl/Appearances/Technology.ascx</SourceFile>
        <SourceFile>~/CloudControl/Appearances/Violet.ascx</SourceFile>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates how to bind the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl">ASPxCloudControl</helplink> to a data source. 
                    The ASPxCloudControl supports standard data binding - any object that implements the IEnumerable or IDataSource interface 
                    (e.g. SqlDataSource, XmlDataSource) may be used as a data source for this control.
				</p>
                <p>
					In this demo the ASPxCloudControl receives data from an MS Access database. 
                    The ASPxCloudControl implements specific properties that point to the data fields containing the necessary data. 
                    These are the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.TextField">TextField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.ValueField">ValueField</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.NavigateUrlField">NavigateUrlField</helplink> properties.
				</p>
                <p>
					Like our other web controls, the ASPxCloudControl includes an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.ItemDataBound">ItemDataBound</helplink> event that allows you to customize values that are to be assigned to tag cloud element properties during data binding.
				</p>
                <p>
					Refer to VB or C# code to see how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.ItemDataBound">ItemDataBound</helplink> event is handled in this demo to cast item text to upper case.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the primary features of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl">ASPxCloudControl</helplink>. 
                    Use the controls in the rightmost panel to change the values of the control's properties, and see the result within the ASPxCloudControl.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.RankCount">RankCount</helplink> property specifies the total number of ranks which the input data should be divided into.
				</p>
                <p>
					By Using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.Scale">Scale</helplink> property, you can choose the scale to be used to rank elements. 
                    Both linear and logarithmic scale types are supported.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCloudControl.ShowValues">ShowValues</helplink> property allows the rank (weight) of an element to be displayed together with the element's caption text. 
                    This could be useful in instances when you need to provide exact information about tag elements.
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="FormLayout" Title="Form Layout" SeoTitle="ASP.NET AJAX Form Layout Control" HighlightedTagNames="dx:ASPxFormLayout">
      <Keywords>formslayout, inputs, editing</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Layout Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink>) simplifies the manner in which you create ASP.NET applications in Visual Studio. It allows you to quickly create form layouts of any complexity by combining the order and hierarchy of the control’s layout elements. 
              </p>
              <p>
               The following code demonstrates how to add the ASPxFormLayout control to your project and populate it with a group. The group contains a text box item with a specified caption and text.
              </p>
              <code lang="html">
                <dx:ASPxFormLayout ID="ASPxFormLayout1" runat="server">
                    <Items>
                        <dx:LayoutGroup Caption="Employees">
                            <Items>
                                <dx:LayoutItem Caption="First Name">
                                    <LayoutItemNestedControlCollection >
                                        <dx:LayoutItemNestedControlContainer>
                                            <dx:ASPxTextBox ID="ASPxTextBox1" 
                                              runat="server" Text="Nancy" />
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <%-- And other layout items --%>
                            </Items>
                        </dx:LayoutGroup>
                    </Items>
                </dx:ASPxFormLayout>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=I2lU7SS3BaY" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Automatic alignment">
          <Description>
            <![CDATA[
             Controls that are nested into the ASPxFormLayout layout items are automatically aligned to the left edge (or right edge, if using RTL support) according to their labels.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Tab or Group Box Group Rendering">
          <Description>
            <![CDATA[
             Groups can be rendered as tab containers or group box containers.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Third Party Control Support">
          <Description>
            <![CDATA[
            You have the ability to nest any control you like into the layout item.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Form Layout Items Editor">
          <Description>
            <![CDATA[
             The Form Layout Items Editor allows you to easily populate the control with items at design time.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBindingToSingleObject" Title="Binding to a Single Object" SeoTitle="Binding to a Single Object">
        <Description>
          <![CDATA[
               <p>This demo illustrates how to use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> control to edit fields of a data source and validate input values using Data Annotation attributes.</p>

               <p>In this demo, the edited data is specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">ASPxFormLayout.DataSource</helplink> property value in the code-behind. Validation rules are specified in the model class via Data Annotation attributes. Currently, ASPxFormLayout supports the following Data annotation attributes:</p>
               <ul>
               <li>BrowsableAttribute</li>
               <li>RequiredAttribute</li>
               <li>RegularExpressionAttribute</li>
               <li>RangeAttribute</li>
               <li>DisplayFormatAttribute</li>
               <li>DisplayAttribute</li>
               <li>DataTypeAttribute</li>               
               </ul>
               <p>ASPxFormLayout layout items are gathered in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.Items">Items</helplink> collection and are bound to data source fields using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItem.FieldName">LayoutItem.FieldName</helplink> property. Each layout item contains a DevExpress data editor that allows editing values of the corresponding field type.</p>

               <p>When the edit form is submitted to the server, new field values are obtained via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.GetNestedControlValueByFieldName(System.String)">GetNestedControlValueByFieldName</helplink> method in the code-behind.</p>
            ]]>
        </Description>
        <SourceFile>~/App_Code/FormLayoutData.cs</SourceFile>
      </Demo>
      <Demo Key="DataBindingToDatabase" Title="Binding to a Data Source" SeoTitle="Binding to a Data Source">
        <Description>
          <![CDATA[
            <p>This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> control can be used to edit fields of a data source.</p>

            <p>In this demo, the edited data is specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">ASPxFormLayout.DataSourceID</helplink> property value in the markup.</p> 

            <p>The ASPxFormLayout layout items are gathered in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.Items">Items</helplink> collection and are bound to data source fields using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItem.FieldName">LayoutItem.FieldName</helplink> property. Each layout item contains a DevExpress data editor that allows editing corresponding field type values.</p>

            <p>When the edit form is submitted to the server, the edited record is updated via the SqlDataSource.Update method.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> control delivers a comprehensive form design feature set. This demo illustrates the primary  features of the ASPxFormLayout. 
</p>
<p>
Use the ASPxFormLayout to easily create form layouts of any complexity by combining the order and  hierarchy of provided layout elements. The ASPxFormLayout main layout elements are comprised of labeled  items, labeled regular groups and tabbed groups. 
</p>
<p>
Item elements serve as placeholders for editors or custom content. Group elements are containers for other layout  elements. Group nesting is also available. 
</p>
<p>
Items allow you to define inline help texts that describe editor definitions. Help texts can also be defined at the nested editor's level (if DevExpress editors are used in items). An editor's help text can be displayed either always (as an editor inline text) or only when the editor receives focus (as a popup tooltip). Take a look at the memo editor behavior in this demo.
</p>
<p>
The ASPxFormLayout can also display customizable text marks within item captions to indicate whether filling in an  item editor is required or optional. The indicator display mode can be defined for all or individual items. The  indicator type is determined based on a setting defined at the item editor level or an item level.
</p>
        ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Form Layout (ASPxFormLayout) control helps you easily create complex data forms at design-time in a matter of minutes. This demo showcases the stunning runtime features of the ASPxFormLayout, such as group settings, item caption settings and help text settings.</HighlightedDescription>
      </Demo>
      <Demo Key="ResponsiveLayout" Title="Responsive Layout" SeoTitle="Responsive Layout">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Form Layout (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink>) control allows you to build adaptive edit forms with ease. The Form Layout can collapse its content from several to one column. To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FormLayoutAdaptivitySettings.AdaptivityMode">AdaptivityMode</helplink> property to <b>SingleColumnWindowLimit</b>. 
</p>
<p>
When adaptive mode is enabled, the Form Layout control automatically changes its layout when the browser window is resized. When the browser window inner width is less than or equal to the value specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FormLayoutAdaptivitySettings.SwitchToSingleColumnAtWindowInnerWidth">SwitchToSingleColumnAtWindowInnerWidth</helplink> property, control content is reordered into one column. The editor captions are displayed above or below the editor (based on the initial position).
</p>
<p>
The Form Layout adaptivity settings can be accessed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout.SettingsAdaptivity">SettingsAdaptivity</helplink> property.
</p>
<p>
In this demo, the Form Layout control displays its editors in one column when the browser window width is less than 800 pixels.
</p>
        ]]>
        </Description>
        <SourceFile>~/FormLayout/ResponsiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="AdaptiveGridLayout" Title="Adaptive Grid Layout" SeoTitle="Adaptive Grid Layout" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/AdaptiveGridLayout.png" HighlightedTitle="Form Layout Control - Adaptive Grid Layout">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Form Layout (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink>) control allows you to create adaptive grid layouts so that the editor's content looks consistent across all devices. This functionality uses breakpoints at which the editor shifts, resizes, or moves its items to a new line. It allows you to create, for example, a two-column layout for narrow screens or a three-column layout for wider screens.
</p>
<p>
In this demo, resize the browser or drag the Form Layout to see how the editor adjusts its content to different widths. Layout elements change their position and size at each breakpoint according to each form layout item's specified span rules.
</p>
<p>
The ASPxFormLayout stores breakpoints (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutBreakpoint">LayoutBreakpoint</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBreakpointSettings.Breakpoints">Breakpoints</helplink> collection. Breakpoints define different screen sizes' column count (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutBreakpoint.ColumnCount">ColumnCount</helplink>) and width (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutBreakpoint.MaxWidth">MaxWidth</helplink>) specifications.
</p>
<p>
Each Form Layout item provides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpanRules">SpanRules</helplink> collection that can contain <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpanRule">SpanRule</helplink> object(s). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpanRule.RowSpan">SpanRule.RowSpan</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpanRule.ColumnSpan">SpanRule.ColumnSpan</helplink> properties set how many columns and rows a layout item should occupy until the FormLayout's width reaches the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutBreakpoint.MaxWidth">LayoutBreakpoint.MaxWidth</helplink> property value. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SpanRule.BreakpointName">SpanRule.BreakpointName</helplink> property binds each span rule to a corresponding group layout (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutBreakpoint.Name">LayoutBreakpoint.Name</helplink> property).
</p>
         ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Form Layout control allows you to create adaptive grid layouts so that the editor's content looks consistent across all devices.
        </HighlightedDescription>
        <SourceFile>~/FormLayout/AdaptiveGridLayout.aspx</SourceFile>
      </Demo>
      <Demo Key="TabbedGroups" Title="Selection-Dependent Inputs" SeoTitle="Selection-Dependent Inputs">
        <Description>
          <![CDATA[
<p>
This demo illustrates how to implement a form that dynamically exposes different additional inputs depending upon  an initial selection made by an end-user. 
</p>
<p>
In the demo, selection-dependent inputs are vertically separated from the user's initial options. Selection-dependent inputs are exposed below radio buttons using pages of a tabbed group. The tabbed group's  decoration, such as tabs and borders, is hidden using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabbedLayoutGroup.ShowGroupDecoration">ShowGroupDecoration</helplink> property, so that the group  displays only the active page's content. The number and indexes of tabbed pages in the tabbed group directly  correspond to the number and indexes of items within a radio button list. When an end-user selects a radio button in  the list of options, the corresponding tabbed page is activated in the tabbed group via client code.
</p>
        ]]>
        </Description>
      </Demo>
      <Demo Key="Columns" Title="Columns" SeoTitle="Columns">
        <Description>
          <![CDATA[
<p>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> provides you with an ability to flexibly customize form layouts by dividing group contents into  table cells and position layout elements (items and groups) within cells which can span across several columns or  rows. So, the layout of elements in a group can be customized in a manner similar to an HTML TABLE element  using colspan and rowspan notions.
</p>
<p>
You can use a group's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutGroup.ColCount">ColCount</helplink> property to define the number of logical columns within the group. All layout  elements (items and groups) have the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItemBase.ColSpan">ColSpan</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItemBase.RowSpan">RowSpan</helplink> properties allowing you to span them across  multiple table cells.
</p>
<p>
In this demo, a group's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutGroup.ColCount">ColCount</helplink> property is set to 3, and the memo editor spans across three columns due to its  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItemBase.ColSpan">ColSpan</helplink> property set to 3.
</p>
        ]]>
        </Description>
      </Demo>
      <Demo Key="RegistrationForm" Title="Registration Form" SeoTitle="Registration Form">
        <Description>
          <![CDATA[
<p>
In this demo, you can see how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> control can be used to create a complete and fully functional  registration form.
</p>
<p>
Note that in addition to an elegant form UI with aligned captions and editors, this implementation provides support  for automatic visualization of required field indicators, password safety indication, both client and server validation  of user input, and server captcha verification.
</p>
        ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality" SeoTitle="Client-Side Functionality">
        <Description>
          <![CDATA[
		      <p>This example demonstrates how to manipulate an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFormLayout">ASPxFormLayout</helplink> control programmatically on the client using our extended client-side functionality.</p>

              <p>In this demo, layout items of the ASPxFormLayout control are identified using their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.LayoutItemBase.Name">Name</helplink> property. In order to obtain a specific layout item by its name on the client side, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFormLayout.GetItemByName(name)">GetItemByName</helplink> method is used (see JS code). A specified layout item’s visibility can be changed on the client with the help of the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientLayoutItem.SetVisible(value)">SetVisible</helplink> method by passing the required boolean value to this method. An item's caption can be changed on the client side by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientLayoutItem.SetCaption(caption)">SetCaption</helplink> method.</p>

              <p>In this demo, when an end-user selects any of the radio button list items ("I am a new user" or "I am a registered user"), the UpdateItemsVisibility function is called. This function defines the visibility of all of the layout items depending on the selected value within the radio button list.</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Menu" Title="Menu" SeoTitle="ASP.NET AJAX Menu Control" HighlightedTagNames="dx:ASPxMenu dx:ASPxPopupMenu">
      <Keywords>mainmenu, menu</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Menu control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>) offers an elegant way to provide website navigation options to your end-users. 
              </p>
              <p>
              The following code demonstrates how to add a menu control to your project and manually populate it with items by specifying the item text and root item image.
              </p>
              <code lang="Html">
                <dx:ASPxMenu ID="ASPxMenu1" runat="server">
                    <Items>
                        <dx:MenuItem Text="Home">
                            <Image  Url="~/Images/ButtonHome.png" />
                            <Items>
                                <dx:MenuItem Text="News" />
                                <dx:MenuItem Text="Contact Us" />
                            </Items>
                        </dx:MenuItem>
                        <%-- And other menu items --%>
                    </Items>
                </dx:ASPxMenu>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/Menu/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxMenu supports binding to data sources, so that the menu structure is retrieved from an XML file or a database table.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Full-Width Submenu" DemoUrl="~/Menu/FullWidthSubMenu.aspx">
          <Description>
            <![CDATA[
             A submenu can be displayed full width. 
            ]]>
          </Description>
        </KeyFeature>       
        <KeyFeature Name="Menu Scrolling" DemoUrl="~/Menu/Scrolling.aspx" >
          <Description>
            <![CDATA[
             If a submenu's content height exceeds the browser window height, the submenu can display scroll buttons, allowing its items to be scrolled vertically.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Horizontal or Vertical Orientation">
          <Description>
            <![CDATA[
            Horizontal or vertical layout can be used for the root level. This means that you can build menus that open sideways, in addition to the main menus.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Menu Animation">
          <Description>
            <![CDATA[
             A submenu can appear with a predefined animation effect.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/Menu/Templates.aspx">
          <Description>
            <![CDATA[
             The look of each basic element of the menu control (root-level items, submenu items or each individual item) can be completely modified by creating a specific template that defines how the element will be rendered by a client browser.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Description>
          <![CDATA[
				<p>
					This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> control can be populated with item information taken from a data source.
				</p>

				<p>
					The ASPxMenu supports binding to data sources, which can be any object that implements the IHierarchicalEnumerable or IHierarchicalDataSource interface (e.g. SiteMapDataSource, XmlDataSource, etc.). The ASPxMenu can be bound to a data source in the standard manner - using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property.
				</p>

				<p>
					While binding, the ASPxMenu control automatically creates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem">MenuItem</helplink> objects and retrieves their property values from corresponding items. The menu supports two methods of retrieving data from a specified data source. One involves manually setting the control's specific data-related properties (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.TextField">TextField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ImageUrlField">ImageUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NavigateUrlField">NavigateUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.NameField">NameField</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ToolTipField">ToolTipField</helplink>) to the data source item attribute names. The other one exploits the ASPxMenu's ability to recognize data items and automatically retrieve some item characteristics from the data fields named in a specific way.
				</p> 

				<p>
					Additionally, the ASPxMenu provides specific events related to data binding that can be handled according to your application logic.
				</p>
				<ul>
					<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemDataBound">ItemDataBound</helplink> event allows you to customize settings of an individual item immediately after it has been bound to data.</li>
					<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataBound">DataBound</helplink> event (which occurs after the control data binding has been finished) allows you to finally customize the control.</li>
				</ul>
				<p>
					In this demo, the ASPxMenu control is bound to an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapDataSource">ASPxSiteMapDataSource</helplink> control by specifying just one <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> property. An item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Text">Text</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.NavigateUrl">NavigateUrl</helplink> property values are automatically retrieved from the <i>title</i> and <i>url</i> SiteMapNode attributes. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemDataBound">ItemDataBound</helplink> event is handled for two purposes: to add an image sprite CSS class to items that have the <i>"SpriteImage"</i> attribute within the data source; and to bold a score and add it to the text of items that have the <i>"result"</i> attribute within the data source.
				</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Menu (ASPxMenu) control allows you to add menus to your website. You can add the menu content directly within your control, or populate it with data from a data source. This demo illustrates how to populate the ASPxMenu with item information from an ASPxSiteMapDataSource.</HighlightedDescription>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Keywords>menu</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the primary features of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> control. 
                    Use the items within the rightmost panel to change the values of the menu's properties.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AllowSelectItem">AllowSelectItem</helplink> property can be used to enable menu item selection on the client side.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AutoPostBack">AutoPostBack</helplink> property controls whether a round trip to the server is required when a menu item is clicked.
				</p>
        <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.EnableAnimation">EnableAnimation</helplink> property controls whether or not a specific animation effect (in this demo, the “slide” effect) is used when invoking submenus.</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.EnableHotTrack">EnableHotTrack</helplink> property allows you to specify whether menu items can visually respond to mouse hovering.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AutoSeparators">AutoSeparators</helplink> property specifies the manner in which separators are displayed to separate menu items from one another. 
                    In order to display separators among all menu items, this property should be set to All. 
                    If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AutoSeparators">AutoSeparators</helplink> property's value is RootOnly, separators are displayed only for root items (menu items of the top level).
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.AppearAfter">AppearAfter</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.DisappearAfter">DisappearAfter</helplink> properties allows you to specify the delay in milliseconds for the display of submenus 
                    within a menu control.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="FullWidthSubMenu" Title="Full-Width Submenu" HighlightedTagNames="dx:FullScreenHyperLink">
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the DevExpress ASP.NET Menu (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>) control’s ability to display a full-width sub-menu. To activate this feature, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu.EnableSubMenuFullWidth">EnableSubMenuFullWidth</helplink> property to <b>true</b>.
				</p>
            ]]>
        </Description>
        <HighlightedDescription>This demo illustrates the DevExpress ASP.NET Menu (ASPxMenu) control capability to display a sub-menu full width. </HighlightedDescription>
        <SourceFile>~/Menu/FullWidthSubMenuPage.aspx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuAboutSubMenu.ascx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuAccountSubMenu.ascx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuBuySubMenu.ascx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuDemosSubMenu.ascx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuProductsSubMenu.ascx</SourceFile>
        <SourceFile>~/Menu/FullWidthSubMenuControls/FullWidthSubMenuSupportSubMenu.ascx</SourceFile>
      </Demo>
      <Demo Key="ItemLinkMode" Title="Item Link Mode" SeoTitle="Item Render Mode">
        <Description>
          <![CDATA[
                <p>
                    This demo shows which factors affect the appearance and functionality of clickable menu items and the style of links represented by menu items.
                </p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemLinkMode">ItemLinkMode</helplink> property can be used to specify how menu items are represented as links within the menu control. 
                    By default, this property is set to ContentBounds, which makes the menu entirely interactive. 
                    If you need to display a simple menu (such as a set of single level links), you can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemLinkMode">ItemLinkMode</helplink> property to TextOnly. 
                    In this instance, the resulting HTML code generated to represent the menu control on the page will be minimal. 
                    In order to control the appearance of links, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.LinkStyle">LinkStyle</helplink> property can be used.
				</p>
                <p>
					In this demo, two <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> controls are used with different settings for their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemLinkMode">ItemLinkMode</helplink> property. 
                    The first menu's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemLinkMode">ItemLinkMode</helplink> property is set to ContentBounds thus allowing the entire area of each menu item to be clickable. 
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemLinkMode">ItemLinkMode</helplink> property of the second menu is set to TextOnly.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="PopupMenu" Title="Popup Menu" SeoTitle="Popup Menu">
        <Keywords>context, contextmenu</Keywords>
        <Description>
          <![CDATA[
                <p>This demo demonstrates some of the features available to you when using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu">ASPxPopupMenu</helplink> control.</p>

                <p>A popup menu can be associated with a specific control using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupElementID">PopupElementID</helplink> property. The menu is invoked automatically when a specific action (a left or right mouse click or mouse hovering) defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupAction">PopupAction</helplink> property, is performed within the associated control.</p>

                <p>In this example, the ASPxPopupMenu control is linked to an image. The popup menu is displayed by an action specified within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupAction">PopupAction</helplink> dropdown editor. The menu's precise display position with respect to the associated control can be defined by the HorizontalAlign and VerticalAlign combo boxes that control the values of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupHorizontalAlign">PopupHorizontalAlign</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu.PopupVerticalAlign">PopupVerticalAlign</helplink> properties, respectively.</p>

                <p>The popup menu can be invoked programmatically as well. In this demo, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPopupMenu.ShowAtPos(x-y)">ShowAtPos</helplink> method is used to display the ASPxPopupMenu control over the grid in response to a right mouse click instead of a client browser's standard context menu.</p>

                <p>Note that in this demo, menu items are arranged into a logical group using their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">GroupName</helplink> property. In this case, the items function as radio buttons - checking an item unchecks the one previously selected. So, only one menu item in a group can be checked at one time.</p>

                ]]>
        </Description>
      </Demo>
      <Demo Key="ResponsiveLayout" Title="Responsive Layout" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/ResponsiveMenu.png" HighlightedTitle="Responsive Menu">
        <Description>
          <![CDATA[
              <p>
              The DevExpress ASP.NET Menu (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>) control allows you to build adaptive page layouts.
              </p>

              <p>
              The ASPxMenu control can automatically resize or hide its items when the browser window is resized. The availability of this feature is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.Enabled">SettingsAdaptivity.Enabled</helplink> property.
              </p>

              <p>
              Related settings:
              </p>

              <ul>

              <li>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableAutoHideRootItems">SettingsAdaptivity.EnableAutoHideRootItems</helplink> - Moves menu root items one by one to the popup menu hidden under the ellipse button when the browser width is changed.
              </li>

              <li>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableCollapseRootItemsToIcons">SettingsAdaptivity.EnableCollapseRootItemsToIcons</helplink> - Hides menu root items' text and displays only icons when the window's inner width is less than the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth">SettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth</helplink> property's value.
              </li>

              <li>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.EnableCollapseToSideMenu">SettingsAdaptivity.EnableCollapseToSideMenu</helplink> - Transforms the horizontal menu into the vertical side-menu when the window's inner width is less than the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuSettingsAdaptivity.CollapseToSideMenuAtWindowInnerWidth">SettingsAdaptivity.CollapseToSideMenuAtWindowInnerWidth</helplink> property's value.
              </li>

              </ul>

              <p>
              In this demo, you can drag the horizontal slider and see how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> control adapts to different width values. 
              </p>
           ]]>
        </Description>
        <HighlightedDescription>DevExpress ASPxMenu adapts its content to suit the target browser size and resolution</HighlightedDescription>
        <SourceFile>~/Menu/ResponsiveLayoutPage.aspx</SourceFile>
      </Demo>
      <Demo Key="Scrolling" Title="Scrolling" SeoTitle="Sub-Menu Scrolling">
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>'s support for scrolling items within submenus.
				</p>
                <p>
					By default, dropdown submenus are automatically rendered to accommodate their entire content. 
                    In this case, lengthy submenus (containing a large number of items) might not be displayed entirely within the browser window. 
                    They might go beyond the bounds of the browser window, if their heights exceed the browser window's height 
                    (or the height of an IFRAME containing the menu).
				</p>
                <p>
					To accommodate submenus within the window boundaries, you can enable the menu's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu.EnableSubMenuScrolling">EnableSubMenuScrolling</helplink> property or the 
                    <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.EnableScrolling">MenuItem.EnableScrolling</helplink> property of an individual menu item. In this case, if a submenu's content height exceeds the 
                    browser window height, the submenu displays scroll buttons, allowing its items to be scrolled vertically. 
                    You can define custom images for these scroll buttons by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ScrollDownButtonImage">ScrollDownButtonImage</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ScrollUpButtonImage">ScrollUpButtonImage</helplink> properties. 
                    The visual style of the scroll buttons can be customized, via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ScrollButtonStyle">ScrollButtonStyle</helplink> property.
				</p>
                <p>
					In this demo, a web page containing the ASPxMenu is loaded into an IFRAME element. This simulates the window bounds for the menu's dropdown submenus.
				</p>
                ]]>
        </Description>
        <SourceFile>~/Menu/ScrollingPage.aspx</SourceFile>
        <SourceFile>~/Menu/ScrollingPage.aspx.cs</SourceFile>
      </Demo>
      <Demo Key="TabbedMenu" Title="Tabbed Menu">
        <Description>
          <![CDATA[
                <p>
					This sample demonstrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> can be used to implement a hierarchical menu (with popped out submenus) which looks like a set of tabs.
				</p>
                <p>
					In this demo, the menu control obtains its data from an xml file, using a standard XmlDataSource component.
				</p>
                <p>
					In order to draw gradient borders for the menu's root items (tabs), a template of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.RootItemTextTemplate">RootItemTextTemplate</helplink> type is used.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates" SeoTitle="Templates for Items and Sub-Menus">
        <Description>
          <![CDATA[
                <p>
					This sample demonstrates the use of template technology within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink> control. 
                    The look of each basic element of the menu control can be completely modified by creating a specific template which defines how the element 
                    will be rendered by a client browser.
				</p>
                <p>
					The templates of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.SubMenuTemplate">SubMenuTemplate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Template">Template</helplink> types are defined in this demo. Creating templates of different
                     types allows you to completely customize the appearance or layout of a menu control or each element inside it.
				</p>
                <p>
					This demo represents a two-level ASPxMenu type. A specific <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.SubMenuTemplate">SubMenuTemplate</helplink> is created for the first root menu item's 
                    submenu; the appearance of the second root menu item's sub-item is defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Template">Template</helplink> property of each sub-item.
				</p>
                <p>
					The content of a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.SubMenuTemplate">SubMenuTemplate</helplink> type is represented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink> which displays a hierarchical structure of links 
                    (site map nodes) that reference different web pages within the site. For more information on implementation of such a template, 
                    please take a look at the demo's aspx code.
				</p>
                <p>
					Sub-items of the second root menu item use Templates. Each of these templates consists of a group of HTML controls. Each HTML control 
                    used in the template can be bound to the property values of the rendered menu item. See ASPX code to learn how this can be done by binding a
                    Label control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxLabel.Text">Text</helplink> property to the value of the currently rendered menu item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Text">Text</helplink> property.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Toolbars" Title="Toolbar Mode">
        <Description>
          <![CDATA[
          <p>
This demo illustrates how the DevExpress ASP.NET Menu (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>) control can be used to implement a toolbar look and feel. For this purpose, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu.ShowAsToolbar">ShowAsToolbar</helplink> property is set to <b>true</b> to reduce the space between menu items, so that the menu looks like a toolbar. 
</p>
<p>
In this demo, ASPxMenu control items are declared explicitly within the control markup. Each item is represented by an image only. All images within the toolbar have a fixed size (16 by 16 for the first toolbar, and 32 by 32 for the second one). Item appearance and behavior are controlled by the following properties.
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.IconID">Image.IconID</helplink> – specifies an identifier of the current item image icon in a DevExpress icon collection.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.GroupName">GroupName</helplink> – specifies a logical check group to which the menu item belongs.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Checked">Checked</helplink> – specifies the menu item's check state (checked or unchecked).</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.BeginGroup">BeginGroup</helplink> – specifies whether a specific separator should appear before the current menu item, to separate it from other menu items.</li>
</ul>
<p><b>Note</b></p>
<p>Although you can use the menu to emulate a toolbar, the DevExpress <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control provides rich toolbar functionality out-of-the-box.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>
                    This sample demonstrates the capabilities of our client-side event management technology. 
                    All available client-side events are traced in this demo. 
                    Click any menu item or move the mouse pointer over the parent menu items within the menu control to initiate client-side events.
                </p>
                <p>
					The menu controls within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>
 control provide advanced client-side event support. 
                    Client-side events are triggered in response to specific actions or events on the client and cover all the key elements of 
                    the menu control’s functionality. Thus, they give you the ability to completely control the client-side behavior of the control.
				</p>
        <p>
            To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
        </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
                <p>
					This example demonstrates how to manipulate a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">menu control</helplink>
 programmatically on the client using our extended client-side functionality. 
                    The client-side programmatic interface is available if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to true or if there is a handler assigned
                    to any client-side event.
				</p>
                <p>
					In this demo, each item of the menu control is identified using its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">Name</helplink> property. In order to obtain a specific menu item by
                    its name on the client side the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.GetItemByName(name)">GetItemByName</helplink> method is used. A particular menu item can be selected with the help of the 
                    <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.SetSelectedItem(item)">SetSelectedItem</helplink> method by passing it the required item. Look at the code of the InitMenu function (see JS code) which
                    handles the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> event of the menu control. This handler defines the initially selected menu item (Visa) within the menu.
				</p>
                <p>
					In the code of the ShowProperties function (see JS code), the selected menu item is obtained with the help of the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.GetSelectedItem">GetSelectedItem</helplink>
                     function and information on the selected menu item's index and name is displayed.
				</p>
                <p>
					The MenuItemClick function that is a handler of the menu's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuBase.ItemClick">ItemClick</helplink> event (see ASPX and JS code) demonstrates how to synchronize 
                    the dropdown editor's value with the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientMenuItem.name">name</helplink> of the clicked menu item.
				</p>
                <p>
					Note that an individual client object can be referenced either directly by its ID (for instance, by using the following code:
                     ASPxMenu1.GetItemCount()) or by using the Get method of a common collection for our ASPx web controls 
                     (this can be useful when our web control is contained within a UserControl or MasterPage; that is when the resulting client
                     ID is generated by a specific NamingContainer). The GetMenu function (see JS code) demonstrates how to access a client menu 
                     object via our control collection.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[
                <p>
					This sample demonstrates a few of the server-side capabilities of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">menu control</helplink>. 
                    Select the desired item from the dropdown editor and define the visual settings of the corresponding menu item by clicking the appropriate button(s). 
                    Click any menu item to initiate the server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemClick">ItemClick</helplink> event which can be traced in the Events monitor.
				</p>
                <p>
					Each menu item has server-side properties which allow you to manipulate the item's state and so change the visualization of the entire menu control.
                    The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Enabled">Enabled</helplink> property allows you to enable or disable any menu item. By using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Visible">Visible</helplink> property, you can show or hide menu items, and 
                    the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Selected">Selected</helplink> property provides you with the ability to change an item's selected state.
				</p>
                <p>
					The server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemClick">ItemClick</helplink> event used in this demo allows you to perform any custom action your business needs require on the server in 
                    response to a click on a menu item. In this example the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenuBase.ItemClick">ItemClick</helplink> event is handled to synchronize the dropdown editor's value with the 
                    clicked item and to display information about the event in the Event monitor.
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="NavBar" Title="NavBar" SeoTitle="ASP.NET AJAX Navigation Bar Control" HighlightedTagNames="dx:ASPxNavBar">
      <Keywords>Accordion, SideBar, Side Bar</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Navigation Bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink>), which is also known as an Accordion control, allows you to replicate the Microsoft Outlook Navigation Bar. With integrated AJAX support, the ASPxNavBar is able to load a group's content from the server via a callback whenever a group is expanded. This approach allows the ASPxNavBar to avoid the initial transfer of all group data to the client, thus improving page load performance.
              </p>
               <p>
                The following code demonstrates how to add a navigation bar to your project and manually populate it with a group containing three items. The text and image are specified for the items.
              </p>
              <code lang="Html">
                <dx:ASPxNavBar ID="ASPxNavBar1" runat="server">
                    <Groups>
                        <dx:NavBarGroup Text="Charts">
                            <Items>
                                <dx:NavBarItem Text="Stacked Bar">
                                    <Image Url="~/Images/BarStacked.png" />
                                </dx:NavBarItem>
                                <dx:NavBarItem Text="3D Pie">
                                    <Image Url="~/Images/Pie.png" />
                                </dx:NavBarItem>
                                <dx:NavBarItem Text="Overlapped Gantt">
                                    <Image Url="~/Images/Gantt.png" />
                                </dx:NavBarItem>
                            </Items>
                        </dx:NavBarGroup>
                    </Groups>
                </dx:ASPxNavBar>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3574/aspnet-webforms-controls/site-navigation-and-layout/navigation-bar/overview" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/NavBar/DataBinding.aspx">
          <Description>
            <![CDATA[
             You can bind ASPxNavBar to a data source to retrieve group and item information.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Design-time Groups Editor">
          <Description>
            <![CDATA[
             An easy-to-use design-time item collection editor is available.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/NavBar/Templates.aspx">
          <Description>
            <![CDATA[
             Templates can be specified for group headers (in an expanded OR collapsed state), the group content area, and individual items.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="AJAX Support" DemoUrl="~/NavBar/EnableCallBacks.aspx">
          <Description>
            <![CDATA[
             ASPxNavBar can load group content via callbacks. So initially, only the content of expanded groups is loaded onto the client. When an end-user expands a group, its content is loaded via a callback. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding" SeoTitle="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates how you can bind the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> to a data source. The ASPxNavBar control supports standard data binding. 
                    In this instance any object which implements the IHierarchicalEnumerable or IHierarchicalDataSource interface 
                    (e.g. SiteMapDataSource, XmlDataSource) may be used as a data source for this control.
				</p>
                <p>
					In this demo, the navbar control is bound to a standard data source of the type XmlDataSource. 
                    This data source supplies the navbar with data from a specific Cameras.xml file. 
                    The ASPxNavBar requires data to be represented as different navbar items combined into groups. Use the data source's 
                    XPath property to obtain the desired sample of data. (See ASPX code)
				</p>
                <p>
					Note that the text within each navbar item is composed by using the navbar's template of the type <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemTextTemplate">ItemTextTemplate</helplink>.
				</p>
                <p>
					Our web controls provide you the ability to bind the properties of the controls that compose a template directly 
                    to the properties of the corresponding data object (DataItem) from the bound data source. For this purpose, 
                    the Container.Item.DataItem property or the Container.EvalDataItem(&lt;expression&gt;) method can be used. 
                    Refer to ASPX code to see how the properties of child controls which populate the navbar's template of 
                    the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemTextTemplate">ItemTextTemplate</helplink> type are bound directly to the specific data of the XmlDataSource's node by using 
                    the Container.EvalDataItem(&lt;expression&gt;) method.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/NavBar.png" HighlightedTitle="Nav Bar">
        <Description>
          <![CDATA[
                <p>
					This demo describes features provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> control. 
                    Use controls in the right panel to change individual property values and see their result within the navbar.
				</p>
                <p>
					In order to disable the expansion/collapse of groups within the navbar, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AllowExpanding">AllowExpanding</helplink> property should be set to false.
				</p>
                <p>
					To enable selection of navbar items on the client side, you need to set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AllowSelectItem">AllowSelectItem</helplink> property to true.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AutoPostBack">AutoPostBack</helplink> property controls whether a round trip to the server is required to process end- user actions 
                    (such as an item click or expansion or collapse of a group) on the server using corresponding server-side events.
				</p>
                <p>
					To force the navbar control to only display one expanded group at any point in time, 
                    the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AutoCollapse">AutoCollapse</helplink> property's value should be set to true. This behaviour emulates the SideBar control.
				</p>
                <p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.EnableHotTrack">EnableHotTrack</helplink> property allows you to specify whether navbar items and groups can visually respond to mouse hover events.
				</p>
                ]]>
        </Description>
        <HighlightedDescription>The ASPxNavBar allows you to introduce extended site navigation capabilities to your ASP.NET solutions.</HighlightedDescription>
      </Demo>
      <Demo Key="ItemLinkMode" Title="Item Link Mode" SeoTitle="Item Render Mode">
        <Description>
          <![CDATA[<p>The demo shows which factors affect the appearance and functionality of clickable navbar items and the style of links represented by items.</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemLinkMode">ItemLinkMode</helplink> property can be used to specify how navbar items are represented as links within the navbar control. By default, this property is set to the ContentBounds value which makes the navbar entirely interactive. If you need to display a simple navbar (such as a set of links within groups), you can set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemLinkMode">ItemLinkMode</helplink> property to TextOnly. In this instance, the resulting HTML code generated to represent the navbar control on the page will be minimal. In order to control the appearance of links the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.LinkStyle">LinkStyle</helplink> property can be used.
				</p><p>
					In this demo, two <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> controls are used with different settings for their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemLinkMode">ItemLinkMode</helplink> property.
				</p><p>
					The first navbar's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemLinkMode">ItemLinkMode</helplink> property is set to ContentBounds thus allowing the entire area of each navbar item to be clickable.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemLinkMode">ItemLinkMode</helplink> property of the second navbar is set to the TextOnly value which makes the clickable content of each navbar item to be bounded by the size of the item's text. As you can imagine, the second navbar has a simpler appearance and simpler HTML.
				</p><p>
					If you want to specify a hover style for a navbar control's items but don't want to use scripts, define the required styles via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.LinkStyle">LinkStyle</helplink> property.
				</p><p>
					In order to completely remove service scripts, you can set the navbar's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AllowExpanding">AllowExpanding</helplink> property to false. This will force the navbar's groups to always be expanded.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ItemBulletStyle" Title="Item Bullet Style" SeoTitle="Item Bullet Style">
        <Description>
          <![CDATA[
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> control allows you to apply a bulleted or numbered list format to group items. Use a group's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ItemBulletStyle">ItemBulletStyle</helplink> property to specify a bullet style for items in the group.
</p>
<p>
Note that if custom images are associated with items (via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.ItemImage">ASPxNavBar.ItemImage</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ItemImage">NavBarGroup.ItemImage</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.Image">NavBarItem.Image</helplink> property), these images are displayed instead of bullet images.
</p>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ItemBulletStyle">ItemBulletStyle</helplink> property is used to demonstrate how different bullet styles can be defined for different groups.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="EnableCallBacks" Title="Callbacks (AJAX)">
        <Description>
          <![CDATA[<p>
					This sample demonstrates the use of the AJAX-based callbacks implemented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> control.
				</p><p>
					The ASPxNavBar control supports AJAX technology by implementing the ability to load the content of a group from the server via a callback when the group is expanded. This approach allows the navbar to avoid the initial transfer of all its group's data to the client, thus optimizing the page's load time.
				</p><p>
					In order to enable the use of callbacks, its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.EnableCallBacks">EnableCallBacks</helplink> property should be set to true. In this instance, the contents of the collapsed groups are not represented on the client. When a group is expanded for the first time, its content is retrieved from the server and then cached on the client. The next time the group is expanded, its content is taken from the client and no callback to the server is performed.
				</p><p>
					In addition, this example uses the ASPxPopupMenu to enable all the groups to be expanded or collapsed on the client side (without PostBack). To do this, you can right-click the navbar and select either the 'Expand All' or 'Collapse All' option.
				</p><p>Note that in this example we purposely pause callback processing on the server side for a second in order to make the Loading Panel visible during this time.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[<p>
					This sample demonstrates the use of the template technology in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink> control. The look of each basic element of the navbar control can be completely changed by creating a specific template which defines how the element will be rendered by a client browser.
				</p><p>
					The navbar control is bound to an XmlDataSource object that retrieves data stored in a specific xml file. The navbar's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.GroupDataBound">GroupDataBound</helplink> event is handled to assign a specific group content template to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.ContentTemplate">ContentTemplate</helplink> property of a group when it is being bound to its data. (See VB or C# code)
				</p><p>ContentTemplate.ascx represents a UserControl that supports the ITemplate interface by implementing the InstantiateIn method and contains a set of child controls which compose the group contents based upon the required design.
				</p><p>
					The DataBindContentUserControl method (see VB or C# code) demonstrates how the UserControl's child controls can be bound to the required data passed to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.GroupDataBound">GroupDataBound</helplink> event.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>
                  This sample demonstrates the capabilities of our client-side event technology. All available client-side events are traced in this demo. Click any <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">navbar</helplink> item or expand/collapse a group within the navbar control to initiate client-side events.
                </p>
                <p>
                  To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
                </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[<p>This example demonstrates how to manipulate a navbar control programmatically on the client using our extended client-side functionality. The client-side programmatic interface is available if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to true or if there is a handler assigned to any client-side event.</p><p>
					In this demo, each group or item of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">navbar</helplink> control is identified using its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.Name">Name</helplink> property. In order to obtain a specific navbar group or item by its name on the client, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.GetGroupByName(name)">GetGroupByName</helplink> or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.GetItemByName(name)">GetItemByName</helplink> method is used respectively. In this demo, the navbar's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.AutoCollapse">AutoCollapse</helplink> mode is enabled which specifies that only one group can be expanded within the navbar at any point in time. In this mode, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.SetActiveGroup(group)">SetActiveGroup</helplink> method can be used to expand the desired group. (See JS code, the ChangeActiveGroup function)
				</p><p>
					A specific navbar item can be selected within each group via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.SetSelectedItem(item)">SetSelectedItem</helplink> method by passing it the required item. (See JS code, the ChangeSelectedItem function)
				</p><p>
					The GroupExpandedChanged function that is a handler of the navbar's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ExpandedChanged">ExpandedChanged</helplink> event (see ASPX and JS code) demonstrates how to synchronize values of the dropdown editors with the expanded group and the group's selected item, if any.
				</p>
				]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[<p>
					This sample demonstrates a few of the server side capabilities of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">navbar</helplink>. Select the desired item from the dropdown editor and define the visual settings of the corresponding navbar item by clicking the buttons. Click any item within the navbar or expand/collapse any group to initiate server-side events which can be traced in the Events monitor.
				</p><p>
					Each navbar item/group has server-side properties which allow you to manipulate the state of the item/group and so change the visualization of the entire navbar control. Thus, the Enabled property allows you to enable or disable any navbar item/group. By using the Visible property, you can show or hide a particular navbar item/group. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.Selected">Selected</helplink> property of an item provides you with the ability to change the item's selected state; the analog of this property for a group object is its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarGroup.Expanded">Expanded</helplink> property which specifies the group's expansion state.
				</p><p>
					The server-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ItemClick">ItemClick</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.HeaderClick">HeaderClick</helplink> events used in this demo allows you to perform any custom action on the server in response to a click on a menu item or a group header. In this example the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.ItemClick">ItemClick</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientNavBar.HeaderClick">HeaderClick</helplink> events are handled to synchronize the dropdown editor's value with the clicked item or group and to display event information in the Events monitor.
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="FloatingActionButton" Title="Floating Action Button" SeoTitle="ASP.NET AJAX Floating Action Button Control"  HighlightedTagNames="dx:ASPxFloatingActionButton">
	  <Keywords>fab</Keywords>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Floating Action Button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton">ASPxFloatingActionButton</helplink>) is a button that appears in front of a container (HTML element or a control) when an end user interacts with the container's elements.
          </p>
          <p>
            The following types of floating action buttons are available:
          </p>
          <ul>
            <li>FAB with a single action - Executes the action once an end user clicks the floating action button.</li>
            <li>FAB with multiple actions - The floating action button serves as a container for multiple actions. When pressed, the floating action button expands nested actions.</li>
          </ul>
          <p>
            The floating action button provides client-side APIs that allow you to specify which type of FAB should be displayed (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetActionContext(contextName)">SetActionContext</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.GetActionContext">GetActionContext</helplink>), change the horizontal/vertical position (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetHorizontalPosition(horizontalPosition)">SetHorizontalPosition</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetVerticalPosition(verticalPosition)">SetVerticalPosition</helplink>), and container element (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetContainerElement(element)">SetContainerElement</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetContainerElementID(id)">SetContainerElementID</helplink>).
          </p>
          <p>
            In this demo, use the options on the right to change the control's settings and see how they affect the control.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="FloatingActionButtonForGridView" Title="External FAB for GridView" SeoTitle="External FAB for GridView">
        <Description>
          <![CDATA[
          <p>
            This demo illustrates how to use the external Floating Action Button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton">ASPxFloatingActionButton</helplink>) with the ASPxGridView control.
          </p>
          <p>
            To associate the floating action button with the grid, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxFloatingActionButton.ContainerElementID">ContainerElementID</helplink> property to the ASPxGridView's container ID. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.SetActionContext(contextName)">SetActionContext</helplink> method allows you to specify which action(s) (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FABActionItem">FABActionItem</helplink>) the FAB should display in response to user interaction (for example, select a row). The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientFloatingActionButton.ActionItemClick">ActionItemClick</helplink> event allows you to specify the grid's behavior depending on the clicked FAB. For example, the grid switches to edit mode (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientGridView.StartEditRow(visibleIndex)">ASPxClientGridView.StartEditRow</helplink>) when a user selects this row and clicks the "Edit" FAB action.
          </p>
          ]]>
        </Description>
        <SourceFile>~/FloatingActionButton/FloatingActionButtonForGridViewPage.aspx</SourceFile>
        <SourceFile>~/FloatingActionButton/FloatingActionButtonForGridViewPage.aspx.cs</SourceFile>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Panel" Title="Panel" SeoTitle="ASP.NET AJAX Panel Control" HighlightedTagNames="dx:FullScreenHyperLink dx:ASPxPanel dx:ASPxCallbackPanel">
      <Demo Key="FixedPosition" Title="Fixed Position">
        <Description>
          <![CDATA[<p>The Panel (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanel">ASPxPanel</helplink>) control is a container for other controls and HTML content. Panels allow you to organize web page layout and manipulate the visibility of multiple controls at once. </p>

<p>This demo illustrates how you can use Panel controls to dock page content to any side of the browser’s screen. To dock a panel to a screen side, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.FixedPosition">FixedPosition</helplink> property value to any of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelFixedPosition">PanelFixedPosition</helplink> enumeration values. In fixed position, the panel has precedence over master pages.</p>

<p>Panels docked to the top and the bottom of a browser screen overlap the panels docked to the left and the right sides of the window. You can change this behavior using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.FixedPositionOverlap">FixedPositionOverlap</helplink> property.</p>
<p>Note: A web page can only contain one panel docked to any individual screen side.</p>
                ]]>
        </Description>
        <SourceFile>~/Panel/FixedPositionPage.aspx</SourceFile>
        <SourceFile>~/Panel/Css/FixedPosition.css</SourceFile>
      </Demo>
      <Demo Key="ResponsiveLayout" Title="Responsive Layout" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/ResponsiveLayout.png" HighlightedTitle="Panel - Responsive Layout">
        <Description>
          <![CDATA[
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanel">ASPxPanel</helplink> control allows you to build adaptive page layouts with ease.</p>
          
<p>The ASPxPanel control can collapse or hide its content. To enable collapse functionality, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.Collapsible">Collapsible</helplink> property is set to <b>true</b>. </p>

<p>When collapse functionality is enabled, the Panel control can function adaptively, i.e., it can automatically collapse or hide its content when the browser window is resized. In this demo, adaptive behavior is defined for individual panels using options accessible via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.SettingsAdaptivity">SettingsAdaptivity</helplink> property.</p>

<p><b>Collapsing Content</b>: The panel collapses its content when browser window dimensions are less than the values defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.CollapseAtWindowInnerHeight">CollapseAtWindowInnerHeight</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.CollapseAtWindowInnerWidth">CollapseAtWindowInnerWidth</helplink> properties.</p>

<p><b>Hiding Content</b>: The panel hides its content when browser window dimensions are less than the values defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.HideAtWindowInnerHeight">HideAtWindowInnerHeight</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.HideAtWindowInnerWidth">HideAtWindowInnerWidth</helplink> properties.</p>

<p>End-users can expand the collapsed panel. The panel allows you to define the content that will be displayed within the expanded panel. In this demo, the panel "TopPanel" <b>ID</b> displays a horizontal menu when screen width is greater than 580px, and displays a vertically oriented menu when screen width is less than 580px and the panel is expanded. Expanded panel content is defined using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.ExpandedPanelTemplate">ExpandedPanelTemplate</helplink> template.</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Panel (ASPxPanel) allows you to build adaptive page layouts with ease. This demo illustrates the panel collapse functionality in a fullscreen demonstration page. </HighlightedDescription>
        <SourceFile>~/Panel/ResponsiveLayoutPage.aspx</SourceFile>
        <SourceFile>~/Panel/Css/ResponsiveLayout.css</SourceFile>
      </Demo>
      <Demo Key="ResponsiveLayoutWithScrolling" Title="Responsive Layout with Scrolling">
        <Description>
          <![CDATA[
          <p>The DevExpress <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPanel">ASPxPanel</helplink> control can dock its content to any side of the screen which is defined using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxCollapsiblePanel.FixedPosition">FixedPosition</helplink> property. When docked, the panel keeps its fixed position regardless of page scrolling. </p>
<p>The Panel control can adapt to browser window size and collapses its content when browser window dimensions are less than the values defined by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.CollapseAtWindowInnerHeight">CollapseAtWindowInnerHeight</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PanelAdaptivitySettings.CollapseAtWindowInnerWidth">CollapseAtWindowInnerWidth</helplink> properties. </p>
<p>This demo illustrates how the collapse behavior and the fixed position can be combined to provide an adaptive menu that is always visible for a web page. </p>
               ]]>
        </Description>
        <SourceFile>~/Panel/ResponsiveLayoutWithScrollingPage.aspx</SourceFile>
        <SourceFile>~/Panel/Css/ResponsiveLayoutWithScrolling.css</SourceFile>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Ribbon" Title="Ribbon" SeoTitle="ASP.NET Ribbon Control" HighlightedTagNames="dx:ASPxRibbon">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control allows you to introduce the look, feel and behavior of a ribbon-based UI in your application. 
                </p><p>
The following code demonstrates how to add a ribbon to your project and manually populate it with tabs, groups and items. For ribbon elements, the name, text, and image values are specified.
              </p>
              <code lang="Html">
                <dx:ASPxRibbon ID="ASPxRibbon" runat="server">
                    <Tabs>
                        <dx:RibbonTab Name="Home" Text="Home">
                            <Groups>
                                <dx:RibbonGroup Name="Tasks" Text="Tasks">
                                    <Items>
                                        <dx:RibbonButtonItem Name="TasksList" 
                                          Text="Tasks List" Size="Large">
                                            <LargeImage 
                                              IconID="tasks_task_32x32" />
                                        </dx:RibbonButtonItem>
                                        <dx:RibbonButtonItem Name="NewTask" 
                                          Text="New">
                                            <SmallImage 
                                              IconID="tasks_newtask_16x16" />
                                        </dx:RibbonButtonItem>
                                    </Items>
                                </dx:RibbonGroup>
                                <%-- And other groups with items --%>
                            </Groups>
                        </dx:RibbonTab>
                    </Tabs>
                </dx:ASPxRibbon>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=Rx4DKR_NdvM" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/15872/aspnet-webforms-controls/site-navigation-and-layout/ribbon/concepts/item-types" Title="Item Types" />
        <KeyFeature Name="Data Binding" DemoUrl="~/Ribbon/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxRibbon can be populated with tab, group, and item information taken from a data source containing hierarchical data.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Responsive Layout" DemoUrl="~/Ribbon/Features.aspx">
          <Description>
            <![CDATA[
             ASPxRibbon has an adaptive layout. When a ribbon has insufficient space, the number of items displayed in a group can be reduced and the groups are collapsed.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/Ribbon/Templates.aspx">
          <Description>
            <![CDATA[
             The look of the ASPxRibbon control's elements can be modified by using a specific template that defines how an element will be rendered by a client browser.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Rich Client Side Events" DemoUrl="~/Ribbon/ClientSide.aspx">
          <Description>
            <![CDATA[
            A comprehensive client-side API is available for the ribbon. This functionality, coupled with the ability to handle a rich set of client events, gives you full control over the behavior on the client side. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[
                <p>
                This demo describes features provided by the DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control. Use controls in the upper panel to change individual property values and see the result in the ribbon. The descriptions of the utilized properties are listed below.
                </p>
                <ul>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.AllowMinimize">AllowMinimize</helplink> – specifies whether or not a ribbon control can be minimized. When this functionality is disabled, the minimize button is not displayed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowFileTab">ShowFileTab</helplink> – specifies the file tab visibility.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowTabs">ShowTabs</helplink> – specifies the tab header visibility.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowGroupLabels">ShowGroupLabels</helplink> – specifies the group label visibility.</li>
                </ul>
                <p>The ribbon is covered by <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupControl">ASPxPopupControl</helplink> to demonstrate the ribbon responsive layout. Use the popup control's size grip to see this functionality in action.</p>
                <p>In this demo the following client-side events are handled (See the ASPX code).</p>
                <ul>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.FileTabClicked">FileTabClicked</helplink> event is handled to flag a clicked file tab.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.CommandExecuted">CommandExecuted</helplink> event occurs after an end-user executes an action on a ribbon item (e.g., clicks a button, changes an editor value). The event is handled to display information about the item related to the event. The optional <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbonCommandExecutedEventArgs.parameter">parameter</helplink> event argument property provides additional information about the command being processed.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.DialogBoxLauncherClicked">DialogBoxLauncherClicked</helplink> event fires after a dialog box launcher, which is an arrow icon located in the bottom right corner of a group, has been clicked. The event argument <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbonDialogBoxLauncherClickedEventArgs.group">group</helplink> property identifies a group whose dialog box launcher is clicked.</li>
                </ul>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control is provided with the following <helplink href="https://docs.devexpress.com/AspNet/15872/aspnet-webforms-controls/site-navigation-and-layout/ribbon/concepts/item-types">item types</helplink>: Button, Check Box, Color Button, Combo Box, Date Edit, Drop-Down Button, Drop-Down Toggle Button, Drop-Down Gallery, Gallery Bar, Option Button, Spin Edit, Template Item, Text Box, and Toggle Button.</p>
                ]]>
        </Description>
        <SourceFile>~/Ribbon/Scripts/Ribbon.js</SourceFile>
        <SourceFile>~/Ribbon/Css/Ribbon.css</SourceFile>
              <HighlightedDescription>Dialog box launcher is an arrow icon located in the bottom right corner of a group, and can be used to provide additional functionality for ribbon groups, e.g., show a dialog box with extended group options. This demo illustrates the main features provided by the Ribbon control, including the dialog box launcher functionality.</HighlightedDescription>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding">
        <Description>
          <![CDATA[
                <p>
                This demo illustrates how the DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control can be populated with information taken from a data source. The ASPxRibbon control can be bound to a data source in a standard manner - using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DataSourceID</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property. While binding, the control automatically creates tabs, groups and items; and retrieves their property values from the corresponding data items. 
                </p>
                <p>
You can specify the data source fields to which the tabs, groups and items properties are mapped using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.TabDataFields">TabDataFields</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.GroupDataFields">GroupDataFields</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ItemDataFields">ItemDataFields</helplink> properties, respectively.
                </p>
                <p>
Additionally, ASPxRibbon provides specific events related to data binding that can be handled according to your application logic. 
                </p>
                <ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.TabDataBound">TabDataBound</helplink> – allows you to customize the settings of an individual tab immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.GroupDataBound">GroupDataBound</helplink> – allows you to customize the settings of an individual group immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ItemDataBound">ItemDataBound</helplink> – allows you to customize the settings of an individual item immediately after it is bound to data.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataBound">DataBound</helplink> – occurs after the control data binding is complete, and allows you to customize the control. </li>
                </ul>
                <p>
In this demo, the ribbon control is bound to a standard XmlDataSource type data source by specifying the DataSourceID property. The tab, group, and item property values are obtained automatically because the data item attributes are named according to the corresponding default property values.
                </p>
                ]]>
        </Description>
        <SourceFile>~/App_Data/Ribbon/MathInterface.xml</SourceFile>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control supports template technology, allowing you to customize a control's appearance and layout.
          </p><p>
The look of the ASPxRibbon control's default elements can be modified by using a specific template that defines how an element will be rendered by a client browser. This control allows you to create templates for two elements: file tab (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabTemplate">FileTabTemplate</helplink>) and item (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTemplateItem.Template">Template</helplink>).
          </p><p>
 In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabTemplate">FileTabTemplate</helplink> property is used to replace tab text with an arrow image that invokes a popup menu. The content of a ribbon item is defined by its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTemplateItem.Template">Template</helplink> property. 
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="MenuEmulation" Title="Menu Emulation">
        <Description>
          <![CDATA[
          <p>
          This example demonstrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control can be customized to implement the look and feel of a menu. For this purpose, all items are displayed with large icons (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonItemBase.Size">Size</helplink> property is set to <b>Large</b>). The following properties are used to hide ribbon elements.
          </p>
          <ul>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowFileTab">ShowFileTab</helplink> – specifies the file tab visibility.</li>
           <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowTabs">ShowTabs</helplink> – specifies the tab header visibility.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ShowGroupLabels">ShowGroupLabels</helplink> – specifies the group label visibility.</li>
          </ul>
          <p>The "<b>Demonstrate the ribbon adaptive layout functionality</b>" check box allows you to change the control width to demonstrate a ribbon’s adaptive layout design. When a ribbon control has insufficient space to display all of its items, groups with more than one item are collapsed, and each collapsed group displays an expand button.</p>
          <p><b>Note</b></p>
          <p>Although you can use the ribbon to emulate a menu, DevExpress offers the <a href="../Menu/Overview.aspx">ASPxMenu</a> control, which adds menu functionality to your application.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Galleries" Title="Galleries">
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control provides two types of gallery items: <b>gallery bar</b> and <b>drop-down gallery</b>. These gallery items are designed to present the visual results-oriented choices from which users can select.</p>
<p><b>Gallery Bar</b></p> 
<p>The gallery bar (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryBarItem">RibbonGalleryBarItem</helplink>) is a ribbon item that implements the gallery bar functionality. End users can scroll items in the gallery bar or invoke the drop-down window. </p>
<p>The number of item columns displayed in a gallery bar is changed based on the control width. Try to resize the ribbon to see this feature in action. However, you can limit the number of columns by specifying the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryBarItem.MinColumnCount">MinColumnCount</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryBarItem.MaxColumnCount">MaxColumnCount</helplink> properties. </p>
<p>The properties of the gallery bar's drop-down window can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryBarItem.PropertiesDropDownGallery">PropertiesDropDownGallery</helplink> property. </p>
<p><b>Drop-Down Gallery</b></p>
<p>The drop-down gallery (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryDropDownItem">RibbonGalleryDropDownItem</helplink>) is a ribbon item that combines the drop-down button and gallery functionalities. </p> 
<p>The properties of the item's drop-down window can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryDropDownItem.PropertiesDropDownGallery">PropertiesDropDownGallery</helplink> property. It allows you to specify the number of rows (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonDropDownGalleryProperties.RowCount">RowCount</helplink>) and columns (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGalleryProperties.ColumnCount">ColumnCount</helplink>) displayed in the window. </p>
          ]]>
        </Description>
<HighlightedDescription>The DevExpress ASP.NET Ribbon (ASPxRibbon) control provides two types of gallery items: gallery bar and drop-down gallery. This demo illustrates the main settings of these items.</HighlightedDescription>
      <SourceFile>~/Ribbon/Css/Galleries.css</SourceFile>
      <SourceFile>~/Ribbon/Css/Ribbon.css</SourceFile>
      <SourceFile>~/Ribbon/Scripts/Ribbon.js</SourceFile>
      </Demo>
      <Demo Key="ContextTabs" Title="Context Tabs" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/ContextTabs.png" HighlightedTitle="Ribbon - Context Tabs">
        <Description>
          <![CDATA[
          <p>A context tab is a hidden tab that is displayed on demand, e.g., when a corresponding element, such as an image or a table, is selected. One element can correspond to several context tabs. Therefore, the tabs are combined into categories. The collection of categories is accessible by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.ContextTabCategories">ContextTabCategories</helplink> property.</p> 
  <p>You can specify the following category properties.</p>
  <ul>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonContextTabCategory.Name">Name</helplink> property specifies the name of the category.</li>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonContextTabCategory.Color">Color</helplink> property specifies the color of a category tab's header.</li>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonContextTabCategory.Tabs">Tabs</helplink> property contains a collection of category tabs.</li>
  </ul>
<p>To change the visibility of category tabs, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.SetContextTabCategoryVisible(categoryName-visible)">SetContextTabCategoryVisible</helplink> method.</p>
<p>In this demo, two context tab categories are provided.</p>
  <ul>
<li>The <b>Picture tools</b> category provides a <b>Layout</b> tab containing image-related items. </li>
<li>The <b>Table tools</b> category provides <b>Design</b> and <b>Layout</b> tabs containing table-related items. </li>
  </ul>
          ]]>
        </Description>
        <SourceFile>~/Ribbon/Scripts/Ribbon.js</SourceFile>
        <SourceFile>~/Ribbon/Css/Ribbon.css</SourceFile>
<HighlightedDescription>With the ASPxRibbon control, you can display element-related items on demand by placing them on context tabs. This demo illustrates how context tabs can be shown and hidden based on the selected element type.</HighlightedDescription>
      </Demo>
      <Demo Key="OneLineMode" Title="One Line Mode" >
        <Description>
          <![CDATA[
          The DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control can display all items within an active tab in one line, which makes the ribbon look more compact. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.OneLineMode">OneLineMode</helplink> property to true to enable this mode.
           ]]>
        </Description>
        <SourceFile>~/Ribbon/Scripts/Ribbon.js</SourceFile>
        <SourceFile>~/Ribbon/Css/Ribbon.css</SourceFile>
<HighlightedDescription>This demo illustrates the DevExpress ASP.NET Ribbon (ASPxRibbon) control ability to display all items within an active tab in one line.</HighlightedDescription>
      </Demo>
      <!--<Demo Key="KeyboardSupport" Title="Keyboard Support" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/KeyboardSupport.png" HighlightedTitle="Ribbon - Keyboard Support">-->
      <Demo Key="KeyboardSupport" Title="Keyboard Support" HighlightedTitle="Ribbon - Keyboard Support">
        <Description>
          <![CDATA[
          <p>
The DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) control provides end-users with the capability to navigate through ribbon items using the keyboard. To enable this behavior, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.KeyboardSupport">KeyboardSupport</helplink> property to true. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.KeyTipModeShortcut">KeyTipModeShortcut</helplink> property allows you to specify a keyboard shortcut, which when pressed will show tab key tips. The key tips can also be displayed by calling the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.ShowKeyTips">ShowKeyTips</helplink> method.
</p>
<p>
The ribbon control automatically generates access keys for tabs, groups, and items. However, you can specify the required access key manually by using the following properties.
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonTab.AccessKey">RibbonTab.AccessKey</helplink> specifies the access key for a ribbon tab.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonGroup.AccessKey">RibbonGroup.AccessKey</helplink> specifies the access key for a ribbon group.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.RibbonItemBase.AccessKey">RibbonItemBase.AccessKey</helplink> specifies the access key for a ribbon item.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.FileTabAccessKey">ASPxRibbon.FileTabAccessKey</helplink> specifies the access key for a ribbon file tab.</li>
</ul>
<p>
You can disable the access key auto generation by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.AutoGenerateAccessKeys">AutoGenerateAccessKeys</helplink> property to false. However, in this case, you should specify access key for every element manually.
</p>
<p>Note that an access key is in effect provided that the corresponding key tip is currently displayed.</p>
          ]]>
        </Description>
        <SourceFile>~/Ribbon/Scripts/Ribbon.js</SourceFile>
        <SourceFile>~/Ribbon/Css/Ribbon.css</SourceFile>
        <HighlightedDescription>The ASPxRibbon control can be used by keyboard. This demo illustrates how to enable the control keyboard support and customize the element access keys. </HighlightedDescription>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
          <p>
                This sample demonstrates the capabilities of our client-side event management technology. All available client-side events are traced in this demo. Play with the DevExpress ASP.NET Ribbon (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>) interface elements to initiate client-side events. 
               </p><p> 
The ASPxRibbon control provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the ASPxRibbon control functionality. 
</p><p>
The following client events are available for the ASPxRibbon control:
</p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.ActiveTabChanged">ActiveTabChanged</helplink> – fires after the active tab is changed.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.FileTabClicked">FileTabClicked</helplink> – fires after a file tab is clicked.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.CommandExecuted">CommandExecuted</helplink>  – occurs after an action is executed on a ribbon item (e.g., an end-user clicks a button or changes an editor value).</li>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> – occurs on the client side after the control is initialized, but prior to its display in the browser.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.MinimizationStateChanged">MinimizationStateChanged</helplink> – occurs when the ribbon minimization state is changed.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientRibbon.DialogBoxLauncherClicked">DialogBoxLauncherClicked</helplink> - fires after a dialog box launcher, which is an arrow icon located in the bottom right corner of a group, has been clicked.</li>
</ul>
<p>
To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic. 
</p>
                ]]>
        </Description>
      </Demo>
    
    </DemoGroup>

    <DemoGroup Key="SiteMap" Title="SiteMap Control" SeoTitle="ASP.NET AJAX Site Map Control" HighlightedTagNames="dx:ASPxSiteMapControl">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Site Map (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink>) control allows you to display site map data across multiple columns. The control provides advanced style customization mechanisms, including node templates, so you can transform the control's layout and define non-typical styles for the control's elements.
                </p><p>
                Templates can be specified for all site map nodes at once, or for nodes at each particular level. You can also specify templates for column separators. 
              </p>
              <code lang="Html">
                <dx:ASPxSiteMapControl ID="ASPxSiteMapControl1" runat="server" 
                    DataSourceID="ASPxSiteMapDataSource1">
                </dx:ASPxSiteMapControl>
                <dx:ASPxSiteMapDataSource ID="ASPxSiteMapDataSource1" 
                  runat="server" SiteMapFileName="~/Overview.sitemap" />
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/SiteMap/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxSiteMapControl supports standard data binding options, so any object that implements the IHierarchicalEnumerable or IHierarchicalDataSource interface can be used as a data source for this control. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Flow Layout" DemoUrl="~/SiteMap/FlowLayout.aspx">
          <Description>
            <![CDATA[
             A flow layout allows the site map data to be displayed linearly, with a specific separator. 
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/SiteMap/Templates.aspx">
          <Description>
            <![CDATA[
             Templates can be specified for all site map nodes at once, or for nodes at each particular level. You can also specify templates for column separators. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates the binding of an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink> to a data source. The ASPxSiteMapControl supports standard data binding options. In this instance any object which implements the IHierarchicalEnumerable or IHierarchicalDataSource interface (e.g. SiteMapDataSource, XmlDataSource) may be used as a data source for this control.
				</p>
                <p>
					In this demo, the site map control is bound to a data source of type <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapDataSource">ASPxSiteMapDataSource</helplink>. The ASPxSiteMapDataSource is connected with a specific SiteMapProvider. This provider is registered in the web.config file where it's pointed to the file from which to obtain the site map data. Note that the ASPxSiteMapDataSource extends the functionality of a standard site map data source component by allowing the site map data to be loaded from a specific file without assigning a site map provider to the SiteMapProvider property.
				</p>
                <code lang="xml">    
                    <siteMap>
                        <providers>
							<add name="ProductsWebSiteProvider" type="System.Web.XmlSiteMapProvider"
                                siteMapFile="SiteMapProducts.sitemap"/>
							<add name="MenuSiteMapProvider" type="System.Web.XmlSiteMapProvider" 
                                siteMapFile="~/App_Data/Menu.sitemap"/>
						</providers>
					</siteMap>   
                </code>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[<p>
					This demo illustrates some of the features available to you when using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink>.
				</p><p>
					The ASPxSiteMapControl allows you to display site map data across multiple columns. These can be defined by using the Columns property. When the ColumnCount property equals 0, then a single column will be displayed (by default). If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.ColumnCount">ColumnCount</helplink> is greater than the number of nodes of the top (zero-based) hierarchy level, then the number of top level nodes will be used.
				</p><p>
					In order to define the depth of the displayed site map data (the number of nesting levels displayed), the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl.MaximumDisplayLevels">MaximumDislpayLevels</helplink> property can be used. By default, this property is set to 0 which means that all nesting levels are displayed.
				</p><p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.RepeatDirection">RepeatDirection</helplink> specifies the direction in which categories of a control are displayed. Horizontal specifies that the categories of a control are displayed in rows loaded from left to right, then top to bottom, until all categories are rendered. Vertical specifies that the categories  of a control are displayed in columns loaded from top to bottom, then left to right, until  all items are rendered.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="FlowLayout" Title="Flow Layout">
        <Description>
          <![CDATA[<p>
					In this demo a flow layout is applied to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink>, allowing the site map data to be displayed linearly, with a specific separator. This method saves space.
				</p><p>
					In order to specify the hierarchy level of nodes which should be displayed using a flow layout, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.FlowLayoutLevel">FlowLayoutLevel</helplink> property can be used. In this sample, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.FlowLayoutLevel">FlowLayoutLevel</helplink> property is set to 1 which means that a flow layout is applied to the nodes located at the nesting level whose index equals <b>1</b> (these nodes are the immediate children of the top level nodes).
				</p><p>
					The number of items displayed in a linear flow can be limited using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl.FlowLayoutMaximumDisplayItems">FlowLayoutMaximumDisplayItems</helplink> property. In this demo, you can change this number via the Display SubItems dropdown editor.
				</p><p>
					The item separator displayed between nodes which are rendered using a flow layout can be specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl.FlowLayoutItemSeparator">FlowLayoutItemSeparator</helplink> property.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.FlowLayoutTextLineHeight">FlowLayoutTextLineHeight</helplink> property allows you to control the height of lines which contain the nodes rendered using a flow layout.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Categorized" Title="Categorized" SeoTitle="Composite Site Map">
        <Description>
          <![CDATA[<p>
					This sample demonstrates how the site map data can be displayed in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink>, divided into row ordered categories.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.Categorized">Categorized</helplink> property set to true forces each top level node to serve as a category name and open a group, where its child nodes are contained. Such groups are always displayed one under another within the site map control. Nodes within a group are displayed organized into columns.
				</p><p>
					Note that in this example a specific site map file is assigned for the site map control via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapDataSource.SiteMapFileName">SiteMapFileName</helplink> property of the bound <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapDataSource">ASPxSiteMapDataSource</helplink> component. This property is assigned at design-time which facilitates the control's customization.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[<p>
					This sample demonstrates the use of the template technology found in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControl">ASPxSiteMapControl</helplink>. Template types available in the site map control provide powerful means by which to transform the control's layout, define non-typical styles for the control's elements and supply the control with specific visual effects.
				</p><p>
					This demo represents the products section of a site. Each product can have one of the three following states at any point in time - "new", "update", "coming soon".
				</p><p>
					In order to define a product's type, the type attribute is created in the "~/App_Data/SiteMap/Products.sitemap", as follows:
				</p>
                <code lang="xml">
                    <siteMapNode ... type="update" />
                </code>                            
                <p>
					The ASPxSiteMapControl's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSiteMapControlBase.NodeTemplate">NodeTemplate</helplink> is defined in aspx code so that the representation of the ASPxSiteMapControl can change based on the obtained value of the created type attribute. (See ASPX code)
				</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Splitter" Title="Splitter" SeoTitle="ASP.NET AJAX Splitter Control" HighlightedTagNames="dx:ASPxSplitter">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Splitter (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink>) control allows you to split a web page into multiple sections or panels, and optionally allows end-users to resize panels as necessary.
                </p><p>
The following code demonstrates how to add a splitter to your project and manually create two panes by populating them with DIV elements.
              </p>
              <code lang="Html">
                <dx:ASPxSplitter ID="ASPxSplitter1" runat="server">
                    <Panes>
                        <dx:SplitterPane>
                            <ContentCollection>
                                <dx:SplitterContentControl runat="server">
                                    <div>Left container</div>
                                </dx:SplitterContentControl>
                            </ContentCollection>
                        </dx:SplitterPane>
                        <dx:SplitterPane>
                            <ContentCollection>
                                <dx:SplitterContentControl runat="server">
                                    <div>Right container</div>
                                </dx:SplitterContentControl>
                            </ContentCollection>
                        </dx:SplitterPane>
                    </Panes>
                </dx:ASPxSplitter>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Unlimited Nesting">
          <Description>
            <![CDATA[
             ASPxSplitter supports unlimited nested splitter panes for creating complex layouts.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Min/Max Size" DemoUrl="~/Splitter/MinMaxSize.aspx">
          <Description>
            <![CDATA[
            Splitter allows you to set the maximum and minimum size of its panes.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Content URL" DemoUrl="~/Splitter/ContentUrl.aspx">
          <Description>
            <![CDATA[
             External web pages can be displayed within splitter panes.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Scrollbar Support" DemoUrl="~/Splitter/ScrollBars.aspx">
          <Description>
            <![CDATA[
             Each splitter pane can display vertical and horizontal scrollbars. Scrollbars can also be disabled.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Pane Auto Sizing" DemoUrl="~/Splitter/PaneAutoSizing.aspx">
          <Description>
            <![CDATA[
             ASPxSplitter can automatically adjust the size of its panes based on the content.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Full-Screen Mode" DemoUrl="~/Splitter/FullscreenMode.aspx">
          <Description>
            <![CDATA[
             ASPxSplitter supports full-screen mode. In full screen mode, a control fills the entire page and can be resized along with the browser window.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="ControlsResizing" Title="Controls Resizing">
        <Description>
          <![CDATA[<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> panes can have different content inside, including controls. In this demo, the ASPxSplitter control panes contain the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxListEdit">ASPxListEdit</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTextBox">ASPxTextBox</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMemo">ASPxMemo</helplink> controls. Splitter separators are used to resize the controls.
				</p><p>
					Moving any splitter separator raises the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneResized">PaneResized</helplink> event, which is used in this demo to modify an embedded controls' size. To automatically resize embedded controls and editors, utilize the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControl.SetWidth(width)">SetWidth</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControl.SetHeight(height)">SetHeight</helplink> methods.
				</p>]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Splitter (ASPxSplitter) control helps you organize web content by dividing it into multiple sections or panels. The ASPxSplitter also assists your end-users with customizing their views at runtime and resizing embedded controls. This demo illustrates how the ASPxSplitter can contain other controls such as the Grid View, List Edit, Text Box and Memo, to help you with the layout.</HighlightedDescription>
      </Demo>
      <Demo Key="ScrollBars" Title="Scroll Bars">
        <Description>
          <![CDATA[<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> allows you to use scroll bars for more efficient work with a lot of content within the panes. This behavior is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ScrollBars">ScrollBars</helplink> property. Depending on this property's setting, the following modes are available:
				</p><p>None - none of the scroll bars are available within the splitter pane.
				</p><p>Horizontal - only a horizontal scroll bar is available within the splitter pane.
				</p><p>Vertical - only a vertical scroll bar is available within the splitter pane.
				</p><p>Both - both vertical and horizontal scroll bars are available within the splitter pane.
				</p><p>Auto - ASPxSplitter automatically enables a horizontal or/and vertical scroll bar within the pane, depending upon the pane content.
				</p><p>
					In this demo, the ASPxSplitter contains two panes. The left pane includes only vertical scroll bar (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ScrollBars">ScrollBars</helplink> property is set to Vertical), the second pane's scroll bars are enabled automatically by the control (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ScrollBars">ScrollBars</helplink> property is set to Auto).
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="MinMaxSize" Title="Min/Max Size" SeoTitle="Min Size and Max Size">
        <Description>
          <![CDATA[<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> allows you to set the maximum and minimum size of its panes. An pane's maximum size is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.MaxSize">MaxSize</helplink> property, the minimum size - by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.MinSize">MinSize</helplink> property.
				</p><p>
					In this demo, the left splitter pane's minimum and maximum size is set to 100px and 400px correspondingly. The splitter pane's size can be changed by using the splitter separator.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="CollapseExpand" Title="Collapse/Expand" SeoTitle="Collapse and Expand Panes">
        <Description>
          <![CDATA[<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> control allows you to expand or collapse its panes. This behavior is controlled by the <b>ShowCollapseBackwardButton</b> and <b>ShowCollapseForwardButton</b> properties, which can be specified directly for all panes (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter.ShowCollapseBackwardButton">ASPxSplitter.ShowCollapseBackwardButton</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter.ShowCollapseForwardButton">ASPxSplitter.ShowCollapseForwardButton</helplink> properties) or for individual panes (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ShowCollapseBackwardButton">SplitterPane.ShowCollapseBackwardButton</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ShowCollapseForwardButton">SplitterPane.ShowCollapseForwardButton</helplink> properties).
				</p><p>
					When the splitter pane(s) is collapsed, it allows another pane(s) content to be expanded for more convenient work.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="LiveResizing" Title="Live Resizing">
        <Description>
          <![CDATA[<p><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> supports live resizing mode. This functionality provides you with adjusting the pane content in real time during the pane resizing. To enable this feature use the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter.ResizingMode">ResizingMode</helplink> property.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="PaneAutoSizing" Title="Pane Auto Sizing" >
        <Description>
          <![CDATA[
<p>
This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink>'s capability to auto adjust the size of its panes to their inside content. To enable this functionality, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.AutoHeight">AutoHeight</helplink> or/and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.AutoWidth">AutoWidth</helplink> properties of a pane. When pane auto sizing is used, the sizes (height and width) explicitly defined for a pane are not in effect, because they change according to the pane's content. 
</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="ContentUrl" Title="Content URL">
        <Description>
          <![CDATA[<p>
<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> can be used as a website navigation control. Splitter panes allow you to display any external web page specified by its URL. Use a pane's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ContentUrl">ContentUrl</helplink> property to load the specified web page and display it within the pane.
</p>

<p>
In this demo, the left splitter pane contains ASPxNavBar with three items whose <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.NavigateUrl">NavigateUrl</helplink> properties refer to different web pages. The right splitter pane's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ContentUrlIFrameName">ContentUrlIFrameName</helplink> property is set to a specific name and this name is assigned to the ASPxNavBar's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar.Target">Target</helplink> property. As a result, a click on a navbar item automatically displays the corresponding page within the right splitter pane because the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.NavBarItem.NavigateUrl">NavigateUrl</helplink> property value transfers to the pane's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ContentUrl">ContentUrl</helplink> property. In addition, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.SplitterPane.ShowCollapseBackwardButton">ShowCollapseBackwardButton</helplink> property is enabled for the left pane that allows end-users to hide it and expand the loaded page on the entire available space.
</p>]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
                  <p>
					          This sample demonstrates the capabilities of our client-side event technology for the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> control. All available client-side events are traced in this demo - the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneResizing">PaneResizing</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneResized">PaneResized</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneCollapsing">PaneCollapsing</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneCollapsed">PaneCollapsed</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneExpanding">PaneExpanding</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneExpanded">PaneExpanded</helplink> events. Resize or expand/collapse any splitter pane to initiate client-side events.
				          </p>
                  <p>
					          The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneResizing">PaneResizing</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneCollapsing">PaneCollapsing</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneExpanding">PaneExpanding</helplink> client-side events can be used to cancel the execution of specific commands. Handling the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.PaneResizing">PaneResizing</helplink> client event is useful for creating a complex layout of the ASPxSplitter.
				          </p>
                  <p>
                    To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
                  </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideFunctionality" Title="Client-Side Functionality">
        <Description>
          <![CDATA[<p>
					This example demonstrates how you can manipulate the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> control programmatically on the client using enhanced client-side functionality. The client-side programmatic interface is available if the EnableClientSideAPI property is set to true, or if there is a handler assigned to any client-side event.
				</p><p>
					The ASPxSplitter control allows its panes to be resized in real time. This functionality can be enabled/disabled by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitter.SetAllowResize(allowResize)">SetAllowResize</helplink> method on the client side. (See JS code)
				</p><p>
					In this demo, you can expand or collapse the splitter panes by using a specific button whose text is changed automatically, depending upon the action. On the client side, it is implemented within the CollapseExpandButtonClick function by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitterPane.Expand">ASPxClientSplitterPane.Expand</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitterPane.Collapse(maximizedPane)">ASPxClientSplitterPane.Collapse</helplink> methods. (See JS code)
				</p><p>
					It's possible to change the splitter pane's content on the client side by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitterPane._members">SetContentUrl</helplink> method within the UpdateContentUrl function.
				</p><p>
					The size of a pane can be changed programmatically by using the pane's client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitterPane.SetSize(size)">SetSize</helplink> method. A pane's current size can be obtained via the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSplitterPane.GetSize">GetSize</helplink> method.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="FullscreenMode" Title="Fullscreen Mode">
        <Description>
          <![CDATA[<p>
        This demo illustrates how to use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSplitter">ASPxSplitter</helplink> control in full-screen mode, when a control fills an entire page and can be resized together with the browser window. To enable this mode, set the corresponding property to true, as shown below.
        </p>
        <code lang="Html">
        <dx:ASPxSplitter ID="ASPxSplitter1" runat="server" FullscreenMode="True" ... >
        </code>
                ]]>
        </Description>
        <SourceFile>~/Splitter/SamplePages/FullscreenModePage.aspx</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="TabControl" Title="Tab Control" SeoTitle="ASP.NET AJAX Tab and Page Controls" HighlightedTagNames="dx:ASPxTabControl dx:ASPxPageControl">
      <Overview Title="Overview">
        <Keywords>aspxpagecontrol, aspxtabcontrol</Keywords>
        <Description>
          <![CDATA[
              <p>
               The DevExpress ASP.NET Page-Tab Strip allows you to build tabbed interfaces in websites. The suite includes two components. You can either use the ASPxTabControl component to display only tabs or use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink> to associate specific page content with each tab. Both controls were built to generate minimal HTML code, work on the client-side without hassles, and fully support AJAX for on-demand page loading via callbacks.
               </p><p>
The following code demonstrates how to add <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl">ASPxTabControl</helplink> to your project and manually populate it with a tab collection that specifies tab text.

              </p>
              <code lang="Html">   
                <dx:ASPxTabControl ID="ASPxTabControl1" runat="server">
                    <Tabs>
                        <dx:Tab Text="Home" />
                        <dx:Tab Text="Products" />
                        <dx:Tab Text="Support" />
                        <dx:Tab Text="Downloads" />
                    </Tabs>
                </dx:ASPxTabControl>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3579/aspnet-webforms-controls/site-navigation-and-layout/page-control-and-tab-control/aspxtabcontrol-overview" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/TabControl/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxTabControl can be bound to a data source.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Tab Scrolling" DemoUrl="~/TabControl/TabScrolling.aspx">
          <Description>
            <![CDATA[
             ASPxTabControl supports the scrolling of tabs within the tab header.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Multi-Row Tabs" DemoUrl="~/TabControl/MultiRow.aspx">
          <Description>
            <![CDATA[
             ASPxTabControl allows you to display its header in several rows.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="AJAX Support" DemoUrl="~/TabControl/EnableCallBacks.aspx">
          <Description>
            <![CDATA[
             The page control can load the content of pages via callbacks. So, initially, only the content of the active page is loaded onto the client. When an end-user switches pages, the content for that page is loaded via callbacks.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Templates" DemoUrl="~/TabControl/Templates.aspx">
          <Description>
            <![CDATA[
             You can specify a common template for tabs in either an active or inactive state, or you can specify a template for each tab individually.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/PageControl.png" HighlightedTitle="Page Control">
        <Description>
          <![CDATA[<p>
					This demo describes some of the features available to you when using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink> control.
				</p><p>
					The position of tabs within the control (Left, Right, Top, Bottom) can be defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabPosition">TabPosition</helplink> property. In order to align tabs in the defined position, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property. Note that when tabs are positioned to the left or right of the control, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> defines their vertical alignment. In this instance, the Left value is treated as Top, and the Right value is always treated as Bottom.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.AutoPostBack">AutoPostBack</helplink> property controls whether a round trip to the server is required when the active tab is changed to process an action on the server using corresponding server-side events.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.EnableHotTrack">EnableHotTrack</helplink> property allows you to specify whether tabs can visually respond to mouse hover events.
				</p>]]>
        </Description>
      <HighlightedDescription>The DevExpress ASP.NET Page Control (ASPxPageControl) control allows you to build tabbed interfaces in websites. This demo illustrates the main features provided by this control. </HighlightedDescription>
      </Demo>
      <Demo Key="DataBinding" Title="Data Binding">
        <Keywords>databinding</Keywords>
        <Description>
          <![CDATA[
                <p>
					This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl">ASPxTabControl</helplink> can be populated with tab information taken from a data source. The ASPxTabControl supports standard data binding - any object that implements the IHierarchicalEnumerable or IHierarchicalDataSource interface (e.g. SiteMapDataSource, XmlDataSource) may be used as a data source for this control.
				</p>
                <p>
					In this sample, the ASPxTabControl control is bound to the XmlDataSource component that obtains data from an xml file with the following structure.
				</p>
                <p>
                    <code lang=xml>
                        <Products>
						    <Product Name="..." Text="..." ID="..." />
						    ...
					    </Products>
                    </code>
                </p>
                <p>
					The ASPxTabControl implements specific properties that  point to the data fields containing the necessary data. These are the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NameField">NameField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NavigateUrlField">NavigateUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TabImageUrlField">TabImageUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ActiveTabImageUrlField">ActiveTabImageUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TextField">TextField</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ToolTipField">ToolTipField</helplink> properties.
					If these properties are not defined, the ASPxTabControl is able to automatically bind to data fields whose names coincide with property names of a Tab object (such as the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Name">Name</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Tab.NavigateUrl">NavigateUrl</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.Url">TabImage.Url</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.Url">ActiveTabImage.Url</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Text">Text</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.ToolTip">ToolTip</helplink>).
				</p>
                <p>
					In this demo, navigate locations for tabs are composed by formatting values of the 'id' data field in a specific manner. The 'id' data field is pointed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NavigateUrlField">NavigateUrlField</helplink> property, and a format string is defined via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.NavigateUrlFormatString">NavigateUrlFormatString</helplink> property.
				</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="MultiRow" Title="Multi-Row Tabs">
        <Description>
          <![CDATA[<p>
          This demo illustrates how to represent the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink>'s tab header in several rows.
          To start a new line from a certain tab, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.NewLine">NewLine</helplink> property of the required tab object to true.
          In this example, the "Data" tab page has the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.NewLine">NewLine</helplink> property set to true.
        </p><p>
          Multi-row tab representation works only when the tab header is positioned on the control's top or bottom, that is when the
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabPosition">TabPosition</helplink> property is set to Top or Bottom.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="TabScrolling" Title="Tab Scrolling">
        <Description>
          <![CDATA[<p>
          This demo illustrates the control's support for scrolling tabs within the tab header.
           The tab scrolling feature can be enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.EnableTabScrolling">EnableTabScrolling</helplink> property to true.
           In this case, if the control's size doesn't allow all tabs to be visible within the tab header at one time,
           specific scroll buttons are displayed, allowing end-users to scroll tabs. The position of the scroll buttons
           can be controlled by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property. For instance, if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property is set
           to Left, the scroll buttons are displayed to the right of the tabs, and vice versa.
           In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabAlign">TabAlign</helplink> property is set to Center, so scroll buttons are displayed
           on both sides of the tab header.
        </p><p>
          Tab scrolling works only when the tab header is positioned on the control's top or bottom, that is when the
           <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.TabPosition">TabPosition</helplink> property is set to Top or Bottom.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="EnableCallBacks" Title="Callbacks (AJAX)">
        <Description>
          <![CDATA[<p>
					This sample demonstrates the use of AJAX-based callbacks implemented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink>.
				</p><p>
					In order to enable the use of callbacks, the control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.EnableCallBacks">EnableCallBacks</helplink> property should be set to true. In this instance, the contents of non-active pages are not represented on the client. When a page is activated for the first time, its content is retrieved from the server and then cached on the client. The next time the page is activated, its content is taken from the client and no callback to the server is performed.
				</p><p>
					In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActivateTabPageAction">ActivateTabPageAction</helplink> property is set to MouseOver for quick page selection (without having to click pages). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.SaveStateToCookies">SaveStateToCookies</helplink> property is set to true in order to preserve the state of the page control (in particular, the control's active page) when an end-user visits the site again.
				</p><p>Note that in this example we purposely pause callback processing on the server side for a second in order to make the Loading Panel visible during this time.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[<p>
					This sample demonstrates the use of template technology found in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink>. The look of each tab element of the page control can be modified by creating a specific template which defines how the tab will be rendered by a client browser. In this demo, templates of type <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.TabTemplate">TabTemplate</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ActiveTabTemplate">ActiveTabTemplate</helplink> are used to define non-typical appearances for individual tabs (tabs with rounded edges).
				</p><p>
					In order to display tabs with rounded edges, the image that represents a single tab should be divided into three sections as shown below (note that pictures for a selected tab should be 1 pixel higher).
				</p><p style="text-align: center;"><img src="Images/Template.gif" alt="" style="width: 491px; height: 237px; margin-top: 20px; margin-bottom: 20px;" /></p><p>
					The tab template implemented in this demo is defined by using a table with three cells. Each cell contains the corresponding portion of the image. The left and right sections of the image are represented by entire images. The middle portion is used as a background image which is tailed horizontally according to the length of the tab's content (which is, in particular, the text taken from the tab's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Text">Text</helplink> property during binding the template's child controls).
				</p><p>
					Refer to ASPX code to see how a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl.ActiveTabTemplate">ActiveTabTemplate</helplink> is defined by using the described approach.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Events">
        <Description>
          <![CDATA[
                <p>
					        This sample demonstrates the capabilities of our client-side event technology. All client-side events exposed by an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink> are traced in this demo. Click an inactive tab to initiate client-side events.
				        </p>
                <p>
					        Client-side events are triggered in response to specific actions or events on the client side (in particular, to an active tab change).
				        </p>
                <p>
                  To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
                </p>        
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
        <Description>
          <![CDATA[<p>
					This example demonstrates how you can manipulate a page control programmatically on the client using enhanced client-side functionality. The client-side programmatic interface is available if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to true or if there is a handler assigned to any client-side event.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl">ASPxPageControl</helplink> allows a page's content to be changed dynamically on the client side by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPageControl.SetTabContentHTML(tab-html)">SetTabContentHTML</helplink> method. This is demonstrated by the SetActiveTabContent function which uses the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.GetActiveTab">GetActiveTab</helplink> method to access the currently active page. (See JS code)
				</p><p>
					The ShowActiveTabContent function displays (in a specific text area) the HTML code which represents the active page's content. The content of the active page is obtained via the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPageControl.GetTabContentHTML(tab)">GetTabContentHTML</helplink> method. (See JS code)
				</p><p>
					The ActiveTabChanged function represents the hander for the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.ActiveTabChanged">ActiveTabChanged</helplink> event. The event's argument contains information on the active tab which is used to synchronize the value of the dropdown editor. (See ASPX and JS code)
				</p><p>
					A specific page can be activated by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.SetActiveTab(tab)">SetActiveTab</helplink> method. In this demo, each page is identified using its server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Name">Name</helplink> property. In order to obtain a specific page by its name on the client side, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTabControlBase.GetTabByName(name)">GetTabByName</helplink> method is used. (See JS code, the ChangeActiveTab function)
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[<p>
					This sample demonstrates some of the capabilities available to you when using the server side features of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControl">ASPxTabControl</helplink>. Select the desired tab page name from the dropdown and define the visual settings of the corresponding page by clicking the appropriate button. Click any tab within the page control to initiate server-side events which can be traced in the Events monitor.
				</p><p>
					Each tabbed page within a page control has server-side properties which allow you to manipulate the state of the page and so change the visualization of the entire page control. Thus, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Enabled">Enabled</helplink> property allows you to enable or disable any page's tab. With the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TabBase.Visible">Visible</helplink> property, you can show or hide a particular page's tab. In order to activate a specific page and display its contents, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPageControl.ActiveTabPage">ActiveTabPage</helplink> property can be used.
				</p><p>
					The server-side <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabChanging">ActiveTabChanging</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabChanged">ActiveTabChanged</helplink> events used in this demo allow you to perform any custom action on the server. In this example, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabChanged">ActiveTabChanged</helplink> event is handled to synchronize the dropdown editor's value with the clicked tab and both the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabChanging">ActiveTabChanging</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTabControlBase.ActiveTabChanged">ActiveTabChanged</helplink> events are used to display event information in the Events monitor.
				</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="TitleIndex" Title="Title Index" SeoTitle="ASP.NET AJAX Title Index Control" HighlightedTagNames="dx:ASPxTitleIndex">
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Title Index (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex">ASPxTitleIndex</helplink>) control allows you to provide easy access to elements in a lengthy list. It is useful, for example, when you need to organize a catalog. This control arranges links in an alphabetically sorted and grouped list by default. If necessary, you can group data by any bound field's values. 
                </p><p>
The following code demonstrates how to add a title index to your project and manually populate it with items specifying item text values.
              </p>
              <code lang="Html">
                <dx:ASPxTitleIndex ID="ASPxTitleIndex1" runat="server">
                    <Items>
                        <dx:TitleIndexItem Text="Aqriculture" 
                          NavigateUrl="javascript:void(0);"/>
                        <dx:TitleIndexItem Text="Art" 
                          NavigateUrl="javascript:void(1);"/>
                        <dx:TitleIndexItem Text="Auto" 
                          NavigateUrl="javascript:void(2);"/>
                        <%-- And other items --%>
                    </Items>
                </dx:ASPxTitleIndex>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Filtering" DemoUrl="~/TitleIndex/Filtering.aspx">
          <Description>
            <![CDATA[
             End-users can easily locate an element by typing a part of its caption into the filter box.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Grouping" DemoUrl="~/TitleIndex/Grouping.aspx">
          <Description>
            <![CDATA[
             End-users can easily locate an element by typing a part of its caption into the filter box.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Multi-column Display Mode">
          <Description>
            <![CDATA[
             ASPxTitleIndex supports multi-column data display mode. In this mode, data is split into multiple columns by default. 
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features">
        <Description>
          <![CDATA[<p>
					This demo shows the main features available to you when using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex">ASPxTitleIndex</helplink> control.
				</p><p>
					If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.Categorized">Categorized</helplink> property is set to true, each group changes to a category containing items which are displayed and organized into columns.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.ShowBackToTop">ShowBackToTop</helplink> property specifies whether a specific link is displayed after each group or category. This link can be used to quickly scroll to the top of the ASPxTitleIndex control.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.IndexPanel.Behavior">IndexPanel.Behavior</helplink> property controls how the ASPxTitleIndex control responds to clicks on items displayed within the control's IndexPanel. If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.IndexPanel.Behavior">IndexPanel.Behavior</helplink> property is set to Navigation, a click on an item (letter) will scroll the page to navigate to the corresponding group or category. Setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.IndexPanel.Behavior">IndexPanel.Behavior</helplink> property to Filtering, forces the control to display only the group (category) that corresponds to the selected item (letter). This behavior is implemented through server-side processing, so it requires postbacks (or callbacks) to be sent to the server. Note that by default the ASPxTitleIndex control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.EnableCallBacks">EnableCallbacks</helplink> property is set to true, thus allowing required data items to be retrieved from the server via AJAX-based callback technology (without refreshing the entire page).
				</p><p>
					The position of the IndexPanel within the ASPxTitleIndex control can be specified via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.IndexPanel.Position">IndexPanel.Position</helplink> property.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.ColumnCount">ColumnCount</helplink> property can be used to control the number of columns in which the ASPxTitleIndex control's data are organized for display purposes. This property specifies the total number of columns contained within the ASPxTitleIndex control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.Columns">Columns</helplink> collection.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Filtering" Title="Filtering" SeoTitle="Data Filtering">
        <Description>
          <![CDATA[<p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex">ASPxTitleIndex</helplink> control provides you with client-side filtering capabilities.
				</p><p>
					The filtering functionality found within the ASPxTitleIndex is implemented using a Filter Box element whose visibility is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FilterBox.Visible">FilterBox.Visible</helplink> property. The horizontal and vertical positions of the Filter Box within the ASPxTitleIndex control are specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FilterBox.HorizontalPosition">FilterBox.HorizontalPosition</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FilterBox.VerticalPosition">FilterBox.VerticalPosition</helplink> properties.
				</p><p>
					The Filter Box contains an editor that allows the desired filter string to be entered, and a label that displays specific explanatory information regarding the available wildcard symbols. Filtering is executed dynamically on the client side once text is changed within the Filter Box editor (incremental filtering). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FilterBox.Delay">FilterBox.Delay</helplink> property can be used to specify a delay (in milliseconds) in filter execution. Information related to wildcard symbols can be modified by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FilterBox.InfoText">FilterBox.InfoText</helplink> property.
				</p><p>
					You can use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.SoftFiltering">SoftFiltering</helplink> property set to true to provide end-users with a capability to automatically find all occurrences of the entered string without typing any wildcard symbols.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Grouping" Title="Grouping" SeoTitle="Data Grouping">
        <Description>
          <![CDATA[<p>
					This demo shows the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex">ASPxTitleIndex</helplink> control's grouping feature.
				</p><p>
					The ASPxTitleIndex control provides you with the ability to display data grouped by values of a specific data field. The desired grouping field can be specified using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTitleIndex.GroupingField">GroupingField</helplink> property. Note that by default, this property is set to an empty string and the ASPxTitleIndex control's data items are grouped and sorted alphabetically.
				</p>
        <p><b>Note</b>: In this demo, the ASPxTitleIndex control is customized using CSS classes, so applying a DevExpress theme is not in effect.</p>
        ]]>
        </Description>
        <SourceFile>~/TitleIndex/Resources/BlackRed/styles.css</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="TreeView" Title="Tree View" SeoTitle="ASP.NET AJAX Tree View Control" HighlightedTagNames="dx:ASPxTreeView">
      <Keywords>hierarchy, xml, hierarchical, nodes</Keywords>
      <Overview Title="Overview">
        <Description>
          <![CDATA[
              <p>
                The DevExpress ASP.NET Tree View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink>) control allows you to present hierarchical data in the form of a tree. Nodes in a Tree View can be expanded and collapsed to display sub-items.
                </p><p>
The following code demonstrates how to add a tree view to your project and manually populate it with nodes specifying node text and images.

              </p>
              <code lang="Html">
                <dx:ASPxTreeView ID="ASPxTreeView1" runat="server">
                    <Nodes>
                        <dx:TreeViewNode Text="Music" Expanded="True">
                            <Image Url="~/Images/music.png"/>
                            <Nodes>
                                <dx:TreeViewNode Text="Andy McKee">
                                    <Nodes>
                                        <dx:TreeViewNode Text="Rylynn"/>
                                        <dx:TreeViewNode Text="Drifting"/>
                                    </Nodes>
                                </dx:TreeViewNode>
                            </Nodes>
                        </dx:TreeViewNode>
                        <%-- And other nodes --%>
                    </Nodes>
                </dx:ASPxTreeView>
              </code>
            ]]>
        </Description>
        <SeeAlso Url="http://www.youtube.com/watch?v=GkCBHJgFU6A" Title="Training Videos" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7873/aspnet-controls-and-mvc-extensions" Title="Documentation" />
        <KeyFeature Name="Data Binding" DemoUrl="~/TreeView/DataBinding.aspx">
          <Description>
            <![CDATA[
             ASPxTreeView can be bound to a data source that contains hierarchical data (e.g., an XML file or a site map).
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Virtual Mode" DemoUrl="~/TreeView/VirtualMode.aspx">
          <Description>
            <![CDATA[
             In Virtual Mode, a tree is created on demand (child nodes are created and initialized when the parent node is expanded).
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Template Support" DemoUrl="~/TreeView/Templates.aspx">
          <Description>
            <![CDATA[
             Templates can be specified for node content (the NodeTemplate) or node text (the NodeTextTemplate). Templates can be applied to identical nodes or a specific node.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="AJAX Support" DemoUrl="~/TreeView/EnableCallbacks.aspx">
          <Description>
            <![CDATA[
             The ASPxTreeView control supports AJAX technology and can load its content from the server via callbacks. If the <b>EnableCallBacks</b> property is set to '<b>true</b>', only the content of expanded nodes is initially loaded onto the client. When an end-user expands nodes, their content is loaded via callbacks.
            ]]>
          </Description>
        </KeyFeature>
        <KeyFeature Name="Rich Client-Side Functionality" DemoUrl="~/TreeView/ClientSide.aspx">
          <Description>
            <![CDATA[
             A comprehensive client-side API is available for the ASPxTreeView control. This functionality, coupled with the ability to handle a rich set of client events, allows you to maintain total control over behavior on the client side.
            ]]>
          </Description>
        </KeyFeature>
      </Overview>
      <Demo Key="DataBinding" Title="Data Binding">
        <Description>
          <![CDATA[
					<p>This demo illustrates how the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> can be populated with node information taken from a data source.</p>
					<p>Primarily designed to be a site navigation control, the ASPxTreeView supports binding to data sources containing hierarchical data. Any object that implements the IHierarchicalEnumerable or IHierarchicalDataSource interface (e.g. SiteMapDataSource, XmlDataSource, etc.) may be used as a data source for the ASPxTreeView control. The ASPxTreeView can be bound to a data source in a standard manner - using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxHierarchicalDataWebControl.DataSourceID">DataSourceID</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property.</p>
					<p>The ASPxTreeView control implements specific properties that point to the data fields containing the necessary data. These are the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.TextField">TextField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ImageUrlField">ImageUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NavigateUrlField">NavigateUrlField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NameField">NameField</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ToolTipField">ToolTipField</helplink> properties. If these properties are not defined, the ASPxTreeView is able to automatically bind to data fields whose names coincide with property names of a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode">TreeViewNode</helplink> object (such as the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Text">Text</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ImagePropertiesBase.Url">Image.Url</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.NavigateUrl">NavigateUrl</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Name">Name</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.ToolTip">ToolTip</helplink>).</p>
					<p>The ASPxTreeView control implements the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeDataBound">NodeDataBound</helplink> event, allowing you to customize settings of an individual node after it has been bound to data. For instance, you can modify the content of a node or change its formatting.</p>
					<p>The ASPxTreeView's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataBound">DataBound</helplink> event (which occurs after the control data binding has been finished) allows you to finally customize the control (for instance you can set the selected node).</p>
					<p>In this demo, the ASPxTreeView is bound to an XML file using a standard XmlDataSource component. The source XML file contains hierarchical information about a set of classes and their members (properties, methods, events). The ASPxTreeView's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.TextField">TextField</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ImageUrlField">ImageUrlField</helplink>, and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NavigateUrlField">NavigateUrlField</helplink> properties are used to specify the names of data item attributes from which the corresponding node settings should be obtained. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeDataBound">NodeDataBound</helplink> event is handled to change the text style of nodes which represent classes (their text is displayed bold).</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Features" Title="Features" SeoTitle="Main Features" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/TreeView.png" HighlightedTitle="Tree View">
        <Description>
          <![CDATA[
					<p>This demo illustrates the primary features of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink>. Use the options in the right panel to change the values of corresponding ASPxTreeView properties, and see the result within the control.</p>
					<p>The descriptions of the utilized properties are listed below:</p>
					<ul>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AllowSelectNode">AllowSelectNode</helplink>. Enables node selection. If this option is enabled, clicking a node selects it. Only one node can be selected at a time.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AutoPostBack">AutoPostBack</helplink>. Controls whether or not a round trip to the server is required to process end-user actions on the server ("server mode"). If this option is disabled, the control behavior is based upon the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableCallBacks">EnableCallBacks</helplink> property.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableAnimation">EnableAnimation</helplink>. Specifies whether or not nodes are expanded/collapsed with animation effects.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableHotTrack">EnableHotTrack</helplink>.  Specifies whether nodes are hot-tracked when the mouse pointer is located over them.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ShowTreeLines">ShowTreeLines</helplink>. Toggles the visibility of tree lines.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ShowExpandButtons">ShowExpandButtons</helplink>. Toggles the visibility of expand buttons. Regardless of the option setting, end-users can expand or collapse nodes by double-clicking them.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AllowCheckNodes">AllowCheckNodes</helplink>. Specifies whether or not end-users can check nodes using corresponding check boxes. Disabling the option hides check boxes.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.CheckNodesRecursive">CheckNodesRecursive</helplink>. If node checking is enabled, use this option to allow end-users to recursively check nodes. In this mode, checking a node automatically checks all its immediate child nodes, and vice versa.</li>
					</ul>
                ]]>
        </Description>
        <HighlightedDescription>A Tree View control is very helpful for web navigation, because it displays a hierarchical list of items, such as folders. Items in a Tree View can be expanded and collapsed to display other sub-items. Take a look at this demo's illustration of the main features of the DevExpress ASP.NET Tree View (ASPxTreeView) control.</HighlightedDescription>
      </Demo>
      <Demo Key="NodeTextWrapping" Title="Node Text Wrapping">
        <Description>
          <![CDATA[
					<p>This demo illustrates how to enable text wrapping in the <b>Tree View</b> node when it does not fit the container using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableNodeTextWrapping">EnableNodeTextWrapping</helplink> property.</p>
          <p>In this demo, resize the splitter panes to see how the tree view's node text is wrapped when its width exceeds the splitter pane's width.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="NodeLinkMode" Title="Node Link Mode" SeoTitle="Node Link Modes">
        <Description>
          <![CDATA[
					<p>In the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink>, nodes represent navigation elements (links). For nodes, you can activate a specific link mode, in which only certain node elements are clickable. To accomplish this, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeLinkMode">NodeLinkMode</helplink> property.</p>
					<p>Options include:</p>
					<ul>
					<li>TextOnly. Only a node's text is clickable.</li>
					<li>TextAndImage. Only a node's text and image are clickable.</li>
					<li>ContentBounds. The entire node's content is clickable.</li>
					</ul>
					<p>To customize appearance settings for each link mode, use the ASPxTreeView's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewStyles.Link">Styles.Link</helplink> (for TextOnly and TextAndImage) and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.AppearanceStyle.HoverStyle">Styles.Node.HoverStyle</helplink> (for ContentBounds) properties.</p>
					<p>This demo shows ASPxTreeViews in two link modes - TextOnly and ContentBounds. You can click nodes in these ASPxTreeViews to see the difference in behavior and appearance.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="EnableCallbacks" Title="Callbacks (AJAX)">
        <Description>
          <![CDATA[
					<p>This sample demonstrates the use of the AJAX-based callbacks implemented by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> control.</p>
					<p>The ASPxTreeView control supports AJAX technology by implementing the ability to load the content of an ASPxTreeView from the server via a callback. This approach allows the ASPxTreeView to avoid the initial transfer of all its node data to the client, optimizing the page's load time.</p>
					<p>In order to enable the use of callbacks, ASPxTreeView's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableCallBacks">EnableCallBacks</helplink> property should be set to true and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.AutoPostBack">AutoPostBack</helplink> property should be set to false. In this instance, the contents of the collapsed nodes are not represented on the client. When a node is expanded for the first time, its content is retrieved from the server, and then cached on the client. The next time the node is expanded, its content is taken from the client and no callback to the server is performed.</p>
					<p>Note that in this example, we purposely pause callback processing on the server side for a second, in order to make the Loading Panel visible during this time.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
					<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> control supports the template technology, allowing you to completely customize the control's appearance and layout.</p>
					<p>The look of the ASPxTreeView control's default elements can be completely modified by creating a specific template which defines how an element will be rendered by a client browser. The ASPxTreeView control allows you to create templates for two element types: the node text content and the entire node content. You can apply templates for all identical elements within the ASPxTreeView (using control level templates) or for a particular element (using node level templates). Each template can consist of a group of HTML controls. Each HTML control used in a template can be bound to the property values of the rendered node.</p>
					<p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.TextTemplate">TextTemplate</helplink> property of the parent nodes (the 'ASP.NET AJAX Controls' and 'WinForms Controls') is used to replace node texts with a custom combination of an image and text elements. The contents of child nodes are completely defined using their <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Template">Template</helplink> property. These templates contain an image and two text elements representing textual node characteristics (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Text">Text</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Name">Name</helplink> property values) in two lines.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
					    <p>This sample demonstrates the capabilities of our client-side event management technology. All available client-side events are traced in this demo. Click any node or expand/collapse it within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> control to initiate client-side events.</p>
					    <p>The ASPxTreeView control provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the ASPxTreeView control's functionality. So, they give you the ability to completely control the client-side behavior of the control.</p>
					    <p>The following client events are available for the ASPxTreeView:</p>
					    <ul>
					    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink>. Occurs on the client side after the control has been initialized, but prior to it being displayed within the browser.</li>
					    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandedChanging">ExpandedChanging</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandedChanged">ExpandedChanged</helplink>. Fires before and after the node's expansion state has been changed.</li>
					    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.CheckedChanged">CheckedChanged</helplink>. Fires after a node's checked state has been changed.</li>
					    <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.NodeClick">NodeClick</helplink>. Fires after a node has been clicked.</li>
					    </ul>
              <p>
                To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
              </p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ClientSide" Title="Client-Side Functionality">
        <Description>
          <![CDATA[
					<p>This example demonstrates how to manipulate the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> control programmatically on the client using our extended client-side functionality. The ASPxTreeView's client-side programmatic interface is available in the following cases:</p>
					<ul><li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.EnableClientSideAPI">EnableClientSideAPI</helplink> property is set to true.</li>
					<li>Any client-side event (available via the ClientSideEvents property) is handled.</li>
					<li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ClientInstanceName">ClientInstanceName</helplink> property is defined.</li>
					</ul>
					<p>This demo allows the selected node's settings to be modified on the client by clicking check boxes in the rightmost panel.</p>
					<p>A node can be selected either directly within the ASPxTreeView control or by using the panel's dropdown editor. Note that the editor's dropdown window contains another ASPxTreeView control (created using a template) to make node selection easier. For synchronization purposes, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.NodeClick">NodeClick</helplink> client events of both ASPxTreeView controls are handled in an appropriate manner (using the OnTreeViewNodeClick function - for the leftmost ASPxTreeView, and using the OnNodesTreeViewNodeClick function - for the ASPxTreeView embedded into the editor's dropdown window).</p>
					<p>In this demo, each tree view node is identified using the name assigned to its server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Name">Name</helplink> property. So, any specific node can be easily obtained on the client using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.GetNodeByName(name)">GetNodeByName</helplink> method of an ASPxTreeView.</p>
					<p>Clicking check boxes invokes the corresponding client-side methods (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetEnabled(value)">SetEnabled</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetVisible(value)">SetVisible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.SetSelectedNode(node)">SetSelectedNode</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetChecked(value)">SetChecked</helplink>, or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeViewNode.SetExpanded(value)">SetExpanded</helplink>), to change the state of a node being currently selected.</p>
					<p>A click on the 'Expand all' or 'Collapse all' button calls the respective client method (<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.ExpandAll">ExpandAll</helplink> or <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeView.CollapseAll">CollapseAll</helplink>) of the leftmost ASPxTreeView control.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ServerSide" Title="Server-Side Functionality">
        <Description>
          <![CDATA[
					<p>This sample demonstrates a few of the server-side capabilities of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> control. Click a node or select the desired item from the dropdown editor, and define the settings of the corresponding node by clicking the appropriate check box(es).</p>
					<p>The following server properties can be toggled in this demo:</p>
					<ul><li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Enabled">Enabled</helplink>.  This property controls a node's availability to end-user interaction.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Visible">Visible</helplink>. This property controls a node's visibility.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.SelectedNode">SelectedNode</helplink>. The ASPxTreeView control supports single node selection. The selected node can be specified using this property.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Checked">Checked</helplink>. This property specifies a node's checked state.</li>
					<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewNode.Expanded">Expanded</helplink>. This property specifies a node's expansion state.</li>
					</ul>
					<p>Click or expand/collapse a node within the ASPxTreeView to initiate server-side events. In this example the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.NodeClick">NodeClick</helplink>, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ExpandedChanging">ExpandedChanging</helplink>, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.ExpandedChanged">ExpandedChanged</helplink>, and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.CheckedChanged">CheckedChange</helplink> events are handled, to display information about the raised event in the Event monitor.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="VirtualMode" Title="Virtual Mode">
        <Keywords>loadondemand, demand</Keywords>
        <Description>
          <![CDATA[
					<p>This demo shows how Virtual Mode helps you improve tree view performance.</p>
					<p>In addition to bound and unbound modes, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink> can operate in Virtual Mode, which greatly reduces both server load and start-up time when working with complex or dynamically created hierarchies. In Virtual Mode, data is retrieved on the server in portions, on a client request, at start-up and when expanding nodes. In essence, child nodes are created and initialized only when their parent node is expanded for the first time. This allows you to efficiently use server resources and to avoid retrieving the entire amount of hierarchical data for the ASPxTreeView.</p>
					<p>To activate Virtual Mode for the ASPxTreeView, handle its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView.VirtualModeCreateChildren">VirtualModeCreateChildren</helplink> event, which occurs when expanding nodes for the first time. Within the event handler, you need to create a list of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewVirtualNode">TreeViewVirtualNode</helplink> objects representing child nodes for the currently expanded node. If a child node has no children, set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.TreeViewVirtualNode.IsLeaf">IsLeaf</helplink> property to true, to not show the expand button for this node.</p>
					<p>In this demo, the ASPxTreeView uses Virtual Mode to display the file/folder tree of the demo's web site.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames="dx:ASPxMenu dx:ASPxPageControl dx:ASPxPopupMenu dx:ASPxNavBar dx:ASPxTreeView">
      <Demo Key="RightToLeft" Title="Right to Left Layout">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
<p>
Our visual controls provide support for right-to-left languages such as Arabic and Hebrew. So, you can rely on DevExpress web controls when creating international web pages that require support for right-to-left reading order, as well as the mirroring of UI elements.
</p>

<p>
To switch a control to a right-to-left representation, simply enable a single property - RightToLeft. When this property is on, the text flows from right to left in the control, and the control itself is mirrored (the layout of its UI elements is reversed). 
</p>

<p>
If you need to apply right-to-left representation to all DevExpress web controls within your web application, you can enable a special configuration option (the <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> option) within the Web.config file, instead of switching RightToLeft property for each control. This option can be accessed within the 'settings' group of the <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section in the Web.config file.
</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
        <Description>
          <![CDATA[
<p>
Controls from the <helplink href="https://docs.devexpress.com/AspNet/14826/aspnet-webforms-controls/site-navigation-and-layout">Navigation and Layout</helplink> suite are designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, Navigation and Layout controls implement the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for a control.
</p>
<p>
This demo illustrates how to make navigation and layout controls (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxMenu">ASPxMenu</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPopupMenu">ASPxPopupMenu</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxNavBar">ASPxNavBar</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeView">ASPxTreeView</helplink>) more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property of the controls.
</p> 
<p>
Check the accessibility level of controls in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that navigation and layout controls can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxPivotGrid" Url="ASPxPivotGridDemos" Title="DevExpress ASPxPivotGrid" SeoTitle="ASP.NET AJAX OLAP Data Mining Control" NavItemTitle="Pivot Grid" OrderIndex="5" IntegrationHighlighted="true">
    <Keywords>analyze, mine, summary</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxPivotGrid_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/PivotGrid.png</IntegrationImageUrl>
    <IntegrationDescription>
      Multi-dimensional data analysis pivot table. Blazing fast, fully customizable with OLAP support built-in.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX OLAP Data Mining Control">
      <BannerTitle>
        Pivot Table&#174; Style Data Mining Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Simply bind the control to data to allow end-users to slice and dice data, generating a nearly endless array of cross-tab reports
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=wkCJqb0pTvQ</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxPivotGrid Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxPivotGrid Suite</b>. These features include:</p>
        ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
            <p>
              The DevExpress Pivot Grid (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink>) is the ultimate tool for organizing and analyzing your business data. It is designed to summarize a large amount of information and display it in a cross-tabulated form and allows you to create financial and statistical reports. In addition, you can reorganize the control layout using the PivotGridControl’s drag-and-drop feature, which reorganizes business data according to the new column and row field layout.
            </p>
            ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/12007/aspnet-webforms-controls/pivot-grid/getting-started/tutorial-videos" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/5830/aspnet-webforms-controls/pivot-grid" Title="Documentation" />
      <KeyFeature Name="Support for Multiple Datasource Types">
        <Description>
          <![CDATA[
             <p>The DevExpress Pivot Grid provides full support for regular or custom data sources that implement the IList or IEnumerable interface. Also, you can use MS Analysis Services (OLAP) as a data source for PivotGridControl.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Fully Customizable Reports">
        <Description>
          <![CDATA[
             <p>With ASPxPivotGrid, users can easily change a report's layout visually in order to examine data from different/multiple perspectives.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Hierarchical Values Arrangement">
        <Description>
          <![CDATA[
             <p>The DevExpress Pivot Grid allows analyzing raw or summarized data. Filed values are automatically arranged into a tree structure, and end-users are free to expand and collapse child groups to see more summarized or raw reports.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Automatic and Manually Specified Totals">
        <Description>
          <![CDATA[
             <p>PivotGridControl allows displaying grand totals for each row and column automatically. If the built-in summary calculation does not meet a certain business requirement, you can display any number of totals for any value group.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Sorting and Displaying Top Rows">
        <Description>
          <![CDATA[
             <p>ASPxPivotGrid automatically sorts row and column values so you can easily locate required data. You can also specify the number of top rows to display a specific number of best-selling or worst-selling products for each year, month, customer, etc.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Filtering">
        <Description>
          <![CDATA[
             <p>Filtering allows you to display a subset of rows and/or columns that meet a specific criteria. When filtering is applied to Pivot Grid, only field values that meet a specified criteria are displayed.</p>
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Integration with the XtraCharts Suite">
        <Description>
          <![CDATA[
             <p>Data displayed in PivotGridControl can be visualized using the XtraCharts Suite.</p>
            ]]>
        </Description>
      </KeyFeature>
    </Overview>
    
    <DemoGroup Key="SampleReports" Title="Sample Reports" HighlightedTagNames="dx:ASPxPivotGrid">
      <Keywords>Reporting, aspxreportcontrol</Keywords>
      <Demo Key="CustomerReports" Title="Customer Reports" SeoTitle="Customer Reports - Data Mining Sample">
        <Description>
          <![CDATA[
                <p>
                  This demo includes a set of reports which allows you analyze the same
                  business data in different forms. Use the Radio buttons to switch between the reports.
                </p>
                <ul>
                  <li><strong>Customers</strong>
                    In this report the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control summarizes the orders made by customers in a specific time period. The quantities ordered are given for each quarter and for each product which was bought by a customer.                  
                  </li><li><strong>Top 2 Products</strong>
                    In this report the <b>ASPxPivotGrid</b> lists the two most popular products for each customer (the ones which generated the most interest). Clicking the 'Product Name' field header reverses the current sort order and the control will show you the least popular products for each customer.
                  </li><li><strong>Top 10 Customers</strong>
                    The <b>ASPxPivotGrid</b> control lists the top 10 customers, who purchased the most items. Clicking the 'Customer' field header reverses the sort order and displays the customers who purchased the least amount of items.
                  </li></ul>
                ]]>
        </Description>
      </Demo>
      <Demo Key="ProductReports" Title="Product Reports" SeoTitle="Product Reports - Multi-Dimensional Data Analysis">
        <Description>
          <![CDATA[
                <p>
                  This demo includes a set of reports which allows you analyze the same business data in different forms.
                  Use the Radio buttons to switch between the reports.
                </p>
                <ul><li><strong>Category Sales</strong>
                    In this report the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control displays the total amount of sales for each category of product.
                  </li><li><strong>Product Sales</strong>
                    In this report the <b>ASPxPivotGrid</b> control shows the total amount of sales for each product. Check the Show Categories check box to view products by categories. For each category a total will be automatically calculated.
                  </li><li><strong>Interval Grouping</strong>
                    In this report the <b>ASPxPivotGrid</b> control allows you to view the amount of sales for each category and product according to the shipping date. You can categorize the information by year, quarter and(or) month.
                  </li><li><strong>Multiple Subtotals</strong>
                    In this report the <b>ASPxPivotGrid</b> calculates multiple summaries (Sum, Average, Max and Min) for each product category. It breaks the information down into years and quarterly intervals so that you can analyze the information according to the shipping date.
                  </li><li><strong>Average Sales</strong>
                    In this report the <b>ASPxPivotGrid</b> control calculates the total, average and minimum sales amount for each category.
                  </li><li><strong>Top 3 Products</strong>
                    This report shows the three most popular products in each category. Clicking the 'Product Name' field header reverses the current sort order and the report will show you the three least popular products in each category.
                  </li>
                </ul>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Summary" Title="Summary" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="AutomaticTotals" Title="Automatic Totals" SeoTitle="Automatic Totals">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> automatically calculates grand totals for each row and column. Additionally,
          totals are automatically calculated for each value group. The type of the automatic totals always
          matches the type of the summaries calculated in cells. Thus, automatic totals give you a more general
          data view while you still displaying the details. In this demo, you can use a number of view options
          to control the availability of totals.
        </p><p><b>Row Totals</b> are rows that display sub-totals calculated for outer row fields. <b>Column Totals</b> are
          columns that display sub-totals calculated for outer column fields.
        </p><p>
          The <b>ASPxPivotGrid</b> control supports automatic and custom totals. Automatic totals are calculated using
          a summary function specified by a corresponding data field. Custom totals can be calculated using any
          summary function. It's possible to calculate multiple custom totals against a data field.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7307/aspnet-webforms-controls/pivot-grid/data-shaping/aggregation/totals" Title="Totals" />
      </Demo>
      <Demo Key="MultipleTotals" Title="Multiple Totals" SeoTitle="Multiple Totals">
        <Description>
          <![CDATA[<p>
          For each field, you can manually specify the number and type of group totals to be displayed.
          This demo shows how to display the <b>Average</b>, <b>Sum</b>, <b>Maximum</b> and <b>Minimum</b>
          summaries for each Category group.
        </p><p>
          The CustomTotals collection contains 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridCustomTotal">PivotGridCustomTotal</helplink> 
          objects that represent custom totals
          for the field. These custom totals are displayed when the field is located within the Column
          Header Area or Row Header Area and only if its 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalsVisibility">TotalsVisibility</helplink> 
          property is set to <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotTotalsVisibility">PivotTotalsVisibility.CustomTotals</helplink>.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7307/aspnet-webforms-controls/pivot-grid/data-shaping/aggregation/totals" Title="Custom Totals" />
      </Demo>
      <Demo Key="Drilldown" Title="Drill Down" SeoTitle="Drill Down - Obtaining Underlying Data">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> provides a drill-down capability that enables you to retrieve a list of records that were used to calculate a particular summary.
        </p><p>
          To obtain drill-down data, use the pivot grid's 
          <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxpivotgrid.aspxpivotgrid.createdrilldowndatasource.overloads">CreateDrillDownDataSource</helplink> method. 
          Its parameters completely identify a summary cell.
        </p><p>
          In this demo, click a summary cell to view the records from the control's underlying data source associated with this cell. The obtained data is displayed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> within a popup window.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7272/aspnet-webforms-controls/pivot-grid/data-shaping/aggregation/summaries/obtaining-underlying-data-drill-down" Title="Obtaining Underlying Data" />
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="SortingAndGrouping" Title="Sorting and Grouping" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="SortBySummary" Title="Sort by Summary" SeoTitle="Sort by Summary">
        <Description>
          <![CDATA[<p>
		This demo illustrates the 
        <helplink href="https://docs.devexpress.com/AspNet/8456/aspnet-webforms-controls/pivot-grid/data-shaping/sorting/sorting-by-summary">Sorting by Summary</helplink> 
       	feature that allows you to sort values of a particular column field or row field by summary values 
		calculated against a specific data field. In this example, 'Sales Person' field values are sorted by summary values 
		calculated against another data field. You can select this data field using the combo box at the top of the <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid" target="_blank">ASPxPivotGrid</a> control. Clicking the 'Sales Person' field will reverse the current sort order.</p>
		<p>To prohibit the end-user from sorting field values by summaries, turn off the ASPxPivotGrid <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsCustomization.AllowSortBySummary">OptionsCustomization.AllowSortBySummary</helplink> option. To prevent end-users from sorting individual field values, disable a necessary field's <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowSortBySummary">Options.AllowSortBySummary</helplink> option.
		</p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/8456/aspnet-webforms-controls/pivot-grid/data-shaping/sorting/sorting-by-summary" Title="Sorting by Summary" />
      </Demo>
      <Demo Key="TopValues" Title="Top Values" SeoTitle="Top Values"
            HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/TopValues.png">
        <Description>
          <![CDATA[<p>
          This example demonstrates the <helplink href="https://docs.devexpress.com/AspNet/7277/aspnet-webforms-controls/pivot-grid/data-shaping/sorting/display-top-n-values">Top N Values</helplink>
          feature of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control. For any column field or row field you can specify how many values
          should be displayed and used to calculate summaries. Thus you can only
          select the most significant values and ignore less important information.
          In this example, the <b>ASPxPivotGrid</b> control displays the specified number
          of values for the selected field. Note that the values in this field are
          sorted against the values in the 'Order Amount' field.
        </p>]]>
        </Description>
        <HighlightedDescription>
          The ASPxPivotGrid control supports the Top N feature that allows you to display only the best or worst results. You can specify the number of displayed values and choose the required column/row field.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7277/aspnet-webforms-controls/pivot-grid/data-shaping/sorting/display-top-n-values" Title="Display Top N Values" />
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Filtering" Title="Filtering" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="Filtering" Title="Filtering" SeoTitle="Filtering" IsUpdated="true">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/7313/aspnet-webforms-controls/pivot-grid/data-shaping/filtering/prefilter">Filter Editor</helplink> allows end-users to build complex filter criteria with an
          unlimited number of filter conditions, combined by logical operators. End-users
          can open the Filter by right-clicking on any header or header area and selecting the
          Show Filter menu item. Or, end-user can open it by clicking an image
          <img src="../Content/Demo/pgPrefilterButton.png" alt="(*)" title="" />
          or filter expression link
          displayed within the Filter panel.
        </p><p><b>Adding/Removing Conditions</b><br />
          To create and customize filter criteria, use the
          <img src="../Content/Demo/fcadd.png" alt="(+)" title="" />
          and
          <img src="../Content/Demo/fcremove.png" alt="(x)" title="" />
          buttons.
        </p><p><b>Changing a Field in a Filter Condition</b><br />
          To change a field, invoke the field list and choose the required field.
        </p><p><b>Changing an Operator in a Filter Condition</b><br />
          To change an operator, invoke the operator list and choose the required operator.
        </p><p><b>Editing a Value in a Filter Condition</b><br />
          To edit a value, click the operand value and type some text.
          To discard changes and close the active edit box, press ESC.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7313/aspnet-webforms-controls/pivot-grid/data-shaping/filtering/prefilter" Title="Filter" />
      </Demo>
      <Demo Key="FilterPopup" Title="Filter Popup" SeoTitle="Filter Popup"
            HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/FilterPopup.png">
        <Description>
          <![CDATA[
					<p>
					This demo shows features related to filter popup windows.
					</p><p>
          The filter popup window can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.OptionsFilter">ASPxPivotGrid.OptionsFilter</helplink> property:        
					</p>
          <ul>
          <li>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsFilter.ShowOnlyAvailableItems">ShowOnlyAvailableItems</helplink> property specifies whether to suppress filter items that cannot be displayed because of filters applied to other fields. In this demo, use the <b>Show Only Available Items</b> check box to display or hide filtered items.
          </li>
          <li>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsFilter.ShowListBoxSearchUI">ShowListBoxSearchUI</helplink> property controls whether to display the search control in the filter popup that allows you to locate items displayed within a list. In this demo, use the <b>Show Search UI</b> check box to disable or hide the search control. 
          </li>
          </ul>
				]]>
        </Description>
        <HighlightedDescription>
          A Filter Popup allows end-users to apply filtering to individual fields. This demo shows how to use filter popups and change their settings.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/3599/aspnet-webforms-controls/pivot-grid/ui-elements/filter-window" Title="Filter Window" />
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="DataVisualization" Title="Data Visualization" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="BasicChartIntegration" Title="Basic Chart Integration" SeoTitle="General Charts Integration Options">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> allows visualizing data displayed in the Pivot Grid using the XtraCharts Suite.
          By default, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.XtraCharts.Web.WebChartControl">WebChartControl</helplink> displays all data of the <b>ASPxPivotGrid</b> control.
        </p><p>
          If you chart data horizontally, the <b>WebChartControl</b> uses row values as series and column values as arguments, or vice versa
          if you want to visualize data vertically. To specify how data is interpreted in a chart, use the
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.Data.PivotGridOptionsChartDataSourceBase.ProvideDataByColumns">PivotGridOptionsChartDataSourceBase.ProvideDataByColumns</helplink> property. 
          In this demo, this can be done via a configuration checkbox.
        </p><p>
          To exclude totals from the chart, turn off the 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.Data.PivotGridOptionsChartDataSourceBase.ProvideColumnGrandTotals">PivotGridOptionsChartDataSourceBase.ProvideColumnGrandTotals</helplink>, 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.Data.PivotGridOptionsChartDataSourceBase.ProvideRowGrandTotals">PivotGridOptionsChartDataSourceBase.ProvideRowGrandTotals</helplink> 
          and similar options.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7343/aspnet-webforms-controls/pivot-grid/data-analysis/integration-with-the-chart-control" Title="Integration with the XtraCharts Suite" />
      </Demo>
      <Demo Key="CustomChartIntegration" Title="Custom Chart Integration" SeoTitle="Custom Chart Ingegration">
        <Description>
          <![CDATA[<p>
        This demo illustrates how to customize data, passed from an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> to a <b>Chart Control</b>.
        </p><p>
        The <b>ASPxPivotGrid</b> provides the capability to choose whether it's necessary to pass field values to the Chart as strings or as values, thus preserving initial data types. So, in the column area field group, date-time field values are passed to the Chart as date-time values. The Chart can show data using a lot of measure units: <b>Year</b>, <b>Quarter</b> and <b>Month</b>, and can calculate integrals for every unit. Collapsing a column field in a column field group increases the data scale, thus decreasing the number of available chart measure units.
        </p><p>
        In addition, the <b>ASPxPivotGrid</b> provides the capability to customize every field and cell value passed to the chart control. This demo contains three rules of exporting row field values: <b>'ProductName'</b> and <b>'Category/ProductName'</b> as strings and <b>'Encoded Product Category'</b> by alphabetical encoding as characters. Cell value exporting in this demo is customized to skip values that are less than the specified threshold value.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7343/aspnet-webforms-controls/pivot-grid/data-analysis/integration-with-the-chart-control" Title="Integration with the XtraCharts Suite" />
      </Demo>
      <Demo Key="MapsIntegration" Title="Maps Integration" SeoTitle="Maps Integration">
        <Description>
          <![CDATA[<p>
          The <b>Bing Maps</b> service provides the capability to display sales reports on a map. The
          maps provide a JavaScript API to display maps, locate countries and businesses, and create pushpin indicators.
        </p><p>
          To send report data from the server to the client side, use the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.CustomJsProperties">CustomJsProperties</helplink> event.
          This event automatically serializes dictionary and list-typed property data, without any additional efforts.
        </p><p>
          These properties can be accessed on the client side as follows: <b>[PivotGrid ClientInstanceName].[PropertyName]</b></p><p>
          To display a sales report on a map, create a new instance of the <b>SalesMap</b> class and use
          the <b>SalesMap.ShowMap</b> method.
          Its parameters are the following:
        </p><ul><li><em>mapContainerId</em> - id of a map container element;
          </li><li><em>salesPerCountry</em> - dictionary of country:sales pairs;
          </li><li><em>loadingPanel</em> - instance of a LoadingPanel client instance;
          </li></ul><p>
          Note that all parameters are mandatory.
        </p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="DataProcessing" Title="Data Processing" HighlightedTagNames="dx:ASPxPivotGrid">
      <Keywords>Reporting, aspxreportcontrol</Keywords>
      <Demo Key="UnboundsFields" Title="Unbound Fields" SeoTitle="Unbound Fields - Calculated Fields">
        <Description>
          <![CDATA[<p>
          The ASPxPivotGrid control allows you to create Unbound Fields which are not bound to any field in the control's underlying data source. These fields should be populated manually. For instance, they can display custom information and even use summary results calculated by the pivot grid.
          </p><p>
          In this demo, the <i>Sales Person</i> and <i>Order Amount</i> fields are unbound, and populated via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.CustomUnboundFieldData">CustomUnboundFieldData</helplink> event. These unbound fields are an equivalent of calculated columns provided by data sources. To specify how values for fields based on bound fields are calculated, use the <b>Sales Person Format</b> and <b>Order Amount Rule</b> combo boxes.
          </p><p>
          The <i>Percent of OrderTotal</i> and <i>Bonus Amount</i> unbound data fields are calculated using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.CustomCellDisplayText">CustomCellDisplayText</helplink> event. Cell values of the <i>Percent of OrderTotal</i> field specify the percentage ratio of the current order's sum as compared to the order's total sum. <i>Bonus Amount</i> field values display 15% if the order amount is greater than $50,000 and 10% otherwise.
          </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7259/aspnet-webforms-controls/pivot-grid/binding-to-data/unbound-fields" Title="Unbound Data" />
      </Demo>
      <Demo Key="ServerMode" Title="Large Database (Server Mode)" SeoTitle="Large Database (Server Mode)"
					HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/ServerMode.png">
        <Description>
          <![CDATA[
              <p>This demo illustrates how to bind the DevExpress ASP.NET Pivot Grid control to a large databases using LINQ to SQL.</p>

              <p>
              With the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control, you can easily bind to LINQ to SQL data sources via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Data.Linq.LinqServerModeDataSource">LinqServerModeDataSource</helplink> data providing component. 
              Simply specify the type of objects retrieved from a data source and the table name. Internally, 
              the LinqServerModeDataSource component was specifically designed to allow the Pivot Grid control to efficiently process large amounts of data.
               The LinqServerModeDataSource component automatically enables server mode to optimize the execution of all LINQ queries initiated by the Pivot Grid.
               In this mode, the Pivot Grid control performs data-aware operations on the database server side, which allows the control to quickly load and display data even if sorting, 
              grouping, filtering, and summary are used. This technique significantly improves the Pivot Grid's speed and responsiveness.
              </p>
              <p>
              You can try this feature in our <a href="http://demos.devexpress.com/RWA/SalesViewer/Sales.aspx">Sales Viewer</a> real world application demo.
              </p>
              ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress LinqServerModeDataSource component improves performance when binding the DevExpress ASP.NET Pivot Grid to a large data set, because only small portions of data are loaded on demand. This demo illustrates how to bind the ASPxPivotGrid control to a large database using LINQ to SQL.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Layout" Title="Layout" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="TotalsLocation" Title="Totals Location" SeoTitle="Totals Location">
        <Description>
          <![CDATA[<p>
          This demo shows you how to control the location of group and grand
          totals. These totals can be displayed either before or after
          the corresponding data cells.
          </p><p>
          The location of row totals and column totals is specified via the 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTotalsLocation">RowTotalsLocation</helplink> and 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.ColumnTotalsLocation">ColumnTotalsLocation</helplink> properties respectively.
          Use the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.SetBothTotalsLocation(DevExpress.XtraPivotGrid.PivotTotalsLocation)">SetBothTotalsLocation</helplink> 
          method to set values of these properties simultaneously.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="FieldsCustomization" Title="Customization Window" SeoTitle="Fields Customization - Field List Window - Customization Form"
            HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/FieldsCustomization.png">
        <Description>
          <![CDATA[<p>
          This example shows the Fields Customization Window. This allows you to temporarily hide
          specific fields and then restore them again when needed.
        </p><p>
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> allows you to show and hide the Fields Customization Window both on the server (using C# or VB code)
          and on the client using JavaScript. This demo shows the JavaScript usage. Here, when clicking the
          btnCustomizationFields button, we are calling the 
          <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid.ChangeCustomizationFieldsVisibility">ChangeCustomizationFieldsVisibility</helplink> 
          method that hides or shows the Fields Customization Window.
        </p><p>
          The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid.ChangeCustomizationFieldsVisibility">ChangeCustomizationFieldsVisibility</helplink> 
          method is a part of the <b>ASPxPivotGrid's</b> <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid._members">ClientSideAPI</helplink>.
          The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid._members">ClientSideAPI</helplink> is a collection of methods and events available on the client.
        </p><p>
          Also, the demo shows the usage of the ClientSide 
          <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid.CustomizationFieldsVisibleChanged">CustomizationFieldsVisibleChanged</helplink> event.
          When fired, this event changes the btnCustomizationFields button caption from "Show" to "Hide" and
          vice versa.
        </p>]]>
        </Description>
        <HighlightedDescription>
          The Customization Window allows end-users to change the ASPxPivotGrid layout at runtime using drag-and-drop operations. You can change a Customization Window's style and layout.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/11789/aspnet-webforms-controls/pivot-grid/layout/customization-form/customization-form-overview" Title="Customization Form Overview" />
      </Demo>
      <Demo Key="CompactLayout" Title="Compact Layout" SeoTitle="Compact Layout">
        <Description>
          <![CDATA[<p>
          By default, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> shows all rows in a hierarchical way, 
          which is common for pivot tables (Full Layout). However, when there are
          a lot of data fields in a Row Area, it may be necessary to show them in
          a tree-like manner (Compact Layout). In this demo, you can switch from
          Compact Layout to Full Layout and move data fields from one area to another
          to see what the pivot grid looks like with these settings.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/8211/aspnet-webforms-controls/pivot-grid/layout/compact-layout-for-hierarchical-row-values" Title="Compact Layout for Hierarchical Row Values" />
      </Demo>
      <Demo Key="Groups" Title="Field Groups" SeoTitle="Field Groups">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> provides the capability to arrange its fields into groups. 
          End-users cannot separate such fields by dragging one of them to a different area or hiding it on the customization form.
          They can only expand and collapse groups at any level to show or hide data related to particular fields.
        </p><p>
          In this demo, fields located within the Row, Column and Data areas are joined into groups.
          Try to drag them, expand and collapse individual fields.
        </p><p>
          To group fields at design-time, open the <helplink href="https://docs.devexpress.com/AspNet/4935/aspnet-webforms-controls/pivot-grid/design-time-features/aspxpivotgrid-designer/fields-and-groups-page">Fields and Groups page</helplink>. 
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7264/aspnet-webforms-controls/pivot-grid/layout/field-groups" Title="Field Groups" />
      </Demo>
      <Demo Key="ShowHeaders" Title="Header Visibility" SeoTitle="Header Visibility">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control provides four options that control the visibility of field headers within header areas. For instance, you can hide column field headers which will prevent users from adding new fields to the Column Header Area, move existing column fields to other areas, etc.
        </p><p>
          To show/hide field headers located within different areas, use the following check boxes:
          </p>
          <ul>
          <li>
          The the <b>Show Filter Headers</b> check box - shows/hides field headers, located within the Filter area. To customize the headers visibility in code, use the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.ShowFilterHeaders">ShowFilterHeaders</helplink> property.
          </li>
          <li>
          The the <b>Show Column Headers</b> check box - shows/hides field headers, located within the Column area. To customize the headers visibility in code, use the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.ShowColumnHeaders">ShowColumnHeaders</helplink> property.
          </li>
          <li>
          The the <b>Show Data Headers</b> check box - shows/hides field headers, located within the Data area. To customize the headers visibility in code, use the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.ShowDataHeaders">ShowDataHeaders</helplink> property.
          </li>
          <li>
          The <b>Show Row Headers</b> check box - shows/hides field headers, located within the Row area. To customize the headers visibility in code, use the <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.ShowRowHeaders">ShowRowHeaders</helplink> property.
          </li>
          </ul>
        ]]>
        </Description>
      </Demo>
      <Demo Key="DataHeadersDisplayMode" Title="Data Headers Display Mode" SeoTitle="Data Headers Display Mode">
        <Description>
          <![CDATA[<p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> allows you to display data in a more compact manner by temporarily hiding data field headers. In this instance, data fields
          are displayed within a hidden panel, which pops up when an end-user hovers the mouse over the data header area. This might be useful when there
          are three or more data fields.
        </p><p>
          To enable this feature, set the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsView.DataHeadersDisplayMode">PivotGridWebOptionsView.DataHeadersDisplayMode</helplink> to 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotDataHeadersDisplayMode">'Popup'</helplink>. 
          In this demo, use the 'Data Headers Display Mode' combo box to switch between various display modes.
        </p><p>
          If enabled, the <b>ASPxPivotGrid</b> automatically hides data fields if there are three or more data fields. 
          The minimum number of data fields, required to activate this feature, is specified by the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsView.DataHeadersPopupMinCount">PivotGridWebOptionsView.DataHeadersPopupMinCount</helplink> property. 
          In this demo, this can be specified via the 'Data Headers Popup Min Count' spin editor.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="UndoRedo" Title="Undo/Redo" SeoTitle="Undo/Redo - Save and Restore Layout">
        <Description>
          <![CDATA[<p>
			This demo shows the undo/redo functionality based on the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> capability to save and restore its collapsed state and layout.
	        </p><p>
			Reorder, hide, or show hidden fields; filter and sort data; expand or collapse field values - you can roll back all these actions and then repeat them via the <b>Undo</b> and <b>Redo</b> buttons.
		  </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7266/aspnet-webforms-controls/pivot-grid/layout/save-and-restore-layout" Title="Save and Restore Layout" />
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Appearance" Title="Appearance" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="CellTemplates" Title="Cell Templates" SeoTitle="Cell Templates" >
        <Description>
          <![CDATA[<p>
          This demo shows a share of sales per product and per category. This report contains absolute and percent values, and their graphical representation.
        </p><p>
          You can replace the content of pivot grid cells via templates, as described below:
        </p><ol><li>Create a class that implements the <b>ITemplate</b> interface.</li>
        <li>Create an instance of this class, and assign it to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.CellTemplate">ASPxPivotGrid.CellTemplate</helplink> property.</li></ol><p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> passes an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridCellTemplateContainer">PivotGridCellTemplateContainer</helplink> object to the <b>ITemplate.InstantiateIn</b> method. 
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridCellTemplateContainer.Value">Value</helplink> and 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridCellTemplateContainer.Text">Text</helplink> properties 
          contain the current cell's value and display text, respectively.
        </p><p>
          When implementing the <b>InstantiateIn</b> method, you need to create a web control that will be rendered instead of the cell's content. 
          This control should be added to the <b>PivotGridCellTemplateContainer.Controls</b> collection.
        </p><p>
          To render a simple text, add a <b>LiteralControl</b> to the <b>PivotGridCellTemplateContainer.Controls</b> collection.
        </p>]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Pivot Grid control (ASPxPivotGrid) provides you with a set of templates for specifying the layout of its elements. The Cell Template allows you to customize the template for the content displayed in cells.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7279/aspnet-webforms-controls/pivot-grid/appearance/aspxpivotgrid-elements-that-support-templates" Title="ASPxPivotGrid Elements that Support Templates" />
      </Demo>
      <Demo Key="FieldValueTemplates" Title="Field Value Templates" SeoTitle="Field Value Templates"
            HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/FieldValueTemplates.png">
        <Description>
          <![CDATA[<p>
          This demo shows sales vary based on Moon phases and Chinese months. Axis values are replaced with the image of the Moon and Chinese letters using templates 
          (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridField.ValueTemplate">PivotGridField.ValueTemplate</helplink>).
        </p><p><b>Note:</b> to view the Chinese Calendar demo, you should install Chinese language support.
        </p>]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Pivot Grid control (ASPxPivotGrid) provides a set of templates for specifying the layout of its elements. The Field Value Template allows you to customize the template to display field values in the pivot grid.
        </HighlightedDescription>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7279/aspnet-webforms-controls/pivot-grid/appearance/aspxpivotgrid-elements-that-support-templates" Title="ASPxPivotGrid Elements that Support Templates" />
      </Demo>
      <Demo Key="CustomPopupMenu" Title="Custom Popup Menu" SeoTitle="Custom Popup Menu">
        <Description>
          <![CDATA[<p>
          This demo shows how to add a new menu item to the Field Value popup menu. The "Filter By This Value" menu
          item allows you to filter the corresponding field by the value currently being clicked.
        </p><p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> provides two popup menus. The first menu is shown when an end-user right clicks a field
          value. The second menu is shown when an end-user right clicks a field header or right clicks within the empty area.
        </p><p>
          Custom menu items can be created and added to the pivot grid's popup menus within the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.PopupMenuCreated">PopupMenuCreated</helplink> event handler.
          To add a new menu item, use the 
          <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.menuitemcollection.add.overloads">MenuItemCollection.Add</helplink> method. 
          The event parameter provides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotPopupMenuCreatedEventArgs.MenuType">MenuType</helplink> property,
          which identifies the menu currently being displayed. The popup menu, itself, is returned by the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotPopupMenuCreatedEventArgs.Menu">Menu</helplink> property.
        </p><p>
          To define an action, which is executed after an end-user has clicked a custom menu item, handle the client-side
          <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientPivotGrid.PopupMenuItemClick">PopupMenuItemClick</helplink> event.
        </p>]]>
        </Description>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="OLAP" Title="OLAP" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="Browser" Title="OLAP Browser" SeoTitle="OLAP Browser - Microsoft SQL Server Analysis Services Support">
        <Description>
          <![CDATA[<p>
         The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">Web Forms Pivot Grid</helplink> control allows you to visualize data contained in a cube deployed on an OLAP server. The OLAP data source delegates data management operations (such as summarization, grouping and so on) to an OLAP server and thus reduces the computing load on the web server. The Pivot Grid can use an ordinary server, http server, or cube file as a data source.
        </p><p>
          No model is required to establish an OLAP connection. Just provide a connection string with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.OLAPConnectionString">ASPxPivotGrid.OLAPConnectionString</helplink> property.
        </p><p>
          The Pivot Grid supports OLAP servers and providers listed in the <helplink href="https://docs.devexpress.com/AspNet/11780/aspnet-webforms-controls/pivot-grid/binding-to-data/olap-data-source/requirements-and-limitations#supportedservers">Supported OLAP Servers</helplink> and <helplink href="https://docs.devexpress.com/AspNet/7257/aspnet-webforms-controls/pivot-grid/binding-to-data/olap-data-source/binding-to-olap-data-sources#olapproviders">OLAP Data Providers</helplink> topics.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7257/aspnet-webforms-controls/pivot-grid/binding-to-data/olap-data-source/binding-to-olap-data-sources" Title="Binding to an OLAP Server" />
        <SeeAlso Url="https://docs.devexpress.com/AspNet/10925/aspnet-webforms-controls/pivot-grid/data-shaping/filtering/filtering-basics/olap-filtering-specifics" Title="OLAP Filtering Specifics" />
      </Demo>
      <Demo Key="MultipleTotals" Title="OLAP Multiple Totals" SeoTitle="OLAP Multiple Totals">
        <Description>
          <![CDATA[<p>
          For each field, you can manually specify the number and type of group totals to be displayed.
          This demo shows how to display the <b>Average</b>, <b>Sum</b>, <b>Maximum</b> and <b>Minimum</b>
          summaries for each Category group.
        </p><p>
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridField.CustomTotals">CustomTotals</helplink> 
          collection contains 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridCustomTotal">PivotGridCustomTotal</helplink> 
          objects that represent custom totals for the field. These custom totals are displayed when the field is located within the Column
          Header Area or Row Header Area and only if its 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalsVisibility">TotalsVisibility</helplink> property is set to
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotTotalsVisibility">PivotTotalsVisibility.CustomTotals</helplink>.
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7307/aspnet-webforms-controls/pivot-grid/data-shaping/aggregation/totals" Title="Custom Totals" />
      </Demo>
      <Demo Key="Drilldown" Title="OLAP Drill Down" SeoTitle="OLAP Drill Down">
        <Description>
          <![CDATA[<p>
          This demo shows how to retrieve records that are used to calculate summaries for individual cells 
          when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> is bound to an OLAP server. 
          Click a summary cell to view records from the control's underlying data source associated with this cell. 
          The retrieved data is displayed by the <b>ASPxGridView</b> within a popup window. 
        </p><p>
          To obtain drill-down data, use the pivot grid's 
          <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxpivotgrid.aspxpivotgrid.createdrilldowndatasource.overloads">CreateDrillDownDataSource</helplink> method. 
          You need to specify the data field index, row and column indexes to completely identify the required summary cell.
        </p><p><b>Note:</b> Since drill-down data is provided by the OLAP server, the drill-down datasource can have some extra columns even if you don't have any corresponding fields in the <b>ASPxPivotGrid</b> control. The  OLAP server can also return identity values.        
        </p>]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7272/aspnet-webforms-controls/pivot-grid/data-shaping/aggregation/summaries/obtaining-underlying-data-drill-down" Title="Obtaining Underlying Data" />
      </Demo>
      <Demo Key="KPI" Title="OLAP KPI" SeoTitle="OLAP KPI"
            HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/KPI.png">
        <Description>
          <![CDATA[<p>
          If an OLAP cube contains KPI (key performance indicator) information, 
          the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> can automatically recognize it and display it in an appropriate format. 
          This demo displays a sample report for the Internet Revenue KPI from the Adventure Works sample cube.
        </p><p>
          Each KPI in an OLAP cube has corresponding measures for its value, goal, trend, status and weight. 
          You can obtain these measures at design time using the field's 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridField.FieldName">FieldName</helplink> property. 
          If you don't know their names, call the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.GetOLAPKPIMeasures(System.String)">GetOLAPKPIMeasures</helplink> method.
        </p><p>
          Once you create a field for a KPI measure, you can place it to the pivot grid's data area and use as a standard data field.
        </p><p>
          Each KPI status and trend values have associated graphics that can be specified using the 
          <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraPivotGrid.PivotGridFieldBase.KPIGraphic">PivotGridField.KPIGraphic</helplink> property.
          In this demo the required images can be specified via the 'Status Graphics' and 'Trend Graphics' combo boxes.
        </p>]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Pivot Grid supports automatic recognition of key performance indicators from an OLAP cube. This demo displays a sample report for the Internet Revenue KPI from the Adventure Works sample cube.
        </HighlightedDescription>
      </Demo>
      <Demo Key="MultipleKPI" Title="OLAP Multiple KPI" SeoTitle="OLAP Multiple KPI">
        <Description>
          <![CDATA[<p>
          This demo demonstrates how to obtain OLAP KPI values from the server and display them outside the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid">ASPxPivotGrid</helplink> control in a table.
        </p><p>
          In this demo, we have created an invisible 
          <b>ASPxPivotGrid</b> object. 
          The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.GetOLAPKPIList">GetOLAPKPIList</helplink> method 
          is used to obtain the list of KPIs defined in the OLAP cube. KPI values are obtained using the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.GetOLAPKPIValue(System.String)">GetOLAPKPIValue</helplink> method. 
          Finally we display these values in a table.
        </p><p>
          Since KPI supports graphic representation for its Status and Trend values, we replaced these values with images. OLAP supports 12
          graphic sets such as shapes, smiley faces, traffic lights, etc. In this demo, we display images defined on the server. To get these
          images, call the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.GetOLAPKPIServerGraphic(System.String-DevExpress.XtraPivotGrid.PivotKPIType)">GetOLAPKPIServerGraphic</helplink> method. 
          Individual KPI images can be obtained via the 
          <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.GetKPIImage(DevExpress.XtraPivotGrid.PivotKPIGraphic-DevExpress.XtraPivotGrid.PivotKPIType-System.Int32)">GetKPIImage</helplink> method.
        </p><p><b>Note:</b> To use KPI images, the <b>ASPxPivotGrid</b> object must exist in the controls hierarchy on the page.
        </p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Export" Title="Export" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="Export" Title="Export" SeoTitle="Export - Data Export to PDF, XLS, HTML">
        <Description>
          <![CDATA[
          <p>This demo demonstrates how to easily export data in <b>WYSIWYG</b> (What You See Is What You Get) or <b>Data-Aware</b> modes. Data can be exported to a file or stream in the following formats:</p>
          <ul>
          <li>XLS (<a href="https://docs.devexpress.com/AspNet/devexpress.web.aspxpivotgrid.aspxpivotgridexporter.exportxlstoresponse.overloads" target="_blank">ExportXlsToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToXls.overloads" target="_blank">ExportToXls</a>)</li>
          <li>XLSX (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportXlsxToResponse.overloads" target="_blank">ExportXlsxToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToXlsx.overloads" target="_blank">ExportToXlsx</a>)</li>
          <li>CSV (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportCsvToResponse.overloads" target="_blank">ExportCsvToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToCsv.overloads" target="_blank">ExportToCsv</a>)</li>
          <li>PDF (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportPdfToResponse.overloads" target="_blank">ExportPdfToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToPdf.overloads" target="_blank">ExportToPdf</a>)</li>
          <li>MHT (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportMhtToResponse.overloads" target="_blank">ExportMhtToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToMht.overloads" target="_blank">ExportToMht</a>)</li>
          <li>TXT (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportTextToResponse.overloads" target="_blank">ExportTextToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToText.overloads" target="_blank">ExportToText</a>)</li>
          <li>RTF (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportRtfToResponse.overloads" target="_blank">ExportRtfToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToRtf.overloads" target="_blank">ExportToRtf</a>)</li>
          <li>HTML (<a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportHtmlToResponse.overloads" target="_blank">ExportHtmlToResponse</a>, <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ExportToHtml.overloads" target="_blank">ExportToHtml</a>)</li>
          </ul>
          <p>However, exporting to table formats (XLS, XLSX, and CSV) is performed in Data-Aware mode by default. You can specify the default mode for all methods exported to the Excel format or for each of them. To change the default mode for all methods that support DataAware, use the <a href="https://docs.devexpress.com/CoreLibraries/DevExpress.Export.ExportSettings.DefaultExportType" target="_blank">ExportSettings.DefaultExportType</a> property. To change an export type with each call, create an <b>XlsExportOptionsEx</b> object (or <b>XlsxExportOptionsEx</b>, <b>CsvExportOptionsEx</b> objects), set its <b>ExportType</b> property to the <b>ExportType.DataAware</b> or <b>ExportType.WYSIWYG</b> value and pass this object to the <b>ExportTo...</b> method.</p>
          <p>To export <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid" target="_blank">ASPxPivotGrid</a> data, create an <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter" target="_blank">ASPxPivotGridExporter</a> control instance in addition to ASPxPivotGrid and assign ASPxPivotGrid's <b>ID</b> to the <a href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGridExporter.ASPxPivotGridID" target="_blank">ASPxPivotGridExporter.ASPxPivotGridID</a> property value.</p>
          ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/7260/aspnet-webforms-controls/pivot-grid/export" Title="Export Data" />
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="PagingAndScrolling" Title="Data Paging and Scrolling" HighlightedTagNames="dx:ASPxPivotGrid">
      <Demo Key="VirtualScrolling" Title="Virtual Scrolling" SeoTitle="Virtual Scrolling">
        <Description>
          <![CDATA[<p>This example demonstrates the ASP.NET PivotGrid’s Virtual Scrolling feature. Virtual scrolling mode allows end-users to navigate through pivot grid pages using both vertical and horizontal scrollbars.</p>

<p>To enable this functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsView.VerticalScrollingMode">PivotGridWebOptionsView.VerticalScrollingMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsView.HorizontalScrollingMode">PivotGridWebOptionsView.HorizontalScrollingMode</helplink> properties to <b>PivotScrollingMode.Virtual</b>.</p>

<p>In this mode, the scrollbar can be used with or without a built-in pager to dynamically load requested page data via callbacks.</p>]]>
        </Description>
      </Demo>
      <Demo Key="PagerSettings" Title="Pager Settings" SeoTitle="Pager Settings" >
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Pivot Grid automatically splits a large content across multiple pages and provides a built-in pager, which enables end-users to navigate through data.</p>
            <p>The embedded pager can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.ASPxPivotGrid.OptionsPager">OptionsPager</helplink> property:</p>
            <ul>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.Position">Position</helplink> property controls the pager's position within the Pivot Grid: at the pivot grid's top, bottom, or both. In this demo, use the 'Position' combo box to select the required pager's location.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxPivotGrid.PivotGridWebOptionsPager.PagerAlign">PagerAlign</helplink> property controls where the pager is displayed: to the left, right, center, or the entire width of the pivot grid. Note that the PagerAlign property works properly only when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property returns <b>false</b>. In this demo, use the 'PagerAlign' combo box to select the required location of the pager.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where a page size item is displayed: to the left or right of the pager. In this demo, use the 'PageSizeItemPosition' combo box to select the required location of the pager size item.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies whether or not page number separators are displayed. Use the 'ShowSeparators' check box to show or hide the separators.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of the pager's buttons that cannot be used at the moment and are temporarily disabled.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of the pager's numeric buttons that navigate a user to the corresponding pages.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls the page size item visibility. In this demo, use the 'Show PageSizeItem' check box to show and hide this item.</li>
              <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">Summary.Visible</helplink> property controls the pager's summary visibility. In this demo, use the ' Show Summary' check box to show and hide this element.</li>
            </ul>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="XtraReports" Url="XtraReportsDemos" Title="DevExpress XtraReports" SeoTitle="Reporting Tool for ASP.NET AJAX" NavItemTitle="Reporting" SupportsThemeParameters="false" OrderIndex="3" IntegrationHighlighted="true" HideSourceCode="true">

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_DemoCenter_XtraReportsAsp_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/ReportsLargeLogo.png</IntegrationImageUrl>
    <IntegrationDescription>
      Native integration with DevExpress WinForms and ASP.NET Controls and unparalleled design-time productivity.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Reports">
      <BannerTitle>
        The No-Compromise Reporting Tool for ASP.NET
      </BannerTitle>
      <BannerText>
        Native integration with DevExpress WinForms and ASP.NET Controls and unparalleled design-time productivity
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=RV2xISHKBlA</BannerUrl>

      <DescriptionTitle>
        Welcome to the online demo site of the XtraReports Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            This website demonstrates some of the many features and capabilities available to you when using our <b>XtraReports Suite</b>. These features include:
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <DescriptionTitle>About Reporting</DescriptionTitle>
      <Description>
        <![CDATA[
            <p>
              The DevExpress Reporting Suite provides the capability to create reports and reporting applications targeted at the ASP.NET platform. DevExpress Reporting allows presenting master-detail information of any complexity, exporting its data to the most popular formats, as well as customizing report elements' appearance.
            </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <SeeAlso Url="http://www.youtube.com/watch?v=NVT_Df317J0" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/XtraReports/2162/reporting" Title="Documentation" />
      <KeyFeature Name="Export">
        <Description>
          <![CDATA[
             DocumentViewer allows you to export its data to PDF, XLS, XLSX, DOCX, CSV, HTML, MHT, TEXT, Image and RTF formats.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Integration with Charting and OLAP Data Mining">
        <Description>
          <![CDATA[
             You can use a linked pair of PivotGrid and Chart controls to visualize your report data.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Conditional Formatting">
        <Description>
          <![CDATA[
             Conditional formatting allows you to change the appearance (and visibility) of report elements that satisfy a specific condition.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Master-Detail Report">
        <Description>
          <![CDATA[
             DocumentViewer allows you to present master-detail information of any complexity.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>
    <DemoGroup Key="Interaction" Title="Interaction" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="DrillDownReport" Title="Drill-Down Report" SeoTitle="Drill-Down Report" HighlightedIndex="14" HighlightedImageUrl="~/Content/DemoIcons/DrillDownReport.png">
        <Description><![CDATA[
		<p>This demo illustrates a drill-down report with collapsible sections that end users can expand in Print Preview.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/14956/detailed-guide-to-devexpress-reporting/provide-interactivity/create-drill-down-reports" target="_blank">See Documentation</a></p>
		]]></Description>
        <HighlightedDescription>
          This demo illustrates a drill-down report with collapsible sections that end users can expand in Print Preview.
        </HighlightedDescription>
      </Demo>
      <Demo Key="EmployeePerformanceReview" Title="Employee Performance Review">
        <Description>
          <![CDATA[
          <p>DevExpress Reporting allows you to create forms, polls, and surveys you can fill in Print Preview. In this demo, content editing is enabled for the Check Box controls and allows you to choose one of predefined options.</p>
          <p><a href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRCheckBox.EditOptions" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
      </Demo>
      <Demo Key="InteractiveSorting" Title="Interactive Sorting" SeoTitle="Interactive Sorting">
        <Description><![CDATA[
		<p>DevExpress Reporting allows you to enable sorting in Print Preview with no code. In this demo, end users can sort report groups and detail data.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/5527/detailed-guide-to-devexpress-reporting/provide-interactivity/sort-a-report-in-print-preview" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="EForm" Title="E-Form" SeoTitle="E-Form" HighlightedIndex="15" HighlightedImageUrl="~/Content/DemoIcons/E-Form.png">
        <Description>
          <![CDATA[<p>This demo illustrates how to use the Character Comb control to create a fillable application form in Print Preview. In this form, the Character Comb and Picture Box controls are set to edit mode to allow end users to fill the cells, choose a predefined image, and draw a signature.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/118134" target="_blank">See Documentation</a></p>]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how to use the Character Comb control to create a fillable application form in Print Preview. In this form, the Character Comb and Picture Box controls are set to edit mode to allow end users to fill the cells, choose a predefined image, and draw a signature.
        </HighlightedDescription>
      </Demo>
      <Demo Key="VehicleInspection" Title="Vehicle Inspection Report" IsUpdated="true" HighlightedIndex="16" HighlightedImageUrl="~/Content/DemoIcons/VehicleInspection.png">
        <Description>
          <![CDATA[
		  <p>This demo illustrates a localized report that incorporates design and text variations that target different languages and cultures. Select a language report parameter to preview the localized version. You can run the Report Designer to edit text translations and create culture-specific design.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/401573/detailed-guide-to-devexpress-reporting/globalize-and-localize-reports/localize-reports" target="_blank">See Documentation</a></p>
      <p>A report in this demo uses the Check Box, Label and Picture Box controls in edit mode to create a customizable Vehicle Inspection Report. Labels allow you to input car data and leave inspection comments. Check Box controls use custom SVG glyphs and are grouped in a way that allows them to behave like radio buttons. The Picture Box uses Signature edit mode, and allows you to specify car damage after external examination.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/117343/detailed-guide-to-devexpress-reporting/provide-interactivity/content-editing-in-print-preview" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates a localized report that incorporates design and text variations that target different languages and cultures. Select a language report parameter to preview the localized version. You can run the Report Designer to edit text translations and create culture-specific design.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ReportTypes" Title="Report Types" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="HierarchicalReport" Title="Hierarchical Report">
        <Description>
          <![CDATA[
                <p>This demo shows how to print hierarchical data in a tree view. In this report, the detail band's HierarchyPrintOptions property is used to specify the ParentID / ID data relation. Drill-Down is enabled to allow users to expand and collapse hierarchy levels in Print Preview.</p>
                <p><a href="https://docs.devexpress.com/XtraReports/400925" target="_blank">See Documentation</a></p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="TableReport" Title="Table Report" HighlightedIndex="9" HighlightedImageUrl="~/Content/DemoIcons/Table.png">
        <Description>
          <![CDATA[
                <p>This demo illustrates how to use the Table control to create a table report. This control allows you to draw a data-aware table and apply report styles (for example, to odd and even table rows).</p>
                <p>In this demo, the XRTableCell.TextFitMode property is used to adjust the Supplier column's font size and occupy the available cell space.</p>
                <p><a href="https://docs.devexpress.com/XtraReports/4784" target="_blank">See Documentation</a></p>
                ]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how to use the Table control to create a table report. This control allows you to draw a data-aware table and apply report styles (for example, to odd and even table rows).
        </HighlightedDescription>
      </Demo>
      <Demo Key="MasterDetail" Title="Master-Detail Report" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/MasterDetail.png">
        <Description><![CDATA[
		<p>This demo illustrates how to use Detail Report bands to create a <helplink href="https://docs.devexpress.com/XtraReports/4785/create-popular-reports/create-a-master-detail-report-with-detail-report-bands">master-detail report</helplink>. The generated document displays three data levels: a supplier, a supplier's products and a product's orders.</p><p>Refer to the <a href="http://demos.devexpress.com/XtraReportsDemos/ReportTypes/Subreports.aspx">Subreports</a> demo to see another approach to create master-detail reports.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/4785/create-popular-reports/create-a-master-detail-report-with-detail-report-bands" target="_blank">See Documentation</a></p>
		]]></Description>
        <HighlightedDescription>
          <![CDATA[
		This demo illustrates how to use Detail Report bands to create a <a href="https://docs.devexpress.com/XtraReports/4785/create-popular-reports/create-a-master-detail-report-with-detail-report-bands">master-detail report</a>. The generated document displays three data levels: a supplier, a supplier's products and a product's orders.
		]]>
        </HighlightedDescription>
      </Demo>
      <Demo Key="Subreports" Title="Subreports">
        <Description>
          <![CDATA[
          <p>This demo illustrates how to use the <helplink href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRSubreport">Subreport</helplink> control to create master-detail reports. This approach is useful if your data source does not contain ADO.NET relationships or if you want to associate the Subreport control with a detail report you use across reports.</p>
          <p>Refer to the <a href="http://demos.devexpress.com/XtraReportsDemos/ReportTypes/MasterDetail.aspx">Master-Detail Report</a> demo to see another approach to create master-detail reports.</p>
          <p><a href="https://docs.devexpress.com/XtraReports/4629/create-popular-reports/create-a-master-detail-report-with-subreports" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
      </Demo>
      <Demo Key="MultiColumn" Title="Multi-Column Report">
        <Description><![CDATA[<p>In this demo, the Detail band's MultiColumn property is specified to display report data in several columns. In the Parameters panel, you can select columns layout and see how grouped and ungrouped data is arranged in columns.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/4786" target="_blank">See Documentation</a></p>]]></Description>
      </Demo>
      <Demo Key="LabelReport" Title="Label Report" HighlightedIndex="10" HighlightedImageUrl="~/Content/DemoIcons/LabelReport.png">
        <Description>
          <![CDATA[
          <p>The DevExpress Report Wizard allows you to choose between more than 1500 predefined label types and specify label options. This demo report is created using the Report Wizard and can be printed on a specific label printer.</p>
          <p><a href="https://docs.devexpress.com/XtraReports/4792/create-popular-reports/create-labels-and-badges" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>The DevExpress Report Wizard allows you to choose between more than 1500 predefined label types and specify label options. This demo report is created using the Report Wizard and can be printed on a specific label printer.</HighlightedDescription>
      </Demo>
      <Demo Key="ReportMerging" Title="Report Merging">
        <Description><![CDATA[<p>In this demo, pages with charts belong to a separate report that is merged to the base report. For this, the base report contains the Subreport control with the <b>Generate Own Pages</b> option enabled. This option allows you to print/export the subreport on individual pages and preserve reports' page settings and orientation.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/400691" target="_blank">See Documentation</a></p>]]></Description>
      </Demo>
      <Demo Key="ReportMergingWithPdf" IsNew="true" Title="Report Merging with PDF" HighlightedIndex="11" HighlightedImageUrl="~/Content/DemoIcons/ReportMergingWithPdf.png">
        <Description>
          <![CDATA[
		<p>This demo illustrates how to use the PdfContent control to create reports that include PDF content. In this demo, the source of included PDF content is stored in the database.</p>
		<p>The Subreports demo demonstrates an alternative way to include external content in a report.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/401691" target="_blank">See Documentation</a></p>
		]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how to use the PdfContent control to create reports that include PDF content. In this demo, the source of included PDF content is stored in the database.
        </HighlightedDescription>
      </Demo>
      <Demo Key="SideBySide" Title="Side-by-side Reports">
        <Description>
          <![CDATA[
		  <p>This demo illustrates how to use two <helplink href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRSubreport">Subreport</helplink> controls to create a report that compares employee metrics. These controls are associated with a single report and display data filtered by different employee IDs.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/4787/create-popular-reports/create-a-side-by-side-report" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>The DevExpress Reporting Suite (XtraReports) allows you to seamlessly print multiple reports in a single document, side-by-side.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="DataBinding" Title="Data Binding" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="PivotGridAndChart" Title="PivotGrid And Chart" SeoTitle="Pivot Grid and Chart">
        <Description><![CDATA[
		<p>This demo illustrates how to use a linked Pivot Grid and Chart controls in your report. In this demo, the Chart's DataSource property is set to the Pivot Grid instance. You can change chart options in the Parameters panel to visualize different data from the Pivot Grid.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/14320/detailed-guide-to-devexpress-reporting/use-report-controls/use-charts/link-a-chart-and-a-pivot-grid" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="CalculatedFields" Title="Calculated Fields">
        <Description><![CDATA[
		<p>DevExpress reports allows you to create calculated fields based on the data fields from the report's data source. This demo illustrates several expressions based on the data and are displayed in the last report column.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/4801/detailed-guide-to-devexpress-reporting/shape-report-data/use-calculated-fields" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="HugeAmountRecords" Title="Large Dataset" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/LargeQuantityOfData.png">
        <Description>
          <![CDATA[
          <p>DevExpress Reporting allows you to use the CachedReportSource component to save pages to a file or database during document generation. This decreases memory consumption when creating large documents.</p>
          <p><a href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.Web.CachedReportSourceWeb" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates the CachedReportSource component functionality that allows you to create documents whose size is only limited by the amount of free hard drive space. This component stores pages during the document generation in a file or database storage, which frees up the memory and speeds up the performance.
        </HighlightedDescription>
      </Demo>
      <Demo Key="MailMerge" Title="Rich Text and Mail Merge" HighlightedIndex="12" HighlightedImageUrl="~/Content/DemoIcons/MailMerge.png">
        <Description><![CDATA[
		<p>This demo illustrates how to use Mail Merge and the Rich Text control within DevExpress Reports. The Report Designer displays Rich Text controls with data field names enclosed in square brackets. In Print Preview these names are substituted with data from the report's data source.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRRichText" target="_blank">See Documentation</a></p>
		]]></Description>
        <HighlightedDescription>This demo illustrates how to use Mail Merge and the Rich Text control within DevExpress Reports.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ComplexReports" Title="Real-life Reports" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="BalanceSheetReport" Title="Balance Sheet" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/BalanceSheet.png" SeoTitle="Balance Sheet">
        <Description>
          <![CDATA[
                <p>This demo illustrates how to use the Cross Tab control to create a Balance Sheet report. In this demo, the Cross Tab’s HierarchicalRowLayout property is enabled to display rows in a tree-like form. Grand total values and field headers are hidden, and column field values are grouped by years. The GroupRowIndex variable is used in expressions to apply odd and even row styles.</p><p></p><p>Refer to the Sales Summary Report demo for another Cross Tab layout.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/401303" target="_blank">See Documentation</a></p>
                ]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how to use the Cross Tab control to create a Balance Sheet report. In this demo, the Cross Tab’s HierarchicalRowLayout property is enabled to display rows in a tree-like form. Grand total values and field headers are hidden, and column field values are grouped by years. The GroupRowIndex variable is used in expressions to apply odd and even row styles.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ProductList" IsUpdated="true" Title="Product List" SeoTitle="Product List Report">
        <Description><![CDATA[<p>This demo illustrates a table report with a calculated field that is used to group data and generate a document map.</p>]]></Description>
      </Demo>
      <Demo Key="FallCatalog" Title="Fall Catalog" SeoTitle="Catalog Report">
        <Description><![CDATA[
        <p>This demo illustrates a real-life report that includes the following:</p><ul>
<li>a table of contents and document map that refer to product categories;</li>
<li>grouping and sorting by a category name;</li>
<li>labels with summary expressions;</li>
<li>data filtering by a custom type parameter.</li></ul>]]></Description>
      </Demo>
      <Demo Key="Invoice" Title="Invoice" SeoTitle="Invoice Report" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/Invoice.png">
        <Description><![CDATA[<p>This demo illustrates a sample Invoice report. Refer to the <a href="https://docs.devexpress.com/XtraReports/14651/get-started-with-devexpress-reporting">Get Started with DevExpress Reporting</a> documentation section and the <a href="https://www.youtube.com/playlist?list=PL8h4jt35t1wixmi-yv3Wj6FSJMEa08npR">DevExpress Reporting</a> video channel for details on how to create reports.</p><p><a href="https://docs.devexpress.com/XtraReports/117229" target="_blank">See Documentation</a></p>]]></Description>
        <HighlightedDescription>
          <![CDATA[
            This demo illustrates a sample Invoice report. Refer to the <a href="https://docs.devexpress.com/XtraReports/14651/get-started-with-devexpress-reporting">Get Started with DevExpress Reporting</a> documentation section and the <a href="https://www.youtube.com/playlist?list=PL8h4jt35t1wixmi-yv3Wj6FSJMEa08npR">DevExpress Reporting</a> video channel for details on how to create reports.
          ]]>
        </HighlightedDescription>
      </Demo>
      <Demo Key="SwissQRBill" IsUpdated="true" Title="Swiss QR Bill" SeoTitle="Swiss QR Bill Report">
        <Description><![CDATA[<p>This demo illustrates how to use the DevExpress Bar Code report control to incorporate a Swiss QR Code into a report.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/400351" target="_blank">See Documentation</a></p> ]]></Description>
        <HighlightedDescription>This demo illustrates how to use the DevExpress Bar Code report control to incorporate a Swiss QR Code into a report.</HighlightedDescription>
      </Demo>
      <Demo Key="ProfitAndLossReport" Title="Profit And Loss Report" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/ProfitAndLoss.png">
        <Description><![CDATA[<p>This demo illustrates how to use vertical bands to create a sample profit and loss statement. These bands allow you to design reports where record fields are arranged vertically, and records are printed horizontally.</p><p>In the Parameters Panel, select the data range to examine incomes and expenses for a specific fiscal period.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/400316" target="_blank">See Documentation</a></p>]]></Description>
        <HighlightedDescription>This demo illustrates how to use vertical bands to create a sample profit and loss statement. These bands allow you to design reports where record fields are arranged vertically, and records are printed horizontally.</HighlightedDescription>        
      </Demo>
      <Demo Key="RollPaper" Title="Roll Paper Report">
        <Description><![CDATA[<p>In this demo, the report's PaperKind property is set to Custom and the RollPaper property is enabled. This allows you to specify the roll paper's width and print the generated document as a single, uninterrupted page.</p>]]></Description>
      </Demo>
      <Demo Key="RestaurantMenu" Title="Restaurant Menu" HighlightedIndex="16" HighlightedImageUrl="~/Content/DemoIcons/RestaurantMenu.png">
        <Description>
          <![CDATA[<p>This demo illustrates how to use a detail band's multi-column settings to create a two-column restaurant menu. The report is bound to data and includes multiple groups. Each group represents a different category and sub-category of meals and beverages.</p>]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how to use a detail band's multi-column settings to create a two-column restaurant menu.
        </HighlightedDescription>
      </Demo>
      <Demo Key="SalesSummary" Title="Sales Summary Report" SeoTitle="Sales Summary Report" HighlightedIndex="8" HighlightedImageUrl="~/Content/DemoIcons/CrossTab.png">
        <Description>
          <![CDATA[
                <p>This demo illustrates how to use the Cross Tab control to create a Sales Summary report. In this demo, the Cross Tab calculates automatic totals and grand totals across all row and column fields. The top left corner displays row field headers, and row field values are grouped by quarter.</p><p></p><p>Refer to the Balance Sheet demo for another Cross Tab layout.</p><p></p><p><a href="https://docs.devexpress.com/XtraReports/4226" target="_blank">See Documentation</a></p>
                ]]>
        </Description>
        <HighlightedDescription>This demo illustrates how to use the Cross Tab control to create a Sales Summary report.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="LayoutFeatures" Title="Layout Features" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="CrossBandContent" Title="Cross-Band Content"  HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/CrossBandContent.png" SeoTitle="Cross-Band Content">
        <Description>
          <![CDATA[
                <p>This demo illustrates how you can display Group Header content across a group. The Group Header's PrintAcrossBands property is active and the controls within the band are printed as a background layer for subsequent Group Header, Detail and Group Footer bands. The Detail band's FillEmptySpace property is enabled to get rid of the gap between details and totals.</p>
                <p><a href="https://docs.devexpress.com/XtraReports/401300" target="_blank">See Documentation</a></p>
                ]]>
        </Description>
        <HighlightedDescription>
          This demo illustrates how you can display Group Header content across a group. The Group Header's PrintAcrossBands property is active and the controls within the band are printed as a background layer for subsequent Group Header, Detail and Group Footer bands. The Detail band's FillEmptySpace property is enabled to get rid of the gap between details and totals.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ShrinkGrow" Title="Shrink and Grow">
        <Description><![CDATA[<p>You can enable the <helplink href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRControl.CanShrink">CanShrink</helplink> and <helplink href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRControl.CanGrow">CanGrow</helplink> properties for labels, table cells and rich text controls to set non-fixed heights. In this demo, the CanGrow property is enabled for the cell that is bound to the About data field. This cell has a different height depending on the bound content.</p>]]></Description>
      </Demo>
      <Demo Key="VerticalAnchoring" Title="Anchoring">
        <Description>
          <![CDATA[<p>In this demo, the report controls' Anchor Horizontally and Anchor Vertically properties are specified to maintain the distance to the container's edges when you change the page's layout (Landscape parameter).</p>]]>
        </Description>
      </Demo>
      <Demo Key="HiddenColumns" Title="Hidden Columns" SeoTitle="Hidden Columns" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/IListDataSource.png">
        <Description>
          <![CDATA[
		  <p>DevExpress Reporting allows you to specify how to process hidden cells in reports. In this demo, use the parameter in the Parameters panel to hide a column and see the XRTable.ProcessHiddenCellMode property’s Resize Cells Proportionally mode in action: when a column is hidden, the remaining columns are resized, and empty space is eliminated.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRTable.ProcessHiddenCellMode" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>DevExpress Reporting allows you to specify how to process hidden cells in reports. In this demo, use the parameter in the Parameters panel to hide a column and see the XRTable.ProcessHiddenCellMode property’s Resize Cells Proportionally mode in action: when a column is hidden, the remaining columns are resized, and empty space is eliminated.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ReportControls" Title="Report Controls" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="Sparkline" Title="Sparkline">
        <Description><![CDATA[
		<p>DevExpress Reporting allows you to use the Sparkline control with conditional markers in reports. In this demo report, the table contains sparklines that display monthly payment statistics for each customer. The blue and red markers in this demo specify the lowest and highest values.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/14963/detailed-guide-to-devexpress-reporting/use-report-controls/use-gauges-and-sparklines/add-sparklines-to-a-report" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="BarCode" Title="Bar Code">
        <Description><![CDATA[
		<p>This report demonstrates all bar code types the BarCode control supports and the AutoModule option the BarCode control exposes. Enable this option in the Parameters panel to automatically calculate the width of the narrowest bar or space based on the control's size.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/1313/detailed-guide-to-devexpress-reporting/use-report-controls/use-bar-codes/add-bar-codes-to-reports" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="Shapes" Title="Shapes">
        <Description><![CDATA[
		<p>This demo illustrates the shapes that you can add to your report using the Shape control.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/2657/detailed-guide-to-devexpress-reporting/use-report-controls/draw-lines-and-shapes/draw-shapes" target="_blank">See Documentation</a></p>
		]]></Description>
     </Demo>
      <Demo Key="Charts" Title="Chart" IsUpdated="true" SeoTitle="Charting in Reports" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/Chart.png">
        <Description><![CDATA[
		<p>You can use the DevExpress Reporting Chart control to add charts to your reports. In this demo, the Chart control displays sales data collected from different sources, and FederationDataSource is used to combine these sources into one data source. The chart's Data Member is set to the Categories.CategoriesProducts relation.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/15039/detailed-guide-to-devexpress-reporting/use-report-controls/use-charts" target="_blank">See Documentation</a></p>
		]]></Description>
        <HighlightedDescription>You can use the DevExpress Reporting Chart control to add charts to your reports. In this demo, the Chart control displays sales data collected from different sources, and FederationDataSource is used to combine these sources into one data source. The chart's Data Member is set to the Categories.CategoriesProducts relation.</HighlightedDescription>
      </Demo>
      <Demo Key="CrossBand" Title="Cross-band Controls">
        <Description><![CDATA[
		<p>This demo illustrates how to use the Cross-Band Line and Cross-Band Box controls in reports to draw lines and rectangles across several bands and through the entire page.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/9708/detailed-guide-to-devexpress-reporting/use-report-controls/draw-lines-and-shapes/draw-cross-band-lines-and-boxes" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
      <Demo Key="CustomControl" Title="Custom Control" SeoTitle="Custom Report Controls">
        <Description><![CDATA[
		<p>DevExpress Reporting allows you to add custom controls to reports. In this demo, the XRControl.BeforePrint and XRControl.HtmlItemCreated events are handled to print progress bars that indicate the 10 most heavily populated countries in the selected continent.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/2607/detailed-guide-to-devexpress-reporting/use-report-controls/use-custom-and-third-party-controls/create-custom-controls" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Appearance" Title="Appearance" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="FormattingRules" Title="Conditional Formatting">
        <Description><![CDATA[
		<p>This demo illustrates how to use formatting rules to conditionally change report controls appearance/visibility. In the parameters panel, select a condition and a style to create a formatting rule and apply it to the table.</p>
		<p><a href="https://docs.devexpress.com/XtraReports/5167/detailed-guide-to-devexpress-reporting/shape-report-data/shape-data-legacy-data-bindings/conditionally-change-a-controls-appearance" target="_blank">See Documentation</a></p>
		]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="WebSpecificFeatures" Title="Web-specific Features" HighlightedTagNames="dx:ASPxWebDocumentViewer">
      <Demo Key="ReportDesigner" Title="Web Report Designer" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Designer.png">
        <Description>
          <![CDATA[
		  <p>This demo illustrates use of the HTML5 Web Report Designer. It allows end-users to customize the report's structure within modern browsers, without having to install additional software.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/119171" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
        <HighlightedDescription>This demo illustrates use of the HTML5 Web Report Designer. It allows end-users to customize the report's structure within modern browsers, without having to install additional software.</HighlightedDescription>
      </Demo>
      <Demo Key="ColorSchemeCustomization" Title="Color Scheme Customization">
        <Description>
          <![CDATA[
		  <p>This demo illustrates predefined color schemes and allows you to create your own scheme based on them.</p><p>You can select one of the available color schemes from the drop-down menu on the right panel and customize nine base colors.</p><p>Click the <b>Save Changes</b> button to download files with your customization or the <b>View Changes</b> button to invoke the dialog with customization results. These results include the following:</p><ul><li>Changed styles that define a reporting control’s common appearance;</li><li>Changed styles for DevExtreme UI widgets used in the reporting control;</li><li>Metadata that you can use in the <a target="_blank" href="https://js.devexpress.com/ThemeBuilder/">Theme Builder</a> to customize DevExtreme widgets separately.</li></ul><p>Use the <b>Reset Changes</b> button to reset all changes made to the base color scheme.</p>
		  <p><a href="https://docs.devexpress.com/XtraReports/400233" target="_blank">See Documentation</a></p>
		  ]]>
        </Description>
      </Demo>      
      <Demo Key="MobileViewer" Title="Mobile Viewer">
        <Description>
          <![CDATA[<p>This demo illustrates a Document Viewer for mobile devices.</p><p>The Mobile Viewer enables you to view, export and navigate documents on phones and tablets. The viewer supports text search and provides a user interface to enter report parameter values.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

  </DemoProduct>

  <DemoProduct Key="ASPxScheduler" Url="ASPxSchedulerDemos" Title="DevExpress ASPxScheduler" SeoTitle="ASP.NET AJAX Calendar and Scheduling Controls" NavItemTitle="Scheduling" OrderIndex="8" IntegrationHighlighted="true">
    <Keywords>appointment</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxScheduler_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Scheduler.png</IntegrationImageUrl>
    <IntegrationDescription>
      Replicates the Microsoft Outlook's calendar UI. Features day, week, month, and timeline views and includes built-in printing support.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Scheduler Control">
      <BannerTitle>
        MS Office&#174; Style Calendar and Scheduling Controls for ASP.NET
      </BannerTitle>
      <BannerText>
        Deliver Microsoft Outlook-inspired schedulers and calendars with built-in printing support
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=HyGMH1hG73A</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxScheduler Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxScheduler Suite</b>. These features include:</p>
        ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress Outlook-inspired Scheduler Suite (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink>) provides a set of comprehensive tools for embedding a scheduling capability in your web project. Different view types and built-in printing support allow delivering full-featured personal information management systems in the shortest possible time.
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <SeeAlso Url="http://www.youtube.com/watch?v=HyGMH1hG73A" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/3685/aspnet-webforms-controls/scheduler" Title="Documentation" />
      <KeyFeature Name="Multiple View Types for Efficient Data Representation">
        <Description>
          <![CDATA[
             The Scheduler includes views for a detailed picture of events across one or more days, for any given weekly period, and across multiple weeks. Events can be arranged across horizontal timelines. Multiple resource mode allows end-users to browse multiple schedules simultaneously.
            ]]>
        </Description>
      </KeyFeature>
	  <KeyFeature Name="Built-in Event Management, Recurrence and Reminders">
        <Description>
          <![CDATA[
             All appointment dialogs are ready to use and can be fully customized and extended. Built-in dialogs, objects and methods handle recurring event chains. You can set a reminder for any event. 
            ]]>
        </Description>
      </KeyFeature>
	  <KeyFeature Name="Extended Date Selection with Date Navigator">
        <Description>
          <![CDATA[
             Like Microsoft Outlook, the Date Navigator Control provides an intuitive way in which to select dates.
            ]]>
        </Description>
      </KeyFeature>
	  <KeyFeature Name="Data Binding, Import, Export">
        <Description>
          <![CDATA[
             ASPxScheduler can be used in databound mode with external data sources. Support for the iCalendar RFC 2445 standard allows you to exchange scheduling data between your application and other calendars.
            ]]>
        </Description>
       </KeyFeature>
	   <KeyFeature Name="Printing">
        <Description>
          <![CDATA[
		  Scheduler Reports give you the ability to print a schedule or export your calendar in PDF and various graphic formats. You can design your schedule's appearance for the printed page.
            ]]>
        </Description>
       </KeyFeature>
	  	   <KeyFeature Name="Time Zone Support">
       <Description>
          <![CDATA[
		  All time-dependent data can be stored translated to UTC and displayed according to the client time zone. The Day View can display multiple time rulers with different time zone settings.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="ViewTypes" Title="View Types" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="DayView" Title="Day View" SeoTitle="Day View" >
        <Description><![CDATA[<p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Day View</b>, which provides the most detailed view of appointments for a particular day.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to see appointments for the current system date, click on the <b>Today</b> button.</p><p>To edit an appointment, right-click on it, and choose the <b>Open</b> option in the invoked context menu.</p><p>To create a new appointment, select a time cell (or several time cells at once), and right-click on the selected area. In this case the context menu will provide you with the ability to create appointments of different kinds, as well as navigate through the scheduler or change its time scale options.</p>]]></Description>
      </Demo>
      <Demo Key="WorkWeekView" Title="Work Week View" SeoTitle="Work Week View" >
        <Description><![CDATA[<p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Work Week View</b>, which displays appointments for working days in a particular week.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to see appointments for the current system date, click on the <b>Today</b> button.</p><p>To edit an appointment, right-click on it, and choose the <b>Open</b> option in the invoked context menu.</p><p>To create a new appointment, select a time cell (or several time cells at once), and right-click on the selected area. In this case the context menu will provide you with the ability to create appointments of different kinds, as well as navigate through the scheduler or change its time scale options.</p>]]></Description>
      </Demo>
      <Demo Key="FullWeekView" Title="Full Week View" SeoTitle="Full Week View" >
        <Description><![CDATA[<p>This example illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Full Week View</b>, which displays appointments for a specified week.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to view appointments for the current system date, click on the <b>Today</b> button. To edit an appointment, right-click it, and choose the <b>Open</b> item within the context menu.</p><p>To create a new appointment, select a time cell (or multiple time cells), and right-click the selected area. The context menu will provide you with options to create appointments and navigate through the scheduler.</p>]]></Description>
      </Demo>
      <Demo Key="WeekView" Title="Week View" SeoTitle="Week View" >
        <Description><![CDATA[<p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Week View</b>, which displays appointments for the specified weekly period.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to see appointments for the current system date, click on the <b>Today</b> button.</p><p>To edit an appointment, right-click on it, and choose the <b>Open</b> option in the invoked context menu.</p><p>To create a new appointment, select a time cell (or several time cells at once), and right-click on the selected area. In this case the context menu will provide you with the ability to create appointments of different kinds, as well as navigate through the scheduler.</p>]]></Description>
      </Demo>
      <Demo Key="MonthView" Title="Month View" SeoTitle="Month View" >
        <Description><![CDATA[<p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Month View</b>, which is the least detailed view designed to provide your end-users with an appointments overview.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to see appointments for the current system date, click on the <b>Today</b> button.</p><p>To edit an appointment, right-click on it, and choose the <b>Open</b> option in the invoked context menu.</p><p>To create a new appointment, select a time cell (or several time cells at once), and right-click on the selected area. In this case the context menu will provide you with the ability to create appointments of different kinds, as well as navigate through the scheduler.</p>]]></Description>
      </Demo>
      <Demo Key="TimelineView" Title="Timeline View" SeoTitle="Timeline View" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/TimelineView.png">
        <Description><![CDATA[<p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Timeline View</b>, which displays appointments as horizontal bars along the timescales, and provides end-users with a clearer overview for scheduling purposes.</p><p>In this demo, you're able to navigate through dates using two <b>arrow buttons</b> at the top-left corner of the ASPxScheduler. If you want to see appointments for the current system date, click on the <b>Today</b> button.</p><p>To edit an appointment, right-click on it, and choose the <b>Open</b> option in the invoked context menu.</p><p>To create a new appointment, select a time cell (or several time cells at once), and right-click on the selected area. In this case the context menu will provide you with the ability to create appointments of different kinds, as well as navigate through the scheduler.</p><p>Also, in this context menu you may specify which time scales are currently taken into account, and which of them display their captions on top of the scheduler.</p>]]></Description>
        <HighlightedDescription>The DevExpress Scheduler’s Timeline view displays appointments as horizontal bars along the timescales, and provides end-users with a clearer overview for scheduling purposes.</HighlightedDescription>
      </Demo>
      <Demo Key="AgendaView" Title="Agenda View" SeoTitle="Agenda View" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/AgendaView.png">
        <Description>
          <![CDATA[
          <p>This demo illustrates the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's <b>Agenda View</b>, which lists individual days' appointments chronologically. You can navigate through dates using the two <b>arrow buttons</b> at the ASPxScheduler's top-left corner. If you want to see the current day's appointments, click the <b>Today</b> button.</p>
          <p>To edit an appointment, right-click it and select the <b>Open</b> option in the invoked context menu.</p>
          <p>You can right-click a date cell to create a new appointment using the context menu . In this case, the context menu allows you to create different types of appointments, as well as navigate through the scheduler or change its timescale options.</p>
          <p>Use the following settings to customize the <b>Agenda View's</b> appearance and functionality:</p>
          <ul>
             <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.AppointmentDisplayOptions">AgendaView.AppointmentDisplayOptions</helplink> - Specifies how to display appointments in the Agenda View.</li>
             <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.OptionsBehavior">ASPxScheduler.OptionsBehavior</helplink> - Provides access to options which regulate the scheduler's general appearance and behavior.</li>
             <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.DayHeaderOrientation">DayHeaderOrientation</helplink> - Specifies a day header's orientation in Agenda View.</li>
             <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.AllowFixedDayHeaders">AllowFixedDayHeaders</helplink> - Specifies whether a day header should be fixed when scrolling in Agenda View.</li>
             <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AgendaView.DayCount">DayCount</helplink> - Specifies the Agenda View's visible time interval.</li>
          </ul>
          ]]>
        </Description>
        <HighlightedDescription>DevExpress Scheduler allows displaying a chronological list of appointments, grouped by a day (Agenda View).</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Grouping" Title="Grouping" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="GroupByDate" Title="Group by Date" SeoTitle="Group Appointments by Date">
        <Description><![CDATA[<p>This demo illustrates how to group scheduled appointments by date.</p><p>In this demo, you're able to navigate through currently visible resources, as well as increase or decrease their total number. For this, use the <b>Resource Navigator</b> control (toolbar buttons with arrows, plus and minus signs, and a drop-down list of resources), which is shown on the top of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.</p><p>Also, you may change the currently active view (<b>Day</b>, <b>Week</b>, <b>Month</b>, etc.) using the corresponding buttons, and see how grouping by date is applied in different views.</p>]]></Description>
      </Demo>
      <Demo Key="GroupByResource" Title="Group by Resource" SeoTitle="Group Appointments by Resources" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/GroupByResource.png">
        <Description><![CDATA[<p>This demo illustrates how to group scheduled appointments by resources.</p><p>In this demo, you're able to navigate through currently visible resources, as well as increase or decrease their total number. For this, use the <b>Resource Navigator</b> control (toolbar buttons with arrows, plus and minus signs, and a drop-down list of resources), which is shown on the top of the <b>ASPxScheduler</b> control.</p><p>Also, you may change the currently active view (<b>Day</b>, <b>Week</b>, <b>Month</b>, etc.) using the corresponding buttons, and see how grouping by resources is applied in different views.</p>]]></Description>
        <HighlightedDescription>The DevExpress Scheduler’s Resource Navigator allows grouping scheduled appointments by resources. Using the Resource Navigator, you can navigate through visible resources, as well as increase or decrease their total number.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="DataBinding" Title="Data Binding" HighlightedTagNames="dx:ASPxScheduler">
      <Keywords>databinding</Keywords>
      <Demo Key="BoundMode" Title="Bound Mode" SeoTitle="Binding to External Data Source">
        <Description>
          <![CDATA[<p>This demo illustrates how to bind the Scheduler to data.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerStorage">ASPxSchedulerStorage</helplink> component (which provides data for the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control) is bound to the <b>EntityDataSource</b> control using the markup. Data field mappings are specified in the markup.
            </p>
            <p>Since the CarScheduling data table (which contains appointemnt data) has an auto-incremented identity column, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.CommitIdToDataSource">CommitIdToDataSource</helplink> property is set to false and the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.AutoRetrieveId">AutoRetrieveId</helplink> property is set to true.
            </p>
            <p>Appointment editing is not allowed if this demo is run online. An attempt to modify an appointment results in the error message.
            </p>
            <p>See also <a target="_blank" href="https://docs.devexpress.com/AspNet/14378/aspnet-webforms-controls/scheduler/examples/data-binding/how-to-bind-an-aspxscheduler-to-ms-sql-server-database-step-by-step-guide">How to bind an ASPxScheduler to data at design time (step-by-step guide)</a>.
                </p>]]>
        </Description>
      </Demo>
      <Demo Key="ListBoundMode" Title="List Bound Mode" SeoTitle="Binding to Appointment List Created Programmatically">
        <Description>
          <![CDATA[<p>This demo illustrates how to bind the Scheduler to the datasource that exposes the <b>IBindingList</b> interface.</p>
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> is bound to the <b>ObjectDataSource</b> control (which is set as an appointment data source) in the code-behind file. Data field mappings are specified in code of the Page Load event
            </p>
            <p>The <b>CustomEventDataSource</b> is the business object with which the <b>ObjectDataSource</b> control is performing data operations. It generates a unique identifier for a newly inserted object, so the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxAppointmentStorage.AutoRetrieveId">AutoRetrieveId</helplink> property is set to true.
            </p>
            <p>Appointment editing is not allowed if this demo is run online. An attempt to modify an appointment results in the error message.
                </p>]]>
        </Description>
        <SourceFile>~/App_Code/CustomEvents.cs</SourceFile>
      </Demo>
      <Demo Key="XPOBoundMode" Title="XPO Bound Mode" SeoTitle="Binding to Appointment List Created with XPO">
        <Description>
          <![CDATA[<p>This demo illustrates how to bind a scheduler to data represented via an XPO datasource.</p><p><b>XPO</b> (<b>eXpress Persistent Objects</b>) is a powerful data framework provided by DevExpress. It gives developers the freedom to build business objects without having to deal with complexities of mapping them onto database tables.</p><p>You can learn more about XPO on <a href="https://www.devexpress.com/products/net/orm/">its Web page</a>.</p>
          <p>See also <a target="_blank" href="https://docs.devexpress.com/AspNet/4837/aspnet-webforms-controls/scheduler/examples/data-binding/how-to-bind-an-aspxscheduler-to-xpo-via-the-unit-of-work">How to: Bind an ASPxScheduler to XPO via the Unit of Work (step-by-step guide)</a>.
                </p>]]>
        </Description>
        <SourceFile>~/App_Code/XpoHelper.cs</SourceFile>
        <SourceFile>~/App_Code/XPOBoundMode.cs</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="API" Title="API" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="ClientSideEvents" Title="Client-Side Events" SeoTitle="Client Side">
        <Description>
          <![CDATA[<p> This Demo illustrates the capabilities of the ASPxScheduler control's client events. This demo allows you to specify which client-side events you want to track. Interact with the Scheduler interface, and information about all tracked events raised in response of your actions will be displayed in the event log. To learn more about client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.SchedulerClientSideEvents._members"> Client-Side Events</helplink> help topic.</p>]]>
        </Description>
      </Demo>
      <Demo Key="AppointmentsSelection" Title="Appointments Selection" SeoTitle="Client Side Appointment">
        <Description><![CDATA[<p>This demo illustrates how to take advantage of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> client-side scripting to obtain information about the selected appointment.</p><p>In this example, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.AppointmentsSelectionChanged">AppointmentSelectionChanged</helplink> client-side scripting event is handled. It is raised every time an end-user selects an appointment. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.GetAppointmentProperties(aptId-propertyNames-onCallBack)">GetAppointmentProperties</helplink> method is used to make an asynchronous callback for appointment property values. This method uses the list of appointment properties and the function handler as input parameters. The function will receive property values when they are delivered.</p><p>After the values are passed to the specified function, it formats and displays them.</p>]]></Description>
      </Demo>
      <Demo Key="ChangeActiveView" Title="Active View Change" SeoTitle="Client Side Active View Change">
        <Description><![CDATA[<p>This demo illustrates how to take advantage of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> client-side scripting when switching active views.</p><p>In this demo, you’re able to switch an active view by selecting it in the combo box. To perform this, the code uses the ASPxScheduler client-side API.</p><p>When a view type is selected in the drop-down list, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.SetActiveViewType(value)">SetActiveViewType</helplink> client-side method is called to change the active view.</p><p>Two client-side events are handled when the active view type is being modified. The <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.ActiveViewChanging">ActiveViewChanging</helplink> event handler asks the user for a confirmation of changing the scheduler’s view type, and if the answer is negative, cancels the operation. After the active view type is changed, the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.ActiveViewChanged">ActiveViewChanged</helplink> event occurs. It uses the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.GetActiveViewType">GetActiveViewType</helplink>  client-side method to indicate the currently active view for updating the combo box content.</p>]]></Description>
      </Demo>
      <Demo Key="AppointmentModification" Title="Appointment Form" SeoTitle="Client Side Appointment Editing Form">
        <Description><![CDATA[<p>This demo illustrates how to create the appointment editing form, using client-side scripting. The technique employs the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler">ASPxClientScheduler</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientAppointment">ASPxClientAppointment</helplink> objects.</p><p>In this example, popup menu commands are intercepted by JavaScript functions, which create the ASPxClientAppointment for the selected interval and resource or use the client Scheduler’s GetSelectedAppointmentIds and GetAppointment methods to obtain the client appointment. Then, the RefreshClientAppointmentProperties method updates the client appointment properties and invokes the scripting appointment form.</p><p>The scripting appointment editing form consists of two templates – ScriptAppointmentForm.ascx and ScriptRecurrenceForm.ascx. Their code implements the logic required to populate the form’s controls and update the appointment with new values. When the button on the form is pressed, one of the following methods of the client scheduler: UpdateAppointment, InsertAppointment or DeleteAppointment - is called. This method performs a callback using information contained in the client appointment. The appointment is then processed on the server.</p><p>Note that client-side appointment forms and client data processing may significantly reduce response times, and improve application performance and usability.</p>]]></Description>
        <SourceFile>~/UserForms/ScriptAppointmentForm.ascx</SourceFile>
        <SourceFile>~/UserForms/ScriptAppointmentForm.ascx.cs</SourceFile>
        <SourceFile>~/UserForms/ScriptRecurrenceForm.ascx</SourceFile>
        <SourceFile>~/UserForms/ScriptRecurrenceForm.ascx.cs</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Customization" Title="Customization" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="CustomAppointmentForm" Title="Custom Editing Form" SeoTitle="Custom Appointment Editing Form">
        <Description>
          <![CDATA[<p>This demo illustrates how to change the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control UI (e.g. to show a custom <b>Edit Appointment</b> form).</p>
          <p>Create a new appointment or right-click on any existing appointment and choose the <b>Open</b> item, to see a custom <b>Edit Appointment</b> form in place of the standard form.</p>]]></Description>
        <SourceFile>~/App_Code/CustomAppointmentEditDialogViewModel.cs</SourceFile>
      </Demo>
      <Demo Key="CustomInplaceEditor" Title="Custom In-place Editor" SeoTitle="Custom Appointment In-Place Editor">
        <Description><![CDATA[<p>This demo illustrates how to replace a standard in-place editor with a custom one.</p><p>To see how this feature works, double-click on any existing appointment. Note that the custom in-place editor in this demo contains several UI elements, which are not present in the standard in-place editor.</p>]]></Description>
        <SourceFile>~/UserForms/MyInplaceEditor.ascx</SourceFile>
        <SourceFile>~/UserForms/MyInplaceEditor.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="CustomAppointments" Title="Custom Appointments" SeoTitle="Custom Appointment Appearance">
        <Description><![CDATA[<p>This demo illustrates how to customize appointments appearance.</p><p>In this demo, you're able to choose whether <b>start</b> and <b>end time</b> should be always displayed in appointments, and the way in which they should be displayed (either <b>text</b> or <b>image</b>).</p><p>Also, you may specify how the <b>appointment status</b> and <b>continue arrows</b> should be displayed, whether <b>recurrence</b> and <b>custom text</b> should be shown, and what <b>images</b> should be used.</p><p>Try to change all these options and see the effect for the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.</p>]]></Description>
      </Demo>
      <Demo Key="CustomMenu" Title="Custom Menu" SeoTitle="Custom Appointment Context Menu">
        <Description><![CDATA[<p>This demo illustrates how to customize a popup menu - a menu, invoked by right-clicking the Scheduler control or via the smart tag.</p><p>In this example, default scheduler menu items are replaced with custom ones. Instead of commands that enable you to create a new appointment or change its label and status, the popup menu contains submenu items that allow the creation of predefined events.</p><p>To achieve this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.PreparePopupMenu">PreparePopupMenu</helplink> event. It provides access to an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerPopupMenu">ASPxSchedulerPopupMenu</helplink> class instance, which represents the popup menu being displayed, and contains methods for modifying menu items and structure.</p>]]></Description>
      </Demo>
      <Demo Key="CustomToolTip" Title="Custom ToolTip" SeoTitle="Custom Tootltip">
        <Description><![CDATA[<p>This demo illustrates how you can customize a tooltip shown when a mouse cursor hovers over a scheduler's selected area or a selected appointment. Another option is a tooltip displayed during the appointment drag operation.</p><p>In this example a SelectionChanged client-side event triggers a tooltip display over a selected time cell area. This approach illustrates the use of <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.ShowSelectionToolTip(x-y)">ASPxClientScheduler.ShowSelectionToolTip</helplink> method to display a tooltip.</p><p>A custom form that implements the required capabilities is shown instead of the default tooltip. Rounded edges effect is accomplished via the built-in functionality, other tooltip characteristics can be easily adjusted as well.</p>]]></Description>
        <HighlightedDescription>
          Easily customize tooltips for the DevExpress ASP.NET Scheduler (ASPxScheduler), to display additional information when a mouse cursor hovers over a selected area.
        </HighlightedDescription>
        <SourceFile>~/UserForms/CustomAppointmentTooltip.ascx</SourceFile>
        <SourceFile>~/UserForms/CustomAppointmentTooltip.ascx.cs</SourceFile>
        <SourceFile>~/UserForms/CustomDragAppointmentTooltip.ascx</SourceFile>
        <SourceFile>~/UserForms/CustomDragAppointmentTooltip.ascx.cs</SourceFile>
        <SourceFile>~/UserForms/CustomSelectionTooltip.ascx</SourceFile>
        <SourceFile>~/UserForms/CustomSelectionTooltip.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="ResourceHeaderLayout" Title="Resource Header Layout" SeoTitle="Resource Header Layout">
        <Description>
          <![CDATA[
              <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> allows you to customize the layout of resource headers displayed within grouped views. Settings related to resource header layout are available using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerOptionsView.ResourceHeaders">OptionsView.ResourceHeader</helplink> property. The following settings are available.</p>
              <ul>
              <li>
              <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraScheduler.SchedulerResourceHeaderOptionsBase.RotateCaption">RotateCaption</helplink> - Specifies whether or not to rotate the caption's text.
              </li>
              <li>
              <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerResourceHeaderOptions.ShowCaption">ShowCaption</helplink> - Specifies whether or not to display the resource header caption caption.
              </li>
              <li>
              <helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraScheduler.SchedulerResourceHeaderOptionsBase.ImageAlign">ImageAlign</helplink> - Specifies the image alignment within a resource header.
              </li>
              </ul>              
              <p>Additionally, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerOptionsView.ResourceColorFillArea">OptionsView.ResourceColorFillArea</helplink> property allows you to specify which part of a grouped view should be filled with resource colors – time cells, resource headers, or both.</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Sizing" Title="Sizing" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="FixedHeight" Title="Fixed Height" SeoTitle="Fixed Height">
        <Description><![CDATA[<p>This demo illustrates how to show an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control with a fixed height.</p><p>In this size mode, the <b>ASPxScheduler</b> control always has the same height, but can be horizontally resized, if the width of its elements is changed.</p><p>To accomplish this, omit the width setting for the <b>ASPxScheduler</b> control, but specify the height of all its individual elements.</p>]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Templates" Title="Templates" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="AppointmentTemplate" Title="Appointment Template" SeoTitle="Appointment Template" >
        <Description><![CDATA[<p>This demo illustrates how to customize the appearance of appointments by providing custom templates. The templates to modify are: <b>VerticalAppointmentTemplate</b> for Day, Full Week and Work Week views, <b>HorizontalAppointmentTemplate</b> and <b>HorizontalSameDayAppointmentTemplate</b> for the Month view, <b>HorizontalAppointmentTemplate</b> for the Timeline view.</p><p>In this demo, switch views to observe changes in appointment appearance.</p>]]></Description>
        <SourceFile>~/UserAppointments/VerticalAppointment.ascx</SourceFile>
        <SourceFile>~/UserAppointments/HorizontalAppointment.ascx</SourceFile>
        <SourceFile>~/UserAppointments/HorizontalSameDayAppointment.ascx</SourceFile>
        <SourceFile>~/UserAppointments/HorizontalAlldayAreaAppointment.ascx</SourceFile>
      </Demo>
      <Demo Key="DateHeaderTemplate" Title="Date Headers" SeoTitle="Date Header Template">
        <Description><![CDATA[<p>This demo illustrates how to customize headers shown for every date in a Day View by providing a custom <b>DateHeaderTemplate</b>.</p><p>In this demo, pay your attention to date headers, which appearance is different from the default one.</p>]]></Description>
      </Demo>
      <Demo Key="ResourceHeaderTemplate" Title="Resource Header Template" SeoTitle="Resource Header Template">
        <Description><![CDATA[<p>This demo illustrates how to customize headers shown for every resource by providing a custom template (either <b>HorizontalResourceHeaderTemplate</b> or <b>VerticalResourceHeaderTemplate</b>).</p><p>In this demo, resource headers display car images associated with every resource.</p><p>Try to change group modes (either <b>by date</b> or <b>by resource</b>), or the current view (<b>Day</b>, <b>Work Week</b>, etc.) to see how resource headers look like.</p>]]></Description>
        <HighlightedDescription>
          Resource Headers display the resources assigned to different appointments in a scheduler. These headers are displayed via a custom template in the DevExpress ASP.NET Scheduler (ASPxScheduler), when appointments are grouped by resources or dates.
        </HighlightedDescription>
      </Demo>
      <Demo Key="TimeRulerHeaderTemplate" Title="Time Ruler Header Template" SeoTitle="Time Ruler Header Template">
        <Description><![CDATA[<p>This demo illustrates how to customize headers shown for every time ruler in a Day View by providing a custom <b>TimeRulerHeaderTemplate</b>.</p><p>In this demo, you're able to click on a time ruler header to invoke a drop-down list box, which allows you to change the time zone of a selected time ruler.</p>]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="OperationModes" Title="Operation Modes" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="CallbackMode" Title="Callback Mode" SeoTitle="Callbacks">
        <Description><![CDATA[<p>This demo illustrates how <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> operates when callbacks are enabled (i.e. when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.EnableCallBacks">ASPxScheduler.EnableCallBacks</helplink> property is set to <b>true</b>).</p><p>In this demo, you're able to change the currently active view (Day, Work Week, Week, etc.), navigate to another date, create a new appointment or edit an existing one - to see that only the <b>ASPxScheduler</b> control is reloaded in response to these actions.</p>]]></Description>
      </Demo>
      <Demo Key="PostbackMode" Title="Postback Mode" SeoTitle="Postbacks, Server Round-trip Mode">
        <Description><![CDATA[<p>This demo illustrates how <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> operates when postbacks are enabled instead of callbacks (i.e. when the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.EnableCallBacks">ASPxScheduler.EnableCallBacks</helplink> property is set to <b>false</b>).</p><p>In this demo, you're able to change the currently active view (Day, Work Week, Week, etc.), navigate to another date, create a new appointment or edit an existing one - to see that the <b>entire Web page</b> is reloaded in response to these actions.</p>]]></Description>
      </Demo>
      <Demo Key="UpdatePanelMode" Title="Update Panel Mode" SeoTitle="Scheduler in ASP.NET AJAX UpdatePanel">
        <Description><![CDATA[<p>This demo illustrates how <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> operates when its callbacks are disabled, and it is placed in the AJAX <b>UpdatePanel</b>.</p><p>In this demo, you're able to change the currently active view (Day, Work Week, Week, etc.), navigate to another date, create a new appointment or edit an existing one - to see that the content of the <b>UpdatePanel</b>, which contains the <b>ASPxScheduler</b> control, is reloaded in response to these actions.</p>]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="iCalendar" Title="iCalendar" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="iCalendarExport" Title="iCalendar Export" SeoTitle="iCalendar Format Export">
        <Description><![CDATA[<p>This example demonstrates <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> support for the iCalendar data exchange format. It facilitates data transfer between applications that use ASPxScheduler and other applications, such as Apple iCal, Google Calendar, Microsoft Exchange Server, Microsoft Office Outlook 2007, Novell GroupWise, Windows Calendar.</p><p>In this demo, you can save appointments into an iCalendar file with the .ics extension on the client host. This example creates an iCalendarExporter class instance and calls its Export method to save data to a memory stream. Then it is written to an output stream of an HttpResponse object.</p>]]></Description>
      </Demo>
      <Demo Key="iCalendarImport" Title="iCalendar Import" SeoTitle="iCalendar Format Import">
        <Description><![CDATA[<p>This example demonstrates <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> support for the iCalendar data exchange format. It facilitates data transfer between applications that use ASPxScheduler and other applications, such as Apple iCal, Google Calendar, Microsoft Exchange Server, Microsoft Office Outlook 2007, Novell GroupWise, Windows Calendar.</p><p>In this demo, you can load appointments from the iCalendar file. This example loads file data into a memory stream, creates an iCalendarImporter class instance and calls its Import method to load data into a scheduler. You can check the corresponding box to clear scheduler appointments before import.</p>]]></Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="StandaloneControls" Title="Stand-Alone Controls" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="StorageControl" Title="Storage Control" SeoTitle="Storage Control">
        <Description>
          <![CDATA[
            <p>DevExpress ASP.NET Scheduler Storage Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerStorageControl">ASPxSchedulerStorageControl</helplink>) is a non-visual component that implements all scheduler-based data operations using third-party web controls. </p>            
            <p>This demo illustrates how to create appointments (<helplink href="https://docs.devexpress.com/CoreLibraries/DevExpress.XtraScheduler.SchedulerStorageBase.CreateAppointment.overloads">SchedulerStorageBase.CreateAppointment</helplink> method) with reminders and assign them to an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink> (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControlBase.DataSource">DataSource</helplink> property). Click the "Create Appointment with reminder" button to create an appointment with a reminder that is displayed 5 seconds after it is created. This invokes a hint that notifies end-users about the event, and they can snooze or dismiss reminders using the hint's buttons.</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="DateNavigator" Title="Date Navigator" SeoTitle="Date Navigator Control" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/DateNavigator.png">
        <Description>
          <![CDATA[
              <p>This demo illustrates how to highlight dates that have appointments within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxDateNavigator">ASPxDateNavigator</helplink> control that is bound to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerStorageControl">ASPxSchedulerStorageControl</helplink>.</p>
              <p>Change the demo's options to specify how to draw dates with appointments (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DateNavigatorProperties.AppointmentDatesHighlightMode">AppointmentDatesHighlightMode</helplink>), and if to display the Today button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarProperties.ShowTodayButton">CalendarProperties.ShowTodayButton</helplink>) and week numbers (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.CalendarProperties.ShowWeekNumbers">CalendarProperties.ShowWeekNumbers</helplink>) in the ASPxDateNavigator control.</p>
              <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.DateNavigatorProperties.AppointmentDatesHighlightMode">AppointmentDatesHighlightMode</helplink> 
              property to one of the following values to specify how to draw dates with appointments:</p>
              <ul>
                <li>
                  <b>Bold</b> - Draws the date in bold.
                </li>
                <li>
                  <b>Labels</b> - Displays colored labels under the date. The appointment's identification label (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.AppointmentLabel">AppointmentLabel</helplink>) determines the label's color for the corresponding date in the Date Navigator.
                </li>
                <li>
                  <b>Custom</b> - Allows providing custom highlighting rules.
                </li>
                <li>
                  <b>None</b> - Does not apply any highlighting to the date.
                </li>
              </ul>
          ]]>
        </Description>
        <HighlightedDescription>Using the ASPxScheduler’s Date Navigator you can select the visible date interval of the scheduler.</HighlightedDescription>
      </Demo>
      <Demo Key="ResourceNavigator" Title="Resource Navigator" SeoTitle="Resource Navigator Control">
        <Description>
          <![CDATA[
              <p>This demo illustrates how to navigate through resources using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxResourceNavigator">ASPxResourceNavigator</helplink> control that is bound to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink>.</p>
              <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorProperties.Mode">ResourceNavigatorProperties.Mode</helplink> property to one of the following values to specify the resource navigation mode:</p>
              <ul>
                <li>
                  <p><b>Tokens</b> - Displays resources as tokens. </p>
                  <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorTokensProperties">ResourceNavigatorTokensProperties</helplink> object defines whether to display the resources' colored labels (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorTokensProperties.ShowResourceColor">ResourceNavigatorTokensProperties.ShowResourceColor</helplink>) and the expand button to review all available resources (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorTokensProperties.ShowExpandButton">ResourceNavigatorTokensProperties.ShowExpandButton</helplink>) in the Resource Navigator. </p>
                </li>
                <li>
                  <b>Pager</b> - Uses a pager’s functionality for navigation. End-users can use toolbar buttons with arrows, plus and minus signs, and a drop-down list of resources to navigate through the visible resources, as well as increase or decrease their total number. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ResourceNavigatorPagerProperties">ResourceNavigatorPagerProperties</helplink> object provides settings specific to this mode.
                </li>
              </ul>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Miscellaneous" Title="Miscellaneous" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="EndUserRestrictions" Title="End-User Restrictions" SeoTitle="End-User Restrictions">
        <Description><![CDATA[<p>This demo illustrates how to set end-user restrictions in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.</p><p>Change the demo's options to specify what actions end-users can perform with the scheduled appointments.</p><p>Also you can switch the scheduler's view and group its data either by dates or by resources.</p>]]></Description>
        <HighlightedDescription>
          You can easily set end-user restrictions using the DevExpress ASP.NET Scheduler (ASPxScheduler) control. This demo shows how ASPxScheduler can prevent certain end-user actions such as creating, editing and deleting appointments.
        </HighlightedDescription>
      </Demo>
      <Demo Key="FloatingActionButton" Title="Floating Action Button" SeoTitle="Floating Action Button">
	    <Keywords>fab</Keywords>
        <Description>
          <![CDATA[
          <p>
            This demo illustrates how to use the floating action button (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.FloatingActionButtonProperties">FloatingActionButtonProperties</helplink>) that provides access to the most frequently used actions. The floating action button's actions depend on the triggered element in the scheduler. For example, the floating action button provides the "Open", "Edit" and "Delete" actions if a user selects an appointment or "Create new Appointment" if a user selects a time cell.
          </p>
          <p>
            The following types of floating action buttons are available:
          </p>
          <ul>
            <li>FAB with a single action - Executes the action once an end user clicks the floating action button.</li>
            <li>FAB with multiple actions - The floating action button serves as a container for multiple actions. When pressed, the floating action button expands nested actions.</li>
          </ul>
          <p>
            The FABActionItemClick  client-side event allows you to provide custom scenario when a user clicks a custom action in the floating action button.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Holidays" Title="Holidays" SeoTitle="Holiday Date Highlighting">
        <Description><![CDATA[<p>This demo illustrates how to add statutory holidays to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.</p><p>US Holidays are already added. They are displayed as all-day appointments in the <b>ASPxScheduler</b> control. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxDateNavigator">ASPxDateNavigator</helplink> control paints days with appointments with the <b>Red</b> color.</p><p>You can select location for which the Scheduler should load holidays data from the predefined *.xml file and click <b>Generate Appointments</b>.</p><p>To remove all previously created appointments, click the <b>Clear Appointments</b> button.</p>]]></Description>
      </Demo>
      <Demo Key="CustomWorkTime" Title="Custom Work Time" SeoTitle="Custom Work Time">
        <Description>
          <![CDATA[<p>This demo illustrates the ability to specify custom work time intervals.</p><p>To accomplish this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler.QueryWorkTime">SchedulerControl.QueryWorkTime</helplink> event, which provides information about the current resource and date for which the work time interval is requested and allows you to specify any work time interval you need. Additionally, you can prevent dragging appointments outside of boundaries of a work interval or resizing them by handling the client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.AppointmentDrag">AppointmentDrag</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientScheduler.AppointmentResizing">AppointmentResizing</helplink> events respectively.</p><p>To see this feature in action, toggle the <b>Custom Work Time</b> checkbox.</p>]]></Description>
      </Demo>
      <Demo Key="FormsVisibility" Title="Dialog Form Display Mode" SeoTitle="Dialog Form Display Mode">
        <Description>
          <![CDATA[<p>
          This demo illustrates different modes, in which scheduler forms (e.g. <b>Appointment</b> and <b>Go to Date</b> forms) can be displayed.
        </p><p>Choose one of the options at the top of this demo:</p><ul><li><b>None</b>. A form isn't displayed at all.
          </li><li><b>Popup Window</b>. A form is displayed as a popup window.
          </li><li><b>Fill Control Area</b>. A form fills the total area of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.
          </li></ul><p>
          Then try to invoke the <b>Appointment</b> form to see how it's displayed in different modes. For this, right click on any existing appointment and choose the <b>Open</b> option in the context menu.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="TimeZones" Title="Time Zones" SeoTitle="Time Zones" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/TimeZones.png">
        <Description><![CDATA[<p>This demo illustrates multiple <b>time rulers</b>, which are simultaneously shown in the Day View.</p><p>Each <b>time ruler</b> shows its time using a specific time zone.</p><ul><li>the first <b>time ruler</b> uses GMT (Greenwich Mean Time);</li><li>the second <b>time ruler</b> uses server time;</li><li>the third <b>time ruler</b> uses client time, which can be changed in the drop-down box at the top of this page.</li></ul>]]></Description>
        <HighlightedDescription>The DevExpress ASP.NET Scheduler (ASPxScheduler) allows you to adjust appointment times using time zone information. It allows calculating an appointment's start and end times if the web server's time zone is different from the client's.</HighlightedDescription>
      </Demo>
      <Demo Key="Reminders" Title="Reminders" SeoTitle="Appointment Reminders">
        <Description><![CDATA[<p>This demo illustrates how easy it is to set up a reminder in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> Suite. Click "Create Appointment with reminder" button to create an appointment with a reminder due in 5 minutes time. Then, a reminder alert window will be invoked to provide a notification about the event.</p>]]></Description>
      </Demo>
      <Demo Key="ResourceSharing" Title="Resource Sharing" SeoTitle="Multi-resource Appointments">
        <Description><![CDATA[<p>This example demonstrates how to share resources between appointments to create multi-resource appointments. To assign any appointment to several resources, open the Edit Appointment form and select the required resources in the drop-down list.</p><p>Note: Resource sharing is not enabled by default. To use this feature you should set the ResourceSharing property to true. Make sure that your data table structure is appropriate for resource sharing, since the mapped ResourceID field will hold xml string data.</p>]]></Description>
      </Demo>
      <Demo Key="CellAutoHeight" Title="Cell Auto Height" SeoTitle="Cell Auto Height">
        <Description>
          <![CDATA[<p>
              This demo illustrates how to automatically adjust the height of time cells displayed in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control's Week, Month and Timeline views.</p><p>Choose one of the options at the top of this demo:</p>
              <ul>
                <li><b>None</b>. The height of time cells is set to the default value and fixed.</li>
                <li><b>FitToContent</b>. The view free space is reallocated to display as more appointments as possible. If time cells are empty, their height is set to the predefined minimum value. When new appointments are added, the height of corresponding time cells is unrestrictedly stretched to fit their content.</li>
                <li><b>LimitHeight</b>. Time cells grow up to fit their content until the cell height reaches the predefined maximum value. If time cells are empty, their height is set to the predefined minimum value.</li>
              </ul>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Adaptivity" Title="Adaptivity">
      <Keywords>Adaptivity, responsive</Keywords>
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/AdaptiveLayout.png">
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Scheduler (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink>) allows you to build adaptive layouts in adaptivity mode (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerOptionsAdaptivity.Enabled">OptionsAdaptivity.Enabled</helplink>=true). In this mode, the control automatically resizes its elements when an end user changes the browser's width.</p>
            <ul>
              <li><b>Agenda View</b> - Moves the date section above its appointments list, narrows the time section, and moves the resources to the appointment's subject.</li>
              <li><b>Timeline View</b> - Narrows day headers and appointment sections.</li>
              <li><b>Day View</b> – Narrows days’ appointment sections.</li>
              <li>The Toolbar hides its view selector items in the drop-down list and displays an ellipse button.</li>
              <li>The <b>View Visible Interval</b> changes the date format to make it more compact.</li>
            </ul>
            <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxSchedulerOptionsToolTips.AppointmentToolTipMode">ASPxSchedulerOptionsToolTips.AppointmentToolTipMode</helplink> property to <b>InfoSheet</b> to display an appointment's tool tip at the bottom of the screen.</p>
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Scheduler adapts its content to suit the target browser size and resolution.</HighlightedDescription>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx</SourceFile>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx.cs</SourceFile>
      </Demo>
    </DemoGroup>
    
    <DemoGroup Key="Accessibility" Title="Accessibility" HighlightedTagNames="dx:ASPxScheduler">
      <Demo Key="KeyboardSupport" Title="Keyboard Support" SeoTitle="Keyboard Support">
        <Description>
          <![CDATA[
          <p>This demo illustrates the use of standard keyboard shortcuts in the ASPxScheduler control. The most common supported shortcuts are listed in the table below. To see them in action, scroll this page to the ASPxScheduler control and press the associated key combinations.</p>
          <div>
              <div class="shortcuts-block">
                  <div class="shortcut navigation-shortcut"><b>&#x2191;</b></div>
                  <div class="shortcut navigation-shortcut"><b>&#x2193;</b></div>
                  <div class="shortcut navigation-shortcut"><b>&#x2190;</b></div>
                  <div class="shortcut navigation-shortcut"><b>&#x2192;</b></div>
                  <span>Cell/Appointment navigation</span>
                  <br />
                  <div class="shortcut">Tab</div>
                  <span>Toggle between the cell and appointment selection</span>
              </div>
              <div class="shortcuts-block" style="float: left;">
                  <div class="shortcut">Enter</div>
                  <span>Edit the selected appointment or create a new one</span>
                  <br />
                  <div class="shortcut">Delete</div>
                  <span>Delete an appointment</span>
              </div>
              <div class="shortcuts-block">
                  <div class="shortcut">Shift + <b>&#x2191;</b></div>
                  <span>Expand the selection up</span>
                  <br />
                  <div class="shortcut">Shift + <b>&#x2193;</b></div>
                  <span>Expand the selection down</span>
                  <br />
                  <div class="shortcut">Shift + <b>&#x2190;</b></div>
                  <span>Expand the selection left</span>
                  <br />
                  <div class="shortcut">Shift + <b>&#x2192;</b></div>
                  <span>Expand the selection right</span>
              </div>
              <div class="shortcuts-block">
                  <div class="shortcut">Ctrl + <b>&#x2190;</b></div>
                  <span>Navigate visible intervals backward</span>
                  <br />
                  <div class="shortcut">Ctrl + <b>&#x2192;</b></div>
                  <span>Navigate visible intervals forward</span>
              </div>
              <div class="shortcuts-block">
                  <div class="shortcut">Ctrl + C</div>
                  <span>Copy an appointment</span>
                  <br />
                  <div class="shortcut">Ctrl + V</div>
                  <span>Paste an appointment</span>
                  <br />
                  <div class="shortcut">Ctrl + X</div>
                  <span>Cut an appointment</span>
              </div>
        </div>
        ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Reporting" Title="Reporting">
      <Demo Key="DailyStyle" Title="Daily Style" SeoTitle="Daily Style Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description>
          <![CDATA[
                <p>
                    This demo illustrates how to create a report which corresponds to the Day View of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink>, and mimics the Daily print style.
                </p>
                <p>
                    You can specify the reported time interval in days, the time scale, and the number of resources displayed in a column allocated for one day.
                </p>
                <p>
                    Appointments outside the visible time of day can be printed in the extra cells which are located below the scheduling area. 
                    Check the “Print All Appointments” checkbox to accomplish this.
                </p>
                <p>
                    Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.
                </p>
                <p>See also <a target="_blank" href="http://www.devexpress.com/Support/Center/Issues/ViewIssue.aspx?issueid=K18278">How to print an ASPxScheduler using Reporting mechanism (step-by-step guide)</a>.
                </p>
            ]]>
        </Description>
        <SourceFile>~/UserControls/ReportsDataSource.ascx</SourceFile>
        <SourceFile>~/UserControls/ReportsDataSource.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="WeeklyStyle" Title="Weekly Style" SeoTitle="Weekly Style Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description>
          <![CDATA[<p>This demo illustrates how to create a report which corresponds to the Week View of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> and mimics the Weekly Top to Bottom print style.</p><p>You can specify the reported time interval in days, and the number of resources displayed in a column allocated for one week.  A week can be fitted into a single page to save space, or extended to several pages, providing more detailed view.</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>
                   <p>See also <a target="_blank" href="http://www.devexpress.com/Support/Center/Issues/ViewIssue.aspx?issueid=K18278">How to print an ASPxScheduler using Reporting mechanism (step-by-step guide)</a>.
                   </p>
                ]]>
        </Description>
        <SourceFile>~/UserControls/ReportsDataSource.ascx</SourceFile>
        <SourceFile>~/UserControls/ReportsDataSource.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="MonthlyStyle" Title="Monthly Style" SeoTitle="Monthly Style Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description>
          <![CDATA[<p>This demo illustrates how to create a report which corresponds to the Month View of the Scheduler and mimics the Monthly print style.</p><p>You can specify the number of resources per page.  A month can be fitted into a single page to save space, or extended to several pages providing more detailed view.</p><p>Other options include hiding weekends or printing them compressed, so two days occupy a single cell. Also, you can enhance the layout by placing exactly one month on a page, hiding the appointments scheduled outside the current month</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>
                   <p>See also <a target="_blank" href="http://www.devexpress.com/Support/Center/Issues/ViewIssue.aspx?issueid=K18278">How to print an ASPxScheduler using Reporting mechanism (step-by-step guide)</a>.
                   </p>
                ]]>
        </Description>
        <SourceFile>~/UserControls/ReportsDataSource.ascx</SourceFile>
        <SourceFile>~/UserControls/ReportsDataSource.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="TimelineStyle" Title="Timeline Style" SeoTitle="Timeline Style Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description>
          <![CDATA[<p>This demo illustrates how to create a report which corresponds to the Timeline View of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink>.</p><p>You can specify the number of resources and the number of scale intervals displayed in a column.</p><p>Notice that you can imitate zooming in and out by selecting different time scales for the report, to present your data in the most effective manner.</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>
                   <p>See also <a target="_blank" href="http://www.devexpress.com/Support/Center/Issues/ViewIssue.aspx?issueid=K18278">How to print an ASPxScheduler using Reporting mechanism (step-by-step guide)</a>.
                   </p>
                ]]>
        </Description>
        <SourceFile>~/UserControls/ReportsDataSource.ascx</SourceFile>
        <SourceFile>~/UserControls/ReportsDataSource.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="GroupType" Title="Group Type" SeoTitle="Grouping in Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description><![CDATA[<p>This demo illustrates how the grouping mode affects the report layout. Any grouping results in iterations performed over the specified time interval and the collection of resources. Notice that the iteration order changes when you change the grouping type</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>]]></Description>
      </Demo>
      <Demo Key="ReportTemplates" Title="Report Templates" SeoTitle="Report Templates" HighlightedTagNames="dx:ASPxScheduler dx:ASPxSchedulerControlPrintAdapter">
        <Description>
          <![CDATA[<p>This demo illustrates the use of report templates for creating reports. You can load any previously saved template and instantly preview a report filled with data retrieved from the current <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxScheduler.ASPxScheduler">ASPxScheduler</helplink> control.</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p><p>Pay attention to Tri-fold templates, which combine two or more Scheduler views on one page using the SmartSync Printing technique.</p><p>NOTE: Scheduler reporting functionality requires the XtraReports Suite (available as a separate product or as part of DXperience subscription packages).
            </p>
            <p>See also <a target="_blank" href="http://www.devexpress.com/Support/Center/Issues/ViewIssue.aspx?issueid=K18278">How to print an ASPxScheduler using Reporting mechanism (step-by-step guide)</a>.
                </p>
                ]]>
        </Description>
        <HighlightedDescription>
          Print schedules as your needs dictate using ready-to-use report templates in the DevExpress ASP.NET Scheduler (ASPxScheduler) control. This demo illustrates the various types of report templates available in ASPxScheduler.
        </HighlightedDescription>
        <SourceFile>~/Reporting/ReportPreview.ascx</SourceFile>
        <SourceFile>~/Reporting/ReportPreview.ascx.cs</SourceFile>
      </Demo>
      <Demo Key="AutoHeight" Title="Auto Height" SeoTitle="AutoHeight in Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description><![CDATA[<p>This demo illustrates the AutoHeight feature that enables the time cell to automatically adjust its size to accommodate the appointments it contains.</p><p>The CanShrink property allows you to avoid empty space wasted by cells with no appointments, while the CanGrow property can be used to resize a cell to show all appointments  instead of printing the 'More items' link.</p>]]></Description>
      </Demo>
      <Demo Key="SmartSyncPrinting" Title="SmartSync Printing" SeoTitle="SmartSync Printing" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description><![CDATA[<p>This demo illustrates the SmartSync Printing feature used to create a Tri-fold Printing Style report. If several Scheduler Report controls are placed on the same report, the Scheduler Adapter can coordinate how controls iterate through data.</p><p>This feature can be turned on via the EnableSmartSync property of the Scheduler Print Adapter (by default it is off). The SmartSyncOptions property enables you to specify the group type, i.e. the first parameter through which the controls iterate (date or resource).</p>]]></Description>
      </Demo>
      <Demo Key="DateFormatting" Title="Date Formatting" SeoTitle="Date Formatting in Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description><![CDATA[<p>This example demonstrates how to modify formats applied to header captions and start/end indications within appointments. The demo uses the service substitution technique for the HeaderCaptionService and the AppointmentFormatStringService of the ASPxScheduler. </p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>]]></Description>
      </Demo>
      <Demo Key="DataValidation" Title="Data Validation" SeoTitle="Data Validation in Report" HighlightedTagNames="dx:ReportToolbar dx:ReportViewer">
        <Description><![CDATA[<p>This demo illustrates how you can filter or re-shape data before the report is generated.</p><p>You can modify the collection of resources, set the criteria for appointments and select the days to print.</p><p>Use the Document Viewer control bar to navigate pages, print the report and export it to common formats.</p>]]></Description>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxSpellChecker" Url="ASPxSpellCheckerDemos" Title="DevExpress ASPxSpellChecker" SeoTitle="ASP.NET AJAX Spell Checker" NavItemTitle="Spell Checker" OrderIndex="22" HighlightedTagNames="dx:ASPxSpellChecker">
    <Keywords>spelling</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxSpellChecker_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/SpellChecker.png</IntegrationImageUrl>

    <Intro Title="Introduction" SeoTitle="ASP.NET Spell Checker Control">
      <BannerTitle>
        Microsoft Office&#174; Style Spell Checker for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Provides built-in Office&#174; style error correction dialogs built entirely on DevExpress ASP.NET controls
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://go.devexpress.com/DevExpress_AspDemos_ASPxSpellChecker_Video.aspx</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxSpellChecker control
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>
                    This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxSpellChecker</b> control. These features include:
                </p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress Spell Checker control is a built-in Office® style spelling error correction product created using DevExpress ASP.NET controls. It allows you to correct spelling mistakes sentence-by-sentence.
          </p>
        ]]>
      </Description>
      <SeeAlso Url="https://docs.devexpress.com/AspNet/4089/aspnet-webforms-controls/spell-checker/getting-started" Title="Getting Started" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/3686/aspnet-webforms-controls/spell-checker" Title="Documentation" />
      <KeyFeature Name="Multiple Dictionary Formats">
        <Description>
          <![CDATA[
             Supports Ispell, OpenOffice and Hunspell dictionary formats. Enables the user to add words to a custom dictionary.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Ready-to-Use Spelling Dialogs">
        <Description>
          <![CDATA[
             A Microsoft Office style error indication dialog, a spelling options editor and dictionary dialogs that allow end-users to add unrecognized words to a custom dictionary.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Spelling Options">
        <Description>
          <![CDATA[
             Spell checker options allow you to ignore emails, URLs, mixed case/upper-case words, repeated words and words with numbers within them.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="Features" Title="Features">
      <Demo Key="Standard_Editors" Title="Standard Editors" SeoTitle="Check Spelling in Standard Editors">
        <Description>
          <![CDATA[<p>
          This demo illustrates how to force the Spell Checker  to check the currently edited text in a standard TextBox control. To carry out the spell checking process, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpellChecker.ASPxSpellChecker">ASPxSpellChecker</helplink> provides several client-side methods: the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElement(element)">Check</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElementById(id)">CheckElementById</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElement(element)">CheckElement</helplink> methods. The first method is used to check the element whose ID is set for the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpellChecker.ASPxSpellChecker.CheckedElementID"></helplink>CheckedElementID property. In this demo, you can enter any text into the TextBox below the <b>Check Spelling</b> button.
        </p>]]>
        </Description>
      </Demo>
      <Demo Key="DevExpress_Editors" Title="DevExpress Editors" SeoTitle="Check Spelling in DevExpress Editors"
          HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/DevExpressEditors.png">
        <Description>
          <![CDATA[<p>
          This demo shows that the DevExpress ASP.NET Spell Checker (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpellChecker.ASPxSpellChecker">ASPxSpellChecker</helplink>) can also be used to check the text within the editors that ship with the Editors Library. You can use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElement(element)">Check</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElementById(id)">CheckElementById</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElement(element)">CheckElement</helplink> methods to check the spelling.
        </p>]]>
        </Description>
        <HighlightedDescription>
          Check text within the editors that ship with the ASPxGridView and Editors Library.
        </HighlightedDescription>
      </Demo>
      <Demo Key="Container" Title="Controls in Container" SeoTitle="Check Spelling in a Container"
          HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Container.png">
        <Description>
          <![CDATA[<p>
          This demo illustrates how to force the Spell Checker  component to check the text within multiple controls in a control container. For this, there are several client side methods: <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElementsInContainer(containerElement)">CheckElementsInContainer</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElementsInContainerById(containerId)">CheckElementsInContainerById</helplink>. Pass either the htmlElement or its Id to the corresponding method, and the Spell Checker  will check the content of each control within the container.
        </p>]]>
        </Description>
        <HighlightedDescription>
          Check text within the controls located in the control container.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ASPxGridView" Title="Content of a GridView EditForm" SeoTitle="Check Spelling in DevExpress ASP.NET Grid"
          HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/EditForm.png" HighlightedTitle="Grid View Integration">
        <Description>
          <![CDATA[<p>
        This demo illustrates how to use the Spell Checker component to check the text displayed in the DevExpress ASP.NET Grid View (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridView">ASPxGridView</helplink>) <helplink href="https://docs.devexpress.com/AspNet/3680/aspnet-webforms-controls/grid-view/visual-elements/edit-form">Edit Form</helplink>. For this, the <b>Check Spelling</b> link is added to the Edit Form. The Spell Checker's <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpellChecker.CheckElementsInContainer(containerElement)">CheckElementsInContainer</helplink> method is used to check the data in all Edit Form editors. To start spell checking, change the values in the Edit Form editors and then click the <b>Check Spelling</b> link.
        </p>]]>
        </Description>
        <HighlightedDescription>
          Use the ASPxSpellChecker to check the text displayed in the ASPxGridView editForm (shipped with the DevExpress ASPxGridView and Editors Library).
        </HighlightedDescription>
      </Demo>
      <Demo Key="CustomDictionary" Title="Custom Dictionary" SeoTitle="Use Custom Dictionary for Spelling Check"
          HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/CustomDictionary.png">
        <Description>
          <![CDATA[<p>
          This demo illustrates how the Spell Checker uses terms provided by the custom dictionary. The Spell Checker internally merges standard and custom dictionaries before starting the check, so words from both dictionary types are considered valid.
        </p>]]>
        </Description>
        <HighlightedDescription>
          Use a custom dictionary to recognize special words as being correct.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxTreeList" Url="ASPxTreeListDemos" Title="DevExpress ASPxTreeList" SeoTitle="ASP.NET AJAX Tree List" NavItemTitle="Tree List" OrderIndex="9" HighlightedTagNames="dx:ASPxTreeList">
    <Keywords>hierarchy, hierarchical, nodes</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxTreeList_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/TreeList.png</IntegrationImageUrl>
    <IntegrationDescription>
      A TreeView-Grid hybrid displaying information in either data bound or unbound mode with full data editing support.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX TreeView-Grid Hybrid Control">
      <BannerTitle>
        TreeView-Grid Hybrid Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Fully supports data-bound and unbound modes, on-demand child node loading, multiple built-in themes and ASP.NET Templates
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=lvp_uz81CgU</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxTreeList Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxTreeList Suite</b>. These features include:</p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview" SeoTitle="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides all the features you need for displaying information such as a Tree, a Grid, or a combination of both - in either bound or unbound mode with full data editing support.
          </p>
            ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/Products/NET/Controls/ASP/Tree_List/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="http://www.youtube.com/watch?v=lvp_uz81CgU#t=32" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/7928/aspnet-webforms-controls/tree-list" Title="Documentation" />
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <KeyFeature Name="Data Binding" DemoUrl="~/Data/Linear.aspx">
        <Description>
          <![CDATA[
             ASPxTreeList can be populated with data by binding to any standard data source. You can also bind the ASPxTreeList to any object that represents a tree structure, or manually create a tree in code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Virtual Mode" DemoUrl="~/Data/VirtualMode.aspx">
        <Description>
          <![CDATA[
             ASPxTreeList can operate in Virtual Mode, which improves performance when displaying large tree hierarchies. In this mode, child nodes are created and initialized on demand only when the parent node is expanded for the first time.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Node Selection" DemoUrl="~/Selection/Multiple.aspx">
        <Description>
          <![CDATA[
            Enable node selection for individual nodes or all nodes using check boxes. You can optionally enable recursive selection to allow end-users to change the selected state of child nodes using a single click on the parent node.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Sorting" DemoUrl="~/Shaping/Sorting.aspx">
        <Description>
          <![CDATA[
             ASPxTreeList makes it easy for end-users to sort against an unlimited number of columns. When necessary, you can disable runtime sort options and handle all sort operations in code.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Summaries" DemoUrl="~/Summary/BuiltIn.aspx">
        <Description>
          <![CDATA[
             ASPxTreeList allows you to calculate and display any number of summaries (total and group) for the entire tree, as well as individual nodes. You can calculate summaries using built-in aggregate functions or implement custom aggregate functions.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Data Export" DemoUrl="~/Export/Export.aspx">
        <Description>
          <![CDATA[
             ASPxTreeList content can be exported to many popular formats (in the same layout as it appears on-screen) including RTF, PDF, XLSX, XLS and CSV.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Appearance Customization and Styling" DemoUrl="~/Appearance/ConditionalFormatting.aspx">
        <Description>
          <![CDATA[
             In addition to a number of built-in themes, you can use style properties and CSS for appearance customization. Templates that are available for most control elements enable you to easily adjust and enhance a control layout.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="Data" Title="Data Binding">
      <Demo Key="Linear" Title="Build Tree from Plain Data">
        <Description>
          <![CDATA[<p>This demo shows how to bind the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) control to an MS Access database. Since the ASPxTreeList is designed to display information in a tree structure, its data source should meet certain requirements. Two additional fields are necessary to build a tree structure.</p>
                <p>The first field must contain unique values. This field must be assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.KeyFieldName">KeyFieldName</helplink> property. The second field must contain values that indicate parent nodes for the current node. It should be assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.ParentFieldName">ParentFieldName</helplink> property. Columns bound to these fields are called <b>Service</b> columns.</p>
                <p>In this demo, toggle the <b>Show service columns</b> check box to display or hide service columns.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Hierarchical" Title="Display Hierarchical Data">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) supports web hierarchical data sources such as XmlDataSource and SiteMapDataSource. All you have to do is assign the required data source to the ASPxTreeList's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.DataSource">DataSource</helplink> property, or specify its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDataWebControl.DataSourceID">DatasourceID</helplink> property.</p>
                <p>In this demo, the ASPxTreeList is bound to an XmlDataSource object. Use the expand and collapse buttons, or double click a node (the action is specified by the ExpandCollapseAction property), to expand and collapse the node.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Unbound" Title="Unbound Mode">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) supports unbound mode. In this mode, you need to manually create the tree in code. To create nodes, use the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.appendnode.overloads">AppendNode</helplink> method. All you have to do is specify a unique value that identifies the node, and a parent node value, if needed. 
               </p>]]>
        </Description>
      </Demo>
      <Demo Key="VirtualMode" Title="Virtual Mode" SeoTitle="Dynamic Data Loading" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/VirtualMode.png">
        <Description>
          <![CDATA[<p>In addition to bound and unbound modes, the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) can operate in Virtual Mode. This mode is useful when binding to large data sets.</p>
          <p>In virtual mode, a tree is created on demand. In this case, child nodes are created and initialized when the parent node is expanded.</p>
          <p>The ASPxTreeList fires the following two events, which you should process in code.</p>
          <ul>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.VirtualModeCreateChildren">VirtualModeCreateChildren</helplink>;</li>
          <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.VirtualModeNodeCreating">VirtualModeNodeCreating</helplink>.</li>
          </ul>
          <p>Within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.VirtualModeCreateChildren">VirtualModeCreateChildren</helplink> event handler, create a list of business objects that correspond to the child nodes owned by the processed node.
                </p><p>
                  The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.VirtualModeNodeCreating">VirtualModeNodeCreating</helplink> event is raised for each node object created within the
                  <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.VirtualModeCreateChildren">VirtualModeCreateChildren</helplink> event handler. This event enables you to initialize the corresponding node in a tree. Here, you should specify the node's key value and cell values. If you are certain that the processed node has no child nodes, set the event parameter's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListVirtualModeNodeCreatingEventArgs.IsLeaf">e.IsLeaf</helplink> property to <b>true</b>.
                </p><p>
                  In the demo, the ASPxTreeList control uses this data binding method to display the file/folder tree of this demo web site.
                </p>]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Tree List (ASPxTreeList) control combines the power of the grid view with the hierarchical structure of the tree view. Like the grid view, the ASPxTreeList supports binding to data, editing data, sorting, and more. This demo showcases the Virtual Mode feature of ASPxTreeList, in which child nodes are generated on demand when a parent node is expanded.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Appearance" Title="Appearance Customization">
      <Demo Key="AlternatingNode" Title="Alternating Node Style">
        <Description>
          <![CDATA[<p>To enhance the readability of the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>), you can highlight alternating (even) nodes with a different style. To do so, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListAlternatingNodeStyle.Enabled">Styles.AlternatingNode.Enabled</helplink> property to <b>true</b>. To override the default style and provide your own style setting, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListStyles.AlternatingNode">Styles.AlternatingNode</helplink> property.</p>]]>
        </Description>
      </Demo>
      <Demo Key="ConditionalFormatting" Title="Conditional Formatting" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/Formatting.png">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) enables you to provide custom style settings used to paint individual data cells or entire nodes, depending on the content of the ASPxTreeList. To do this, handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HtmlDataCellPrepared">HtmlDataCellPrepared</helplink> or <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HtmlRowPrepared">HtmlRowPrepared</helplink> events, respectively. This gives you the capability to flag data as needed.
                </p>
                <p>In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HtmlRowPrepared">HtmlRowPrepared</helplink> event is used to color green rows in which the <b>Location</b> field value is <b>Monterey</b>. In the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HtmlDataCellPrepared">HtmlDataCellPrepared</helplink> event handler, cells in the <b>Budget</b> column are yellow. The brightness of the color depends on the cell value. Values over one million are bold.
                </p>
        ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Tree List (ASPxTreeList) control allows you to highlight specific elements if certain conditions are met. In this demo, ASPxTreeList changes the appearance of individual data cells based on their content.</HighlightedDescription>
      </Demo>
      <Demo Key="GridLinesTreeLines" Title="Grid Lines and Tree Lines">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides multiple options that control the visibility of:</p>
                <ul>
                <li>border;</li>
                <li>tree lines;</li>
                <li>grid lines.</li>
                </ul>
                <p>In this demo, toggle the <b>Show tree lines</b> and <b>Show control's border</b> check boxes to show/hide the tree lines and border, respectively.</p>
                <p>The ASPxTreeList provides multiple gridline styles. It can render horizontal or vertical lines only, or both horizontal and vertical lines. This is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.GridLines">Settings.GridLines</helplink> property.</p>
                <p>In this demo, use the 'Grid lines' combo box to select the required gridline style.</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Customization" Title="Customization Tools">
      <Demo Key="Toolbar" Title="Toolbar" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/Toolbar.png">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access. 
</p>
<p>
The ASPxTreeList stores toolbars (which are <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbar">TreeListToolbar</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.Toolbars">Toolbars</helplink> collection. You can add or remove toolbars, change their availability and position (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Visible">Visible</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Enabled">Enabled</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridToolbar.Position">Position</helplink>), and populate them with toolbar items (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbarItem">TreeListToolbarItem</helplink> class instances) using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbar.Items">Items</helplink> property. Toolbar items can trigger standard grid commands (that is, data item editing, deletion, creation, etc.) and any custom actions, if required. 
</p>
<ul>
<li>
<b>Standard Toolbar Items</b><br/>
To make a toolbar item execute a standard command, set the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbarItem.Command">Command</helplink> property to the desired command name listed by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbarCommand">TreeListToolbarCommand</helplink> enumeration. A standard toolbar item automatically displays the command-related text and image (optional). Clicking a standard toolbar item executes the corresponding grid command.
</li>
<li>
<b>Custom Toolbar Items</b><br/>
If you need to perform a custom action, set a toolbar item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbarItem.Command">Command</helplink> property to the Custom value (the default setting), specify a custom command name through the item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.MenuItem.Name">Name</helplink> property and define item characteristics (such as text, image, etc.). Then handle the server <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.ToolbarItemClick">ToolbarItemClick</helplink> event or client <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.ToolbarItemClick">ToolbarItemClick</helplink> event (or both) to identify the triggered custom command by its name and execute the required action.
</li>
</ul>
<p> 
Note that toolbar items expose the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListToolbarItem.Items">Items</helplink> property allowing you to create hierarchies of nested toolbar items of unlimited depth.
</p>
                ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Tree List (ASPxTreeList) enables you to group the most important or frequently used grid commands, and expose them through customizable toolbars for efficient end-user access.</HighlightedDescription>
      </Demo>
      <Demo Key="ColumnChooser" Title="Column Chooser" SeoTitle="Column Chooser Window">
        <Description>
          <![CDATA[<p>In this demo, click the <b>Show Column Chooser</b> button to show/hide the Column Chooser window.</p>
          <p>The Column Chooser displays hidden column headers.</p>
          <ul>
          <li>To hide a column, drag its header to the Column Chooser.</li>
          <li>To make a column visible, drag its header from the Column Chooser back to the ASPxTreeList's column header panel.</li>
          </ul>
          <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SettingsCustomizationWindow">SettingsCustomizationWindow</helplink> property to specify the Column Chooser window's availability, caption, position, etc.</p>
                <p>The Column Chooser can be managed on the client side using the following client-side API provided by ASPxTreeList.</p>
                <ul>
                <li>the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.ShowCustomizationWindow">ShowCustomizationWindow</helplink> method</li>
                <li>the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.HideCustomizationWindow">HideCustomizationWindow</helplink> method</li>
                <li>the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.IsCustomizationWindowVisible">IsCustomizationWindowVisible</helplink> method</li>
                <li>the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.CustomizationWindowCloseUp">CustomizationWindowCloseUp</helplink> event</li>
                </ul>
                <p>For detailed information, please see the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>'s help documentation.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Shaping" Title="Data Shaping">
      <Demo Key="Sorting" Title="Sorting" SeoTitle="Data Sorting">
        <Description>
          <![CDATA[<p>Automatic column sorting for any data source allows you to sort against an unlimited number of columns, without writing a single line of code. A column's current sort order is indicated by a sort glyph displayed on the right edge of the column header. If the column is not sorted, the sort glyph is hidden.</p>
                <p>Click a column header to sort data against a data column, or change the column's sort order. To sort data against multiple columns, click a column header while holding down the <b>SHIFT</b> key. Clicking a sorted column header while holding down the CTRL key removes sorting for that column, but preserves the sort conditions of other columns.</p>
                <p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsBehavior.AllowSort">SettingsBehavior.AllowSort</helplink> option to <b>true</b> to enable end-user sorting.</p>
                <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink> also provides a client-side API that enables you to apply sorting on the client side. To do this, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.SortBy(columnIndex)">ASPxClientTreeList.SortBy</helplink> method.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Paging" Title="Data Paging" SeoTitle="Data Paging">
        <Description>
          <![CDATA[
                <p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) content can be split across multiple pages if the built-in pager is enabled by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsPager.Mode">SettingsPager.Mode</helplink> property to ShowPager.</p>
                <p>The embedded pager control can be customized using the following settings of the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SettingsPager">SettingsPager</helplink> property.</p>
                <ul>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsPager.Position">Position</helplink> property controls the pager's position within ASPxTreeList: at the top or bottom of the control, or at both the top and bottom of the control. In this demo, use the <b>Pager position</b> combo box to select the desired location.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerButtonProperties.Visible">PageSizeItemSettings.Visible</helplink> property controls the visibility of the page size item. In this demo, use the <b>Show PageSizeItem</b> check box to show and hide the item.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PageSizeItemSettings.Position">PageSizeItemSettings.Position</helplink> property controls where the page size item is displayed: on the left or right side of the pager. In this demo, use the <b>PageSizeItem position</b> combo box to select the desired location.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowDisabledButtons">ShowDisabledButtons</helplink> property controls the visibility of the pager buttons that are temporarily disabled.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowNumericButtons">ShowNumericButtons</helplink> property controls the visibility of the pager's numeric buttons, which navigate a user to the corresponding pages.</li>
                <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.PagerSettingsEx.ShowSeparators">ShowSeparators</helplink> property specifies whether or not separators that separate page numbers are displayed.</li>
                </ul>
                <p>The ASPxTreeList provides a client-side API that enables you to switch between pages on the client side. In this demo, click the <b>Prev</b> and <b>Next</b> buttons to move backward and forward, respectively.</p>

                ]]>
        </Description>
      </Demo>
      <Demo Key="Preview" Title="Node Preview" SeoTitle="Outlook Style Node Preview">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides a preview feature that allows each node to display a preview.</p>
        <p>Preview areas allow large memo fields or custom data to be displayed across all columns within the ASPxTreeList.</p>
        <p>To enable the Preview feature, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ShowPreview">Settings.ShowPreview</helplink> property to <b>true</b>.</p>
        <p>You can specify the required data source field via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.PreviewFieldName">PreviewFieldName</helplink> property, to bind node previews to data.</p>
        <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListStyles.Preview">Styles.Preview</helplink> property to access the style settings used to paint previews.</p>
        <p>To provide a template for rendering previews, use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListTemplates.Preview">Templates.Preview</helplink> property.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Templates" Title="Templates" SeoTitle="Templates">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides a set of templates that allow you to create custom layouts for its visual elements (column headers, data and footer cells, etc.).</p>
                <p>This demo shows how to use data cell templates to create a card view layout within nodes.</p>
                <p>The Eval function is used to define one-way (read-only) binding. The Eval method takes the name of a data field, and returns an object containing the value of that field from the current record in the data source.</p>
                <p>You can also use Template Containers to obtain cell values, display text, etc.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Scrolling" Title="Scrolling" SeoTitle="Scrolling" >
        <Description>
          <![CDATA[
            <p>
The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows you to use vertical and horizontal scrolling to represent more data within a smaller-sized control.
</p>
<p>
By default, the control height is determined by the number of rows displayed within a page, which is controlled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsPager.PageSize">SettingsPager.PageSize</helplink> property. To reduce the height of the ASPxTreeList, display the vertical scrollbar using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.VerticalScrollBarMode">Settings.VerticalScrollBarMode</helplink> property, and specify the height of the scrollable area (in pixels) via the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ScrollableHeight">Settings.ScrollableHeight</helplink> property.
</p> 
<p>
The width of an ASPxTreeList depends on the number of visible columns by default. If there are too many columns within the control, you can enable horizontal scrolling by setting the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.HorizontalScrollBarMode">Settings.HorizontalScrollBarMode</helplink> property and define the width of the desired scrollable area by using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxWebControl.Width">Width</helplink> property.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.VerticalScrollBarMode">VerticalScrollBarMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.HorizontalScrollBarMode">HorizontalScrollBarMode</helplink> properties possess the following values.
</p>
<ul>
<li>Hidden – the scrollbar is hidden.</li>
<li>Visible – the scrollbar is visible.</li>
<li>Auto – the scrollbar is automatically shown when the size of the control content exceeds the size of the control itself.</li>
</ul>
]]>
        </Description>
      </Demo>
      <Demo Key="ColumnResizing" Title="Resizing Columns" SeoTitle="Resizing Columns">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows end-users to resize columns by dragging the appropriate column header.
</p> 
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsResizing.ColumnResizeMode">SettingsResizing.ColumnResizeMode</helplink> property specifies how the ASPxTreeList behaves when an end-user resizes a column. The available options are listed below.
</p>
<ul><li>Control – When an end-user changes the width of a column, it changes the width of the control. The width of other columns do not change.
</li><li>NextColumn – When an end-user changes the width of a column, the width of the next column (to the right) changes. The width of the control does not change.
</li><li>Disabled – End-users are not allowed to resize columns.
</li></ul>
<p>Use the <b>Column resizing mode</b> combo box to see how different property values affect resizing behavior.</p>
<p>Tree List can automatically truncate cell values if they don't fit into cell width. To indicate that the text is clipped, the control displays an ellipsis ('...'). By default, this functionality is disabled, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsBehavior.AllowEllipsisInText">AllowEllipsisInText</helplink> property to true to enable it.</p>
<p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsResizing.Visualization">SettingsResizing.Visualization</helplink> property defines how the column resizing process is visually indicated. Two modes are available.</p>
<ul><li>In the <b>Live</b> mode, columns are redrawn dynamically during resizing. 
</li><li>In the <b>Postponed</b> mode, columns are redrawn only after the operation has been completed. 
</li></ul>
            ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Editing" Title="Data Editing">
      <Keywords>crud</Keywords>
      <Demo Key="Modes" Title="Edit Modes" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/Editing.png" HighlightedTitle="Data Editing">
        <Description>
          <![CDATA[<p>This demo describes the built-in edit modes of the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>).</p>
          <p>The following edit modes are available within the ASPxTreeList:</p>
          <ul><li>Inline - Cell values are edited inline, within the edit node.
					</li><li>EditForm - Cell values are edited within an Edit Form, and the node whose values are currently being edited is not displayed.
					</li><li>EditFormAndDisplayNode - Cell values are edited within an Edit Form, and the node whose values are currently being edited is displayed above the Edit Form.
					</li><li>PopupEditForm - Cell values are edited within a Popup Edit Form that can be dragged. By default, the Popup Edit Form is displayed near the node whose values are currently being edited. The position of the Popup Edit Form can be customized using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SettingsPopupEditForm">SettingsPopupEditForm</helplink> property.
					</li></ul><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsEditing.Mode">SettingsEditing.Mode</helplink> property specifies the current edit mode within the ASPxTreeList. In this demo, use the 'Edit Mode' combo box to select the edit mode you desire.
				</p><p>To allow end-users to manipulate data, add a Command column to the ASPxTreeList's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.Columns">Columns</helplink> and specify which commands can be used by end-users.</p>
        <p>The following server-side methods can be used to manipulate data in code:</p>
        <ul>
        <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.StartEdit(System.String)">StartEdit</helplink> – switches the ASPxTreeList to edit mode.</li>
        <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.UpdateEdit">UpdateEdit</helplink> – saves changes and switches the ASPxTreeList to browse mode.</li>
        <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.CancelEdit">CancelEdit</helplink> – discards changes and switches the ASPxTreeList to browse mode.</li>
        <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.StartEditNewNode(System.String)">StartEditNewNode</helplink> – switches the ASPxTreeList to edit mode, and allows you to specify a new node's values. When finished, click the <b>Update</b> button. This creates a new node with the specified values, and appends it to the required position.</li>
        <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.DeleteNode(System.String)">DeleteNode</helplink> – deletes a node.</li>
        </ul>]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Tree List (ASPxTreeList) allows your end-users to edit data without the developer having to create edit forms at design time. This demo illustrates the various edit modes available, including inline editing, editing via an edit form, and editing via a popup edit form.</HighlightedDescription>
      </Demo>
      <Demo Key="BatchEditing" Title="Batch Editing and Updating">
        <Description>
          <![CDATA[
                <p>
                The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) control allows you to edit and update multiple tree list nodes on the client side and send them to the server in a single request.
                </p>

<p>To enable the batch editing functionality, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsEditing.Mode">TreeListSettingsEditing.Mode</helplink> property to '<b>Batch</b>'. In this mode, tree list data contained in a page can be edited using in-line editors. The modified cells are colored in green. Deleted nodes are highlighted with gray and display the <b>Recover</b> command item. All changes are maintained on the client side until the <b>Update</b> command button is clicked, or all changes are canceled by clicking the <b>Cancel</b> command button.</p>

<p>If a tree list contains modified data, it displays a confirm message before a tree list callback or postback is performed.</p>

<p>You can customize the batch edit mode settings by using the following properties.</p>

  <ul>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListBatchEditSettings.EditMode">EditMode</helplink> property allows you to specify which control element (data cell or node) is used to edit data. </li>
    <li>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridBatchEditSettings.StartEditAction">StartEditAction</helplink> property specifies the action that will be used to begin editing tree list data. </li>  
  </ul>

<p>In this demo, use the <b>Edit mode</b> combo box to specify the control element used to edit data. The <b>Start edit action</b> combo box allows you to specify the action that should be used to begin editing tree list data.</p>

<p><b>Note:</b> When inserting a child node of a parent node that already exists in a data source, it uses the parent node's key field name. The newly inserted child node hasn't a key field until it is saved by clicking the Update button in <b>Batch</b> edit mode. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SetBatchEditInsertedNodeKeyValue(System.Object)">SetBatchEditInsertedNodeKeyValue</helplink> method to set the key value for a newly inserted node that is to be a parent for child nodes.</p>
      
      ]]>
        </Description>
      </Demo>
      <Demo Key="EditFormTemplate" Title="Edit Form Template" SeoTitle="Template for Edit Form">
        <Description>
          <![CDATA[<p>
					The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows you to provide a customized layout for its Edit Form using a template. In this demo, the ASPxPageControl is used to reduce the space occupied by the Edit Form.
				</p><p>
					Note that to display edit cells within a regular Edit Form, create an <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeListTemplateReplacement">ASPxTreeListTemplateReplacement</helplink> control, and set its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeListTemplateReplacement.ReplacementType">ReplacementType</helplink> to <b>Editors</b>.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="Validation" Title="Validation" SeoTitle="Data Input Validation">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows you to manually validate edited nodes and display errors for invalid fields.</p>
          <p>
					This demo illustrates how to include data validation in your next ASP.NET project. Validation is implemented within the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.NodeValidating">NodeValidating</helplink> event handler. Invalid values are indicated via error icons. Hovering the mouse over an icon displays a hint along with an error description.
				</p><p>
					The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HtmlRowPrepared">HtmlRowPrepared</helplink> event is handled to indicate nodes with invalid data. This event is raised for each node when the corresponding row within the table has been created. In this example, nodes with invalid data are painted in red.
				</p>]]>
        </Description>
      </Demo>
      <Demo Key="FileManager" Title="File Manager" SeoTitle="File and Folder Tree">
        <Description>
          <![CDATA[<p>In this demo, a simple file manager is implemented using the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>). You can create new folders, upload files to these folders, and rename and remove existing files and folders.</p>
        <p>This is a complex demo that covers multiple functional capabilities introduced by the ASPxTreeList. You’ll learn how to add and delete nodes, insert a node at a specified position, implement node dragging, and provide custom sorting rules.</p>]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Filtering" Title="Filtering">
      <Keywords></Keywords>
      <Demo Key="FilterRow" Title="Data Filter Row">
        <Description>
          <![CDATA[ 
<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides easy-to-use data filtering options. The filter row allows end-users to filter data by entering text within its cells.</p>
<p>In this example, you can filter against the values stored within the underlying dataset by entering the appropriate filter criteria in the cells displayed below individual column headers. </p>
<p>The <b>FilterRowMode</b> combo box allows you to choose between two filter modes:</p>
<ul>
<li><b>Auto</b> filter mode - the filter is applied on the fly when an end-user types text in a row.</li>
<li><b>OnClick</b> filter mode - an end-user applies the filter by clicking the Apply button, which is displayed in a command column.</li>
</ul>
<p>For total control over the values the filter row returns, an optional filter row menu displays a list of filter conditions for a given search operation. This demo includes a <b>Show Filter Row Menu</b> check box. Once enabled, you can view this menu and apply one of the nine filter conditions to refine your search results.</p>
<p>Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ShowFilterRow">Settings.ShowFilterRow</helplink> property to true to display the filter row within the ASPxTreeList.</p>
          
          
          ]]>
        </Description>
      </Demo>
      <Demo Key="SearchPanel" Title="Search Panel" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Search-Panel.png">
        <Description>
          <![CDATA[ 
<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows you to filter data and highlight search results using its integrated Search Panel. To enable the Search Panel, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Visible">SettingsSearchPanel.Visible</helplink> property to true. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SearchPanelFilter">SearchPanelFilter</helplink> property can access the Search Panel filter criteria that are applied to tree list data. You can customize Search Panel functionality using the following <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.SettingsSearchPanel">SettingsSearchPanel</helplink> property settings: </p>
<ul>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.AllowTextInputTimer">AllowTextInputTimer</helplink> - Specifies whether a search panel filter is applied automatically or manually.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSearchPanel.ColumnNames">ColumnNames</helplink> - Lists the names of columns to which the filter criteria will be applied.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.Delay">Delay</helplink> - Specifies the time interval between the search input and when filtering is applied.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.GroupOperator">GroupOperator</helplink> - Specifies the logical operator used to combine conditions (multiple words separated by spaces).</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.HighlightResults">HighlightResults</helplink> - Specifies whether to highlight text matching the filter condition within the tree list.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowApplyButton">ShowApplyButton</helplink> - Specifies whether to display the Apply button in the search panel.</li>
<li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridSearchPanelSettings.ShowClearButton">ShowClearButton</helplink> - Specifies whether to display the Clear button in the search panel.</li>
</ul>                
          ]]>
        </Description>
        <HighlightedDescription>The DevExpress ASP.NET Tree List (ASPxTreeList) allows end-users to filter data and highlight search results by typing filter criteria in the panel’s editor.</HighlightedDescription>
      </Demo>
      <Demo Key="HeaderFilter" Title="Header Filter" SeoTitle="Excel Style Data Filtering">
        <Description>
          <![CDATA[ 
<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows end-users to filter tree list data using the header filter that displays a drop-down list of all the unique values in a column. To enable the tree list header filter, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsBehavior.AllowHeaderFilter">AllowHeaderFilter</helplink> property to true. The column header's filter button activates the <b>Header Filter</b>, which allows end-users to filter the records stored in the underlying dataset by selecting the values displayed within the drop-down. </p>
<p>Filter drop-down buttons are disabled by default. To show filter buttons, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ShowHeaderFilterButton">Settings.ShowHeaderFilterButton</helplink> property to true.</p>
<p>You can specify the header filter mode for a column using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property.</p>
<ul>
<li>In <b>List</b> mode, the column's header filter drop-down displays a regular list of filter items, allowing end-users to select a single value.</li>
<li>In <b>CheckedList</b> mode, the column's header filter drop-down contains a checkbox list, allowing end-users to select multiple filter criteria values.</li>
<li><b>DateRangeCalendar</b> and <b>DateRangePicker</b> modes are available for date columns only.</li>
</ul>
<p>
The ASPxTreeList allows you to create custom filter values, define filter criteria and display these values within the column's filter dropdown. To do this, implement a method delegate specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.HeaderFilterFillItems">HeaderFilterFillItems</helplink> property. In this demo, custom filter values are displayed within the 'Budget' column's filter dropdown.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="DateRangeHeaderFilter" Title="Date Range Header Filter" >
        <Description>
          <![CDATA[ 
<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows end-users to filter dates.</p>
<p>A date column's drop-down header filter displays a date editor (date range picker or calendar) and a list of predefined date periods. End-users can filter the records stored in the underlying dataset by selecting the values displayed within the drop-down. The header filter is disabled by default - set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListDataColumn.AllowHeaderFilter">AllowHeaderFilter</helplink> property to true to enable it.</p>
<p>To specify which date editor the drop-down displays, set the column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.GridDataColumnHeaderFilterSettings.Mode">SettingsHeaderFilter.Mode</helplink> property to one of the following values:</p>
<ul>
<li><b>DateRangeCalendar</b> – Displays a calendar. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListColumnSettingsHeaderFilter.DateRangeCalendarSettings">DateRangeCalendarSettings</helplink> property to customize the calendar's settings.</li>
<li><b>DateRangePicker</b> – Displays a date range picker. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListColumnSettingsHeaderFilter.DateRangePickerSettings">DateRangePickerSettings</helplink> property to customize the editor's settings.</li>
</ul>
          
          ]]>
        </Description>
      </Demo>
      <Demo Key="FilterBuilder" Title="Filter Control" SeoTitle="Built-in Filter Builder">
        <Description>
          <![CDATA[ 
<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) Filter Control allows end-users to build complex filter criteria with an unlimited number of filter conditions and logical operators. You can activate the Filter Control by clicking the image or filter expression link contained in the Filter Bar at the bottom of the grid.</p>
<p>The Filter Bar displays the following elements:</p>
<ul>
<li><b>Filter Check Box</b> - Enables or temporarily disables the current filter.</li>
<li><b>Filter Image</b> - Click this image to invoke the Filter Builder.</li>
<li><b>Filter Expression Link</b> - A string representation of the currently applied filter criteria. A click on this link invokes the Filter Builder.</li>
<li><b>Clear Command</b> - Clears the current filter.</li>
</ul>

<p>The control's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGridFilterControlSettings.ViewMode">ViewMode</helplink> property specifies how to display a filter expression in the Filter Control: either in the visual representation only or the visual representation and text filter expression editor.</p>
          
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Export" Title="Exporting Data">
      <Demo Key="Export" Title="Exporting to Different Formats" SeoTitle="Exporting to PDF, XLS, XLSX, DOCX, CSV and RTF">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) allows you to easily export data to a file or stream in the following formats.</p>
        <ul>
        <li>PDF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exportpdftoresponse.overloads">ExportPdfToResponse</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exporttopdf.overloads">ExportToPdf</helplink>)</li>
        <li>XLS (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exportxlstoresponse.overloads">ExportXLSToResponse</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exporttoxlsx.overloads">ExportToXLS</helplink>)</li>
        <li>XLSX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exportxlsxtoresponse.overloads">ExportXLSXToResponse</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exporttoxlsx.overloads">ExportToXLSX</helplink>)</li>
        <li>RTF (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exportrtftoresponse.overloads">ExportRTFToResponse</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exporttortf.overloads">ExportToRTF</helplink>)</li>
        <li>DOCX (<helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exportdocxtoresponse.overloads">ExportDOCXToResponse</helplink>, <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxtreelist.aspxtreelist.exporttodocx.overloads">ExportToDOCX</helplink>)</li>
        </ul>
        <p>
        In this demo, use the following properties to specify the tree list's export settings:
        </p>
        <ul>
        <li><b>ShowTreeButtons</b> - Specifies whether the tree list buttons are displayed in an exported document.</li>
        <li><b>ExpandAllNodes</b> - Controls whether the tree list should be exported with all its nodes expanded regardless of their current expanded state.</li>
        <li><b>AutoWidth</b> - Automatically resizes the tree list to fit the printed page.</li>
        </ul>
    ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Selection" Title="Node Selection">
      <Demo Key="FocusedNode" Title="Focused Node" HighlightedTagNames="dx:ASPxRoundPanel">
        <Description>
          <![CDATA[<p>The Focused Node feature is disabled by default. To enable it, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsBehavior.AllowFocusedNode">SettingsBehavior.AllowFocusedNode</helplink> property to <b>true</b>.</p>
                <p>The appearance of the focused node can be specified using the style settings provided by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListStyles.FocusedNode">Styles.FocusedNode</helplink> property.</p>
                <p>This demo shows how to dynamically display the text of the focused node outside the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>.</p>
                <p>The client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.FocusedNodeChanged">FocusedNodeChanged</helplink> event is handled to query the server to return the text of the focused node. This value is returned by the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeListCustomDataCallbackEventArgs.result">Result</helplink> property within the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.CustomDataCallback">CustomDataCallback</helplink> event handler, and specifies the value for the corresponding HTML element.</p>
                <p><b>Server-Side API</b></p>
                <p>A focused node is identified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.FocusedNode">FocusedNode</helplink> property. To move node focus in code, use the node's 
                <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxWebControl.Focus">Focus</helplink> method. In this demo, this method is called when the page is being loaded to move focus to an unread message.</p>
                <p><b>Client-Side API</b></p>
                <p>End-users move node focus by clicking a desired node. To respond to node focus changes, handle the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.FocusedNodeChanged">FocusedNodeChanged</helplink> event.</p>
                <p>To identify the node that is currently focused, use the client-side <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.GetFocusedNodeKey">GetFocusedNodeKey</helplink> method. To move node focus, use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientTreeList.SetFocusedNodeKey(key)">SetFocusedNodeKey</helplink> method.</p>
                ]]>
        </Description>
      </Demo>
      <Demo Key="Multiple" Title="Multiple Node Selection" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Selection.png">
        <Description>
          <![CDATA[<p>To allow end-users to select nodes, enable the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSelection.Enabled">SettingsSelection.Enabled</helplink> option. Nodes will display selection cells that contain check boxes. End-users can check or uncheck these check boxes to select or deselect the corresponding nodes. </p>
          <p>To enable end-users to select all nodes displayed within the DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>), set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSelection.AllowSelectAll">SettingsSelection.AllowSelectAll</helplink> property to <b>true</b>. This displays a check box within the column header panel used to select/deselect all nodes. In this demo, to show/hide this check box, select the <b>Show Select All</b> check box option.</p>
                <p>The ASPxTreeList supports recursive node selection, which is enabled by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSelection.Recursive">SettingsSelection.Recursive</helplink> option. When recursive selection is enabled, the following apply.</p>
                <ul><li>a parent node is automatically selected if all of its child nodes are selected. Deselecting a child node automatically unselects its parent node(s).</li>
                        <li>selecting a parent node automatically selects all of its children.</li>
                        <li>a node that has selected and unselected child nodes is displayed with a grayed check box.</li></ul>
                        <p>In this demo, use the 'Recursive' check box to enable/disable recursive selection. The number of selected nodes is displayed below the ASPxTreeList.</p>]]>
        </Description>
        <HighlightedDescription>The Multiple Node Selection feature displays check boxes that allow end-users to select multiple nodes in the DevExpress ASP.NET Tree List (ASPxTreeList). This demo illustrates how you can allow a user to select all nodes, child nodes only, parent nodes only, or nodes above a particular level in the hierarchy.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Summary" Title="Data Summary">
      <Demo Key="BuiltIn" Title="Built-in Functions" SeoTitle="Automatic Summary Calculation">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) enables you to calculate summary values for all values within a column or a group of nodes, and display the results within footer cells. The ASPxTreeList provides five built-in aggregate functions (average, count, max, min and sum).</p>
          <p>Summaries can be displayed within Footer or Group Footer cells. The ASPxTreeList allows multiple summaries to be displayed within individual footer or group footer cells.</p>
                <p>For example, in this demo, two summaries are displayed within the footer cells of the Budget column. The first summary displays the highest amount of the Budget value for a particular group. The second summary displays the sum of all Budget values within a particular group.</p>
                <p>The Footer is displayed if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ShowFooter">Settings.ShowFooter</helplink> property is set to <b>true</b>. Group Footers are displayed if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettings.ShowGroupFooter">Settings.ShowGroupFooter </helplink> option is enabled.</p>
                <p>The ASPxTreeList stores its summary items in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.Summary">Summary</helplink> collection.</p>]]>
        </Description>
      </Demo>
      <Demo Key="Custom" Title="Manual Summary Calculation" SeoTitle="Manual Summary Calculation" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/ManualSummaryCalculations.png">
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) enables you to manually implement custom aggregate functions or calculate summary values using a custom algorithm. Custom summaries allow you to do the following.</p>
                <ul>
                <li>Calculate summaries against nodes that meet specific criteria</li>
                <li>Involve multiple data fields in calculations</li>
                <li>Implement complex summary functions</li>
                </ul>
                <p>To calculate summaries manually, set the summary item's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSummaryItem.SummaryType">SummaryType</helplink> property to Custom, and handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.CustomSummaryCalculate">CustomSummaryCalculate</helplink> event.</p>
                <p>In this demo, the summary for the budget of selected departments is calculated.</p>]]>
        </Description>
        <HighlightedDescription>Easily create custom summaries in the DevExpress ASP.NET Tree List (ASPxTreeList). The CustomSummaryCaluculate event enables you to manually calculate summary values using a custom algorithm. This demo illustrates how to calculate the sum of the values of selected nodes in a tree.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="Accessibility" Title="Accessibility">
      <Demo Key="KeyboardSupport" Title="Keyboard Support" SeoTitle="Keyboard Navigation">
        <Keywords>wcga, 508, section</Keywords>
        <Description>
          <![CDATA[<p>The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) includes keyboard support. Primary navigation operations (such as accessing the control within a form, moving focus through nodes, selecting and expanding/collapsing nodes, and paging) can be performed using a keyboard instead of a pointing device. In addition, enabling keyboard support in ASPxTreeList allows you to create web pages that conform to web accessibility guidelines.</p>
          <p>To enable keyboard navigation, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.KeyboardSupport">KeyboardSupport</helplink> property of the ASPxTreeList to <b>true</b>. This activates the following features:</p>
          <ul>
          <li><b>Access Key</b> – The ASPxTreeList control can easily be accessed (focused) using a user-defined keyboard shortcut. This shortcut is composed of the preset CTRL+SHIFT combination and a single character string specified by the <b>AccessKey</b> property. For example, setting the access key of a TreeList control to the "D" string indicates that an end-user can navigate to the grid by pressing CTRL+SHIFT+D.
                    </li><li><b>Focused Node</b> – The Focused Node feature is automatically activated, regardless of the property setting (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsBehavior.AllowFocusedNode">SettingsBehavior.AllowFocusedNode</helplink>)of the corresponding feature. Focus can be moved between nodes by using the UP ARROW and DOWN ARROW keys. The LEFT ARROW and RIGHT ARROW keys can also be used to move node focus, but these keys initially try to collapse or expand a node, and only move focus when it is not possible to collapse or expand the node.
                    </li><li><b>Node Selection</b> – The SPACE key can be used to mark the focused node as selected or unselected. This works if selection can be applied to a node (i.e., if the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSelection.Enabled">SettingsSelection.Enabled</helplink> property is enabled). If the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.TreeListSettingsSelection.Recursive">SettingsSelection.Recursive</helplink> property is disabled, multiple nodes can be selected by moving row focus with the ARROW keys (UP/DOWN or LEFT/RIGHT) while holding down the SHIFT key.
                    </li><li><b>Expanding/Collapsing Nodes</b> – The PLUS and MINUS keys can be used respectively to expand and collapse nodes. In addition, nodes can be collapsed and expanded using the LEFT ARROW and RIGHT ARROW keys.
                    </li></ul>]]>
        </Description>
      </Demo>
      <Demo Key="RightToLeft" Title="Right to Left">
        <Keywords>rtl, Accessibility, arabic, Hebrew, Samaritan, Thaana, Syriac, Phoenician</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Tree List (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) provides support for right-to-left languages such as Arabic and Hebrew, allowing you to create international web pages with right-to-left text, as well as the mirroring of UI elements.
</p>

<p>
Switch the ASPxTreeList to a right-to-left display by enabling a single property – <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.RightToLeft">RightToLeft</helplink>. When this property is set to true, the text flows from right-to-left, and the layout of most UI elements is reversed.
</p>

<p>
If you need to apply right-to-left representation to all DevExpress web controls within your web application, you can enable a special configuration option in the <b>web.config</b> file instead of switching the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.RightToLeft">RightToLeft</helplink> property of each control: the <helplink href="https://docs.devexpress.com/AspNet/8843/common-concepts/webconfig-modifications/webconfig-options/right-to-left-support">rightToLeft</helplink> option. This option can be accessed within the settings group of the <helplink href="https://docs.devexpress.com/AspNet/8007/common-concepts/webconfig-modifications/webconfig-options/webconfig-options-overview">devExpress</helplink> section in the <b>web.config</b> file.
</p>                
                ]]>
        </Description>
      </Demo>
      <Demo Key="Compliance" Title="Section 508/WCAG Compliance" SeoTitle="Section 508, WCAG 2 Compliance" HighlightedTagNames="dx:SkipRepetitiveNavigationLinksControl">
        <Keywords>wcag, 508, section, accessibility, wai, aria, nvda, jaws, landmarks</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Tree List control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList">ASPxTreeList</helplink>) is designed to comply with <helplink href="https://www.section508.gov/manage/laws-and-policies">Section 508 Standards</helplink> and W3C's latest accessibility recommendations such as <helplink href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</helplink> (2.0) and <helplink href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</helplink> (1.0). As most of DevExpress ASP.NET controls, ASPxTreeList implements the <helplink href="https://docs.devexpress.com/AspNet/116705/common-concepts/accessibility-support/controls-and-extensions-exposing-the-accessibilitycompliant-property">AccessibilityCompliant</helplink> property, which allows more accessible markup to be generated for the control.
</p>
<p>
This demo illustrates how to make the ASPxTreeList control more accessible for end-users by enabling the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.AccessibilityCompliant">AccessibilityCompliant</helplink> property and defining a caption through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxTreeList.ASPxTreeList.Caption">Caption</helplink> property.
</p> 
<p>
Check ASPxTreeList's accessibility level in this demo by clicking the <strong>Validate with WAVE</strong> link and running <helplink href="https://www.w3.org/WAI/ER/tools/#wave">WAVE</helplink> (a web accessibility evaluation tool). Note that ASPxTreeList can look and operate correctly when the <helplink href="https://support.microsoft.com/en-us/help/13862/windows-10-use-high-contrast-mode">High Contrast</helplink> mode is enabled in Windows OS.
</p>
<p>
To learn more on accessibility support in DevExpress ASP.NET controls, please view the <helplink href="https://www.devexpress.com/products/net/controls/asp/accessibility.xml">Section 508 and Accessibility</helplink> and <helplink href="https://docs.devexpress.com/AspNet/5294/common-concepts/accessibility-support">Accessibility Support</helplink> topics.
</p>
                ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/116777/common-concepts/accessibility-support/accessibility-best-practices" Title="Accessibility Techniques Used in DevExpress Demos" />
        <SourceFile>~/UserControls/SkipRepetitiveNavigationLinksControl.ascx</SourceFile>
      </Demo>
    </DemoGroup>
  </DemoProduct>

  <DemoProduct Key="ASPxGantt" Url="ASPxGanttDemos" Title="DevExpress ASPxGantt" SeoTitle="ASP.NET AJAX Gantt" NavItemTitle="Gantt" OrderIndex="2" IntegrationHighlighted="true" HighlightedTagNames="dx:ASPxGantt" IsNew="true" >
    <Keywords>gantt, project, projectschedule, tasks, planning</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxGantt_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Gantt.png</IntegrationImageUrl>
    <IntegrationDescription>
      A project management tool that allows you to organize a workflow and schedule resources. You can edit and scale tasks, track a project's progress, and important deadlines.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Gantt Control">
      <BannerTitle>
        Gantt Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        The DevExpress ASP.NET Gantt (ASPxGantt) is a project management tool that enables you to organize and manage tasks. It uses the Microsoft Project-style UI to edit and scale tasks, track a project's progress, and important deadlines.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=bau3LggD-rU</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxGantt Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxGantt Suite</b>. These features include:</p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview" SeoTitle="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET Gantt (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt">ASPxGantt</helplink>) is a project management tool that enables you to organize and manage tasks. It uses the Microsoft Project-style UI to edit and scale tasks, track a project's progress, and important deadlines.
          </p>
            ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/Products/NET/Controls/ASP/Tree_List/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="http://www.youtube.com/watch?v=lvp_uz81CgU#t=32" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/7928/aspnet-webforms-controls/tree-list" Title="Documentation" />
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <KeyFeature Name="Gantt chart settings" DemoUrl="~/Features/Appearance.aspx">
        <Description>
          <![CDATA[
             Gantt chart view customiztion (TODO)
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Work time settings" DemoUrl="~/Features/WorkTime.aspx">
        <Description>
          <![CDATA[
             Gantt chart work time highlighting capabilities (TODO)
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="Data" Title="Data">
      <Demo Key="DataBinding" Title="Data Binding and Editing" SeoTitle="Gantt Chart - Data Binding and Editing">
        <Keywords>task dependency, task diagram, task relationships, gantt control, gantt chart, business diagram</Keywords>
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Gantt (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt">ASPxGantt</helplink>) allows you to modify tasks and their dependencies, and assign or re-assign tasks' resources. Use the control's settings (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttEditingSettings">GanttEditingSettings</helplink>) to enable users to perform add, delete, and update functions.</p>
          <p> Users can edit cell values in the Task List or use the chart's context menu, dialog or another chart UI to manage tasks and their properties. The component saves changes on the server and updates the chart. </p>
          <p>The Gantt stores a user's changes and supports the 'undo' and 'redo' shortcuts (Ctrl+Z and Ctrl+Y).</p>
          <p><b>Data Binding</b></p>
          <p>The ASPxGantt cotrol can operate only in bound mode. It supports standard data source types, including SqlDataSource, ObjectDataSource, XmlDataSource, AccessDataSource, and SiteMapDataSource.</p>
          <p>The control requires separate data sources for tasks (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.TasksDataSourceID">TasksDataSourceID</helplink>), resources (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.ResourcesDataSourceID">ResourcesDataSourceID</helplink>), resource assignments (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.ResourceAssignmentsDataSourceID">ResourceAssignmentsDataSourceID</helplink>), and dependencies (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.DependenciesDataSourceID">DependenciesDataSourceID</helplink>). Mappings (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.Mappings">ASPxGantt.Mappings</helplink>) specify which field in the data source corresponds to an object's property (task, dependency, resource).</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Validation" Title="Validation" SeoTitle="Gantt Chart - Validation" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Validation.png">
        <Keywords>gantt validation, task dependency, task diagram, task relationships, gantt control, gantt chart</Keywords>
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Gantt control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt">ASPxGantt</helplink>) allows you to validate relationships between tasks and handle errors. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttValidationSettings.EnableDependencyValidation">EnableDependencyValidation</helplink> property to <b>true</b> to enable task validation.</p>  
            <p>The Gantt control supports the following dependency validation rules:</p>
            <ul>    
                <li>Finish to Start (FS) - A successor task's start point should equal the preceding task's end point.</li>
                <li>Start to Start (SS) - Successor and predecessor tasks should begin at the same time.</li>
                <li>Finish to Finish (FF) - Successor and predecessor tasks should end at the same time.</li>
                <li>Start to Finish (SF) - A successor task's end point should equal a preceding task's start point.</li>
            </ul>             
            
            <p>The Gantt control also has the <helplink href="http://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttValidationSettings.AutoUpdateParentTasks">AutoUpdateParentTasks</helplink> property that enables validation for parent&child relationships:</p>
            <ul>    
                <li>A parent task's duration equals a summary duration of its child tasks.</li>
                <li>A parent task and its first child starts at the same time.</li>
                <li>A parent task and its last child ends at the same time.</li>
                <li>A parent task's progress is a summary progress of its child tasks.</li>
            </ul> 
            <p>The control processes changes in task values before they are saved to a database. The control displays a popup window with a list of available actions if an error can be handled in several ways.</p>
            
            ]]>
        </Description>
        <HighlightedDescription>
          Dependency and parent-child relationship validation rules allow you to check changes to tasks before they are saved to a database.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="UICustomization" Title="UI Customization">
      <Demo Key="ChartAppearance" Title="Chart Appearance" SeoTitle="Gantt Chart Appearance Customization">
        <Keywords>task dependency, task diagram, task relationships, gantt control, gantt chart, business diagram</Keywords>
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Gantt control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt">ASPxGantt</helplink>) displays the task flow and dependencies between tasks.</p>
            <p>Bind the Gantt control to data sources to get data for tasks, dependencies, and resources. Refer to the <helplink href="https://docs.devexpress.com/AspNet/400720/aspnet-webforms-controls/gantt">Getting Started</helplink> topic that explains how to bind the ASPxGantt control to an SQL database.</p>
            <p>This demo illustrates the Gantt control’s main settings:</p>
            <ul>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttViewSettings.ViewType">ViewType</helplink> - Specifies views to display tasks: hours, days, weeks, months.</li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttViewSettings.TaskTitlePosition">TaskTitlePosition</helplink> - Specifies where to display a task’s title – none, inside or outside the task.</li>          
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttViewSettings.ShowResources">ShowResources</helplink> - Allows you to specify resources for tasks.</li>
            </ul>
            <p>Use the options in the demo to see how they affect the Gantt's behavior and appearance.</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="Toolbar" Title="Toolbar" SeoTitle="Gantt Chart - Toolbar Customization" >
        <Keywords>toolbar, menu</Keywords>
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Gantt control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt">ASPxGantt</helplink>) allows you to display the most frequently used commands in the toolbar. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttToolbarSettings.Visible">Visible</helplink> property to show or hide the toolbar.</p>
            <p>The toolbar can display predefined items and supports custom items. These items are stored in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttToolbarSettings.Items">GanttToolbarSettings.Items</helplink> collection. The following standard toolbar items are available:</p>
            <ul>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttAddTaskToolbarItem">GanttAddTaskToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttRemoveTaskToolbarItem">GanttRemoveTaskToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttCollapseAllToolbarItem">GanttCollapseAllToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttExpandAllToolbarItem">GanttExpandAllToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttFullScreenToolbarItem">GanttFullScreenToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttUndoToolbarItem">GanttUndoToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttRedoToolbarItem">GanttRedoToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttZoomInToolbarItem">GanttZoomInToolbarItem</helplink></li>
            <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttZoomOutToolbarItem">GanttZoomOutToolbarItem</helplink></li>
            </ul>
            <p>Create a <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttCustomToolbarItem">GanttCustomToolbarItem</helplink> class instance, specify its text and command to add a custom toolbar item with the required functionality.</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="Columns" Title="Columns" SeoTitle="Gantt Chart - Custom Columns" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Columns.png">
        <Keywords>custom columns, custom fields, time marker, gantt chart, gantt columns</Keywords>
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Gantt control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt">ASPxGantt</helplink>) allows you to create the following column types (and editors in edit mode) to display different data types in the Task List:</p>
            <ul>    
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttDataColumn">GanttDataColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttCommandColumn">GanttCommandColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttCheckColumn">GanttCheckColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttColorEditColumn">GanttColorEditColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttDateTimeColumn">GanttDateTimeColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttProgressBarColumn">GanttProgressBarColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttSpinEditColumn">GanttSpinEditColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttTextColumn">GanttTextColumn</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttTimeEditColumn">GanttTimeEditColumn</helplink></li>
            </ul>                
            <p>The control stores columns in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttTaskListSettings.Columns">GanttTaskListSettings.Columns</helplink> collection. A column's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttDataColumn.FieldName">FieldName</helplink> property specifies the name of a field that provides data for the column. Use the column's <b>Properties[Editor_Name]</b> property to access column editor settings.</p>
          ]]>
        </Description>
        <HighlightedDescription>
          Columns in the Task List can display different data types, such as string, date, logical, etc.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="TimeHighlighting" Title="Time Highlighting">
      <Demo Key="StripLines" Title="Strip Lines" SeoTitle="Gantt Chart - Strip Lines" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/StripLines.png">
        <Keywords>current time, strip lines, time marker, vertical lines, constant lines, time interval</Keywords>
        <Description>
          <![CDATA[
            <p>This demo illustrates how to use strip lines to highlight different times in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt">ASPxGantt</helplink> control. The ASPxGantt stores strip lines (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.StripLine">StripLine</helplink> class instances) in its <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttStripLineSettings.StripLines">StripLines</helplink> collection. You can specify a title (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.StripLine.Title">Title</helplink>) and appearance settings (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.StripLine.CssClass">CssClass</helplink>) for each StripLine object. </p>
            <p>Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.StripLine.Start">Start</helplink> property to specify an individual strip line or combine it with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.StripLine.End">End</helplink> property setting to specify a time interval.</p>
            <p>To highlight the current time, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttStripLineSettings.ShowCurrentTime">ShowCurrentTime</helplink> property to true in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttStripLineSettings">GanttStripLineSettings</helplink> object. Use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.GanttStripLineSettings.CurrentTimeUpdateInterval">CurrentTimeUpdateInterval</helplink> property to specify the time interval between the current time updates.</p>
            ]]>
        </Description>
        <HighlightedDescription>
          Strip lines allow you to highlight different times in the Gantt control: the current time, specific times, or time intervals.
        </HighlightedDescription>
      </Demo>
      <Demo Key="WorkTimeSchedule" Title="Work Time Schedule" SeoTitle="Gantt Chart - Work Time Schedule" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/WorkTimeSchedule.png">
        <Keywords>task dependency, task diagram, task relationships, gantt control, gantt chart, business diagram</Keywords>
        <Description>
          <![CDATA[
            <p>The DevExpress ASP.NET Gantt control allows you to configure work and non-work time intervals.</p>
            <p>The work time settings are stored in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.ASPxGantt.WorkTimeRules">WorkTimeRules</helplink> collection. The following rules are available:</p>
            <ul>    
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.DailyRule">DailyRule</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.WeeklyRule">WeeklyRule</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.MonthlyRule">MonthlyRule</helplink></li>
                <li><helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.YearlyRule">YearlyRule</helplink></li> 
            </ul>     
            <p>Each rule can contain work time ranges and recurrence settings.</p>
            <p>The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.RuleBase.WorkTimeRanges">WorkTimeRanges</helplink> property provide access to a collection of <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxGantt.WorkTimeRange">WorkTimeRange</helplink> objects that specify work time intervals (for example, 9.00-13.30 and 14.30-18.00).</p> 
            <p>The <b>Recurrence</b> property allows you to configure a rule’s reoccurrence settings (for example, occurrences count and periodicity).</p> 
            <p>Note that the ASPxGantt control highlights working hours in timescale only when the "Hours" scale is visible.</p>
            ]]>
        </Description>
        <HighlightedDescription>
          The Gantt control allows you to schedule work days, work hours, and holidays.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
  </DemoProduct>
  
  <DemoProduct Key="ASPxDiagram" Url="ASPxDiagramDemos" Title="DevExpress ASPxDiagram" SeoTitle="ASP.NET AJAX Diagram" NavItemTitle="Diagram" OrderIndex="1" IntegrationHighlighted="true" HighlightedTagNames="dx:ASPxDiagram" IsNew="true">
    <Keywords>diagram, flow, workflow, orgchart, graph</Keywords>

    <DownloadUrl>
      http://go.devexpress.com/DevExpressDownload_UniversalTrial.aspx
    </DownloadUrl>

    <BuyUrl>
      http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <DocUrl>
      http://go.devexpress.com/DevExpress_AspDemos_ASPxDiagram_Doc.aspx
    </DocUrl>

    <IntegrationImageUrl>~/Content/Diagram.png</IntegrationImageUrl>
    <IntegrationDescription>
     Visual interface that allows you to design new diagrams and modify existing ones.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Diagram Control">
      <BannerTitle>
        Diagram Control for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Visual interface that allows you to design new diagrams and modify existing ones.
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>https://www.youtube.com/watch?v=TQt11JGiv7w</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxDiagram Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
                <p>This website demonstrates some of the many features and capabilities available to you when using our <b>ASPxDiagram Suite</b>. These features include:</p>
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview" SeoTitle="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control provides a visual interface that allows you to design new diagrams and modify existing ones. You can import a diagram data file or bind the control to a data source. The Diagram provides more than 40 resizable shapes and allows you to extend this collection with custom shapes. Shapes and connectors are highly customizable.
          </p>
            ]]>
      </Description>
      <SeeAlso Url="https://www.devexpress.com/Products/NET/Controls/ASP/Diagram/" Title="Overview on the devexpress.com" />
      <SeeAlso Url="http://www.youtube.com/watch?v=lvp_uz81CgU#t=32" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/7928/aspnet-webforms-controls/tree-list" Title="Documentation" />
      <SeeAlso Url="https://www.devexpress.com/support/demos/#aspnet" Title="Getting Started" />
      <KeyFeature Name="Data Binding" DemoUrl="~/DataBinding/NodesAndEdges.aspx">
        <Description>
          <![CDATA[
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Containers" DemoUrl="~/DocumentFeatures/Containers.aspx">
        <Description>
          <![CDATA[
             TODO
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="DataBinding" Title="Data Binding">
      <Demo Key="NodesAndEdges" Title="Node and Edge Data Sources" SeoTitle="Diagram Graph Binding" HighlightedImageUrl="~/Content/DemoIcons/nodes-and-edges.png">
        <Keywords>diagram, nodes, edges, connectors, shapes, graph</Keywords>
        <Description>
          <![CDATA[
             <p>
              The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control can load a tree or a graph structure from two data sources: one for shapes (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.NodeDataSourceID">NodeDataSourceID</helplink>) and another for shape connectors (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.EdgeDataSourceID">EdgeDataSourceID</helplink>). You should add mapping information for a shape's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramMappingInfo.Key">Key</helplink> and a connector's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramMappingInfo.Key">Key</helplink>, <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramEdgeMappingInfo.FromKey">FromKey</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramEdgeMappingInfo.ToKey">ToKey</helplink> properties. Optionally, you can specify other <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramNodeMappingInfo._properties">mapping properties for shapes</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramEdgeMappingInfo._properties">mapping properties for connectors</helplink>.
            </p><p>
              The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.SettingsAutoLayout">SettingsAutoLayout</helplink> property allows you to specify an auto-layout algorithm and orientation that the control uses to build a diagram.
             </p><p> 
            In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.NodeInserted">NodeInserted</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.EdgeInserted">EdgeInserted</helplink> events are handled to provide items with key values (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramItemInsertedEventArgs.KeyValue">KeyValue</helplink>). 
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Diagram control can build a diagram based on node and edge data sources.
        </HighlightedDescription>       
      </Demo>
      <Demo Key="Linear" Title="Tree from Linear Data Structure" SeoTitle="Diagram to Tree" HighlightedImageUrl="~/Content/DemoIcons/linear.png">
        <Keywords>tree, orgchart</Keywords>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control can transform a linear data structure to a tree-like diagram.
          </p><p>
            The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.NodeDataSourceID">NodeDataSourceID</helplink> property specifies which data source the control is bound to. To transform a linear data structure to hierarchical, the data source should contain two additional fields:
          </p><ul>
            <li>The first field - assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramMappingInfo.Key">Key</helplink> property and contains unique values.</li>
            <li>The second field - assigned to the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramNodeMappingInfo.ParentKey">ParentKey</helplink> property and contains values that indicate the current node's parent nodes.</li>
          </ul><p>
            You can bind other node settings to the data source. Assign field values to the corresponding settings in the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramNodeMappingInfo._properties">Mappings.Node</helplink> property.
          </p><p>
            In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.NodeInserted">NodeInserted</helplink> event is handled to provide nodes with key values (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramItemInsertedEventArgs.KeyValue">KeyValue</helplink>). 
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Diagram control can build a tree structure from a linear data structure.
        </HighlightedDescription>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="FeaturedShapes" Title="Featured Shapes">
      <Demo Key="Containers" Title="Containers" SeoTitle="Container Shapes" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/containers.png">
        <Keywords>containers, shapes, hierarchy</Keywords>
        <Description>
          <![CDATA[
          <p>This demo shows two shape types: horizontal and vertical containers. They allow you to combine other shapes within a container. The Diagram control supports stacked containers that ship with the expand and collapse functionalites.</p>
          ]]>
        </Description>
        <HighlightedDescription>
          With horizontal and vertical shape containers, you can combine other shapes within the container.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="Images" Title="OrgChart Shapes" SeoTitle="OrgChart Shapes" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/orgchart.png">
        <Keywords>images, shapes, orgchart</Keywords>
        <Description>
          <![CDATA[
          <p>The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control provides shapes with images that are specially designed for use in OrgCharts. You can select a shape with the following image positions: on the left, right, or top of the shape.
          </p>
          <p>In this demo, the control is bound to a data source. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramNodeMappingInfo.ImageUrl">ImageUrl</helplink> property specifies the name of a field that provides a path to images.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          The ASPxDiagram control provides shapes with images that are specially designed for use in OrgCharts.
        </HighlightedDescription>  
      </Demo>
    </DemoGroup>
    <DemoGroup Key="CustomShapes" Title="Custom Shapes">
      <Demo Key="BackgroundImages" Title="Background Images" SeoTitle="Diagram Custom Shapes" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/custom-shapes.png">
        <Keywords>custom, shapes, draw</Keywords>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control provides a collection of built-in shapes. This demo shows how you can extend this collection with custom shapes.
          </p><p>
            A collection of custom shape objects is accessible through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.CustomShapes">CustomShapes</helplink> property. For each custom shape object, you can specify the type, background image, default size, text, connection points, and other settings. Note that shape images should be supplied as SVG files.
          </p><p>
            The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.SettingsToolbox">SettingsToolbox</helplink> property allows you to add a custom shape category to a data toolbox.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          The Diagram control allows you to extend a collection of built-in shapes with custom shapes.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="ShapesWithBaseType" Title="Shapes with Base Type" SeoTitle="Diagram Custom Text Shapes" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/base-type.png">
        <Keywords>custom, shapes, draw, text</Keywords>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control allows you to create custom shapes based on predefined shapes. 
          </p>
          <p>
            In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.CustomShapes">CustomShapes</helplink> collection is populated with rectangle shapes (the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramCustomShape.BaseType">BaseType</helplink> property is set to <b>Rectangle</b>) that contain different texts (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramCustomShape.DefaultText">DefaultText</helplink>). The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramCustomShape.Type">Type</helplink> property identifies custom shapes, therefore it must be specified and unique.
          </p>
          <p>
            The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.SettingsToolbox">SettingsToolbox</helplink> property allows you to add the custom shape category to the toolbox. The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.DiagramToolboxSettings.ViewMode">DisplayMode</helplink> property is set to <b>Texts</b> to display shape texts instead of icons in the toolbox.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
         The ASPxDiagram control allows you to create custom shapes based on predefined shapes. 
        </HighlightedDescription>  
      </Demo>
      <Demo Key="Templates" Title="Templates" SeoTitle="Templates" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/templates.png">
        <Keywords>custom, shapes, draw, text, templates</Keywords>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control supports the template technology that allows you to completely customize a custom shape's appearance and layout.
          </p><p>
            Handle the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagram.CustomShapeCreateTemplate">CustomShapeCreateTemplate</helplink> event to specify a template for custom shapes. The event argument’s <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagramCustomShapeCreateTemplateEventArgs.item">item</helplink> property provides access to the currently processed item. Add the template content, which must be presented as SVG elements, to the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagramCustomShapeCreateTemplateEventArgs.container">container</helplink> property.
          </p><p>
            In this demo, the <b>CustomShapeCreateTemplate</b> event handler adds the 'Show Details' link to a shape. When clicked, it displays a popup window that contains additional information about a department.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
         The ASPxDiagram control supports the template technology that allows you to completely customize a custom shape's appearance and layout.
        </HighlightedDescription>  
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Document" Title="Document Capabilities">
      <Demo Key="SimpleView" Title="Simple View" SeoTitle="SimpleView Mode">
        <Keywords>simpleview, simple, chart</Keywords>
        <Description>
          <![CDATA[
          <p>
            This demo shows the DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) in Simple View mode. In this mode, the control does not divide the work area into pages and the Diagram's content occupies all the available area inside the control.
          </p><p>
            To enable Simple View mode, set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.SimpleView">SimpleView</helplink> option to <b>true</b>.
          </p>
          ]]>
        </Description>
      </Demo>
    <Demo Key="ReadOnly" Title="Read Only" SeoTitle="ReadOnly Diagram">
        <Keywords>disable, readonly, viewer</Keywords>
        <Description>
          <![CDATA[
          <p>
            The DevExpress ASP.NET Diagram (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram">ASPxDiagram</helplink>) control can operate in read-only mode that protects the control from edit operations. Set the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDiagram.ASPxDiagram.ReadOnly">ReadOnly</helplink> option to <b>true</b> to switch the Diagram to read-only mode.
          </p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="API" Title="API">
        <Demo Key="ClientSideEvents" Title="Client-Side Events" SeoTitle="Client Side Events">
          <Keywords>events, client, api</Keywords>
          <Description>
            <![CDATA[
            <p>
              This demo shows the DevExpress client-side event management capabilities. All the control-specific client-side events are traced in this demo. These events are triggered in response to specific actions or events on the client. 
            </p><p>  
            Click or double-click any diagram element (shape or connector) to initiate client-side events.
            </p><p>
            This demo shows the following client events:
            </p>
            <ul>    
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagram.DiagramChanged">DiagramChanged</helplink> - Fires when the diagram's data is changed.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink> - Occurs after the control is initialized, but before it is displayed in the browser.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagram.ItemClick">ItemClick</helplink> - Fires after a shape or edge is clicked.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagram">ItemDlbClick</helplink> - Fires after a shape or edge is double-clicked.</li>
                <li><helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientDiagram.SelectionChanged">SelectionChanged</helplink> - Fires after the selection is changed in the Diagram.</li>
            </ul>    
            <p>
            For more information about client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> topic.
            </p>
            ]]>
          </Description>
        </Demo>
      </DemoGroup>
    <DemoGroup Key="Adaptivity" Title="Adaptivity">
      <Demo Key="AdaptiveLayout" Title="Adaptive Layout" SeoTitle="Adaptive Layout">
        <Keywords>events, client, api</Keywords>
        <Description>
          <![CDATA[
            <p>The Diagram can adapt its layout to narrow screens. In this demo, the control’s <b>Height</b> property is set to 100% to fit a screen.</p> 
            <p>Note the following changes to the toolbox and properties panel:</p>
            <ul>
            <li>The toolbox is docked to the left control border.</li>
            <li>The properties panel is docked to the bottom control border.</li>
            <li>A tool slides out of the screen when a user drags a shape from the toolbox or edits an item's text.</li>
            <li>Only one tool can be displayed at a time.</li>
            </ul>
            <p>You can switch between landscape and portrait layouts to see the Diagram's appearance and behavior on wide and narrow screens.</p>
            <p>Scan the QR code to open this demo on your mobile device.</p>
            ]]>
        </Description>
        <SourceFile>~/Adaptivity/AdaptiveLayoutPage.aspx</SourceFile>
      </Demo>
    </DemoGroup>
  </DemoProduct>  

  <DemoProduct Key="ASPxSpreadsheet" Url="ASPxSpreadsheetDemos" NavItemTitle ="Spreadsheet" Title="DevExpress ASPxSpreadsheet" SeoTitle="ASP.NET AJAX Spreadsheet" 
               OrderIndex="6" IntegrationHighlighted="true">
    <IntegrationImageUrl>~/Content/Spreadsheet.png</IntegrationImageUrl>
    <IntegrationDescription>
      Microsoft Excel® inspired UI, read/write XLSx, XLS, CSV and TXT files.
    </IntegrationDescription>

    <Intro Title="Introduction" SeoTitle="ASP.NET AJAX Spreadsheet Control">
      <BannerTitle>
        Spreadsheet for ASP.NET AJAX
      </BannerTitle>
      <BannerText>
        Microsoft Excel® inspired UI, read/write XLSx, XLS, CSV and TXT files
      </BannerText>
      <BannerImageUrl>~/Content/VideoBanner.png</BannerImageUrl>
      <BannerUrl>http://www.youtube.com/watch?v=WQ4wqEN-HuQ</BannerUrl>
      <DescriptionTitle>
        Welcome to the online demo site of the ASPxSpreadsheet Suite
      </DescriptionTitle>
      <Description>
        <![CDATA[
            ]]>
      </Description>
    </Intro>

    <Overview Title="Overview">
      <Description>
        <![CDATA[
          <p>
            The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) is an Excel-inspired control that allows you to introduce spreadsheet functionality to an ASP.NET application. It provides a rich UI and comprehensive API to create, manage and convert spreadsheet files. Your application does not require Microsoft Excel to be installed on user or developer machines.
          </p>
        ]]>
      </Description>
	  <SeeAlso Url="https://docs.devexpress.com/AspNet/119587/aspnet-webforms-controls/spreadsheet/getting-started#!product=aspxspreadsheet" Title="Getting Started" />
      <SeeAlso Url="http://www.youtube.com/watch?v=WQ4wqEN-HuQ" Title="Training Videos" />
      <SeeAlso Url="https://docs.devexpress.com/AspNet/16157/aspnet-webforms-controls/spreadsheet" Title="Documentation" />
      <KeyFeature Name="Microsoft Office Inspired UI">
        <Description>
          <![CDATA[
             The ASPxSpreadsheet provides a UI experience similar to the one your end-users expect from today's most popular office productivity suite. It includes full integration with the <a href="http://demos.devexpress.com/ASPxNavigationAndLayoutDemos/Ribbon/Overview.aspx">DevExpress ASP.NET Ribbon</a> control, so you can quickly deliver stunning applications.

            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Support for Popular File Formats">
        <Description>
          <![CDATA[
             With the DevExpress ASP.NET Spreadsheet, you and your end-users can load, convert and save workbooks in popular spreadsheet file formats such as XLS, XLSX, XLSM, CSV and TXT.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Formula Calculation Engine">
        <Description>
          <![CDATA[
             Perform complex calculations using formulas with various functions and cell references, and create shared and array formulas. A comprehensive range of Microsoft Excel compatible functions is supported for use within formulas.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Integrated Charts">
        <Description>
          <![CDATA[
             A variety of chart types and built-in presets allow you to display data for your customers in a meaningful way. Also, our native chart engine can display charts so that their appearance is similar to the charts found in Microsoft Excel.
            ]]>
        </Description>
      </KeyFeature>
      <KeyFeature Name="Pictures">
        <Description>
          <![CDATA[
             Insert, move, change, transform and delete pictures incorporated into a worksheet.
            ]]>
        </Description>
      </KeyFeature>	  
      <KeyFeature Name="Mail Merge Support">
        <Description>
          <![CDATA[
             An integrated mail-merge engine allows you to programmatically create personalized letters, catalogs and a myriad of business reports that are only possible with the capabilities inherent in a spreadsheet.
            ]]>
        </Description>
      </KeyFeature>
    </Overview>

    <DemoGroup Key="Features" Title="Features" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="DocumentManagement" Title="Document Management" HighlightedImageUrl="~/Content/DemoIcons/DocumentManagement.png" HighlightedTitle="Document Management">
        <Description>
          <![CDATA[
             <p>
			 With the DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>), you can easily provide end-users the ability to view and modify Excel workbooks in a browser. The ASPxSpreadsheet can read and write files in XLS, CSV, TXT, and <helplink href="https://docs.devexpress.com/AspNet/16187/aspnet-webforms-controls/spreadsheet/concepts/supported-formats">other formats</helplink>. You can allow end-users to perform file management operations (such as creating a new spreadsheet, opening an existing spreadsheet or saving a spreadsheet) via the corresponding ribbon command buttons. These buttons are available in the <b>File</b> tab of the built-in ribbon.
			 </p>
			 <p>
			 This demo illustrates how easy it is to use the ASPxSpreadsheet to open and save spreadsheet documents in different formats. Simply drop the ASPxSpreadsheet control onto a form and set a single property - <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.WorkDirectory">WorkDirectory</helplink>. This property specifies the folder on the server where documents should be opened or saved.
			 </p>
            ]]>
        </Description>
        <HighlightedDescription>
          The DevExpress ASP.NET Spreadsheet provides a rich UI and comprehensive API to manage (create, upload, open and save) spreadsheet files, to convert them to/from different popular formats.
        </HighlightedDescription>
      </Demo>
      <Demo Key="WorksheetProtection" Title="Worksheet Protection" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/WorksheetProtection.png" HighlightedTitle="Worksheet Protection">
        <Description>
          <![CDATA[
<p>
The ASP.NET Spreadsheet control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) supports workbook and worksheet element protection defined within a document. If the document contains protected elements, ASPxSpreadsheet prevents their modification by your end-users.
</p>
<p>
Note: The Formula Bar that displays focused cell content allows end-users to view formulas contained within the protected cells.
</p>
<p>
In this demo, the Spreadsheet opens a document with the applied worksheet password protection that prevents modification of certain cells. In particular, you can modify only cells belonging to rows from 6 to 22 and columns from D to J - these cells are colored with different shades of green. Using Spreadsheet API, you can allow or disallow end-users to format, insert, delete, sort, filter or edit areas of the protected worksheet. The <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Worksheet.Protect(System.String-DevExpress.Spreadsheet.WorksheetProtectionPermissions)">Protect</helplink> and <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Worksheet.Unprotect(System.String)">Unprotect</helplink> methods of a worksheet object are used in the demo for this purpose. According to the defined permissions, the Spreadsheet UI prevents end-users from modifying protected elements - ribbon items and context menu items that relate to customization of these elements are either disabled or not in effect.
</p>
<p>
From a usability standpoint, document protection allows you to hide data or formulas that might confuse end-users and prevent users from viewing or making changes to such data.
</p>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/115070/aspnet-webforms-controls/spreadsheet/concepts/protection" Title="Documentation: Protection" />
        <HighlightedDescription>The ASP.NET Spreadsheet control (ASPxSpreadsheet) supports workbook and worksheet element protection defined within a document. If the document contains protected elements, ASPxSpreadsheet prevents their modification by end-users.</HighlightedDescription>
      </Demo>
      <Demo Key="Printing" Title="Printing">
        <Description>
          <![CDATA[
             <p>
The DevExpress ASP.NET Spreadsheet Control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) ships with an integrated Ribbon UI, allowing end-users to customize active documents and to print workbook content as needed.			 
             </p>
             <p>
Before printing, page settings for each worksheet can be customized. The more general printing parameters can be set up via the ribbon items contained in the Page Layout tab. All available page settings are grouped together in the Page Setup dialog. To open it, click a Dialog Box Launcher button next to Page Setup or Print group title within the Page Layout tab. A click on the Print button within the Page Setup dialog or ribbon File tab invokes a browser-specific print dialog. Print dialog options might vary based upon the web client browser used.
             </p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="Formulas" Title="Formulas" HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/Formulas.png" HighlightedTitle="Formulas">
        <Description>
          <![CDATA[
          <p>
          Formulas are one of the most commonly used features of spreadsheets. With the DevExpress ASP.NET Spreadsheet (ASPxSpreadsheet), you can easily insert and calculate formulas in a manner similar to Microsoft Excel.
          </p>

          <p>
          A formula is a string expression that begins with an equal (=) sign. It can contain constants, operators, cell references, functions and names.
          </p>

          <p>
          The ASPxSpreadsheet's built-in functions cover a wide range of categories - from basic mathematical operations such as simple addition and subtraction, to complex engineering and statistical calculations. This can meet even the most demanding requirements. The function categories provided include:
          </p>

          <ul>
          <li>Financial</li>
          <li>Statistical</li>
          <li>Engineering</li>
          <li>Logical</li>
          <li>Text</li>
          <li>Date & Time</li>
          <li>Lookup & Reference</li>
          <li>Math & Trig</li>
          <li>Informational</li>
          </ul>

          <p>
          The built-in functions are listed within an Excel-like <b>Formulas</b> tab in the ASPxSpreadsheet's automatically generated Ribbon. In this tab, functions are divided into groups for easy access.
          </p>

          <p>
          A formula can contain references to other cells or cell ranges within the same or different worksheets. The following references are supported:
          </p>

          <ul>
          <li>Relative, Absolute and Mixed References</li>
          <li>Cross-Worksheet References</li>
          <li>3D References</li>
          <li>Structured References</li>
          <li>External References</li>
          </ul>

<p>
Note: The Formula AutoComplete feature makes it easier to create and edit formulas and minimizes typing and syntax errors. After typing an equal sign (=) and beginning letters into a cell, a dynamic drop-down list of valid functions that match the letters is displayed below the cell. For a function selected within the list, a text tooltip with function information is displayed. This helps choosing the right function. To insert the selected item into the formula and put the insertion point directly after it, press Tab or double-click the item.
</p>

          <p>
          See how formulas are used in this demo on both sheets.
          </p>
          ]]>
        </Description>
        <HighlightedDescription>
          A spreadsheet formula is an equation that performs a calculation on numbers, functions, and values of one or more cells. The ASP.NET Spreadsheet supports a comprehensive range of Microsoft Excel compatible functions for use within formulas.
        </HighlightedDescription>
        <SourceFile>~/App_Code/DemoHelpers/InvoiceDemoHelper.cs</SourceFile>
      </Demo>
      <Demo Key="Charts" Title="Charting" HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Charts.png" HighlightedTitle="Charts">
        <Description>
          <![CDATA[
            <p>
            Charts are used in spreadsheets to make it easier to understand large quantities of data by visualizing the relationship between different data series. 
            </p>

            <p>
           The DevExpress ASP.NET Spreadsheet (ASPxSpreadsheet) allows you to easily insert a professional-looking chart that displays the details you require. A comprehensive set of 2D and 3D charts is provided to address a broad range of business needs with ease.
            </p>

            <p>
            To create a chart, select a series of data within a worksheet and click on the required chart type within the user interface Ribbon's <b>Insert</b> tab. The data can be arranged in rows or columns - the ASP.NET Spreadsheet automatically determines the best way to plot the data on the chart. For plotting charts, the ASP.NET Spreadsheet uses the powerful charting functionality of the DevExpress ASP.NET Chart Control.
            </p>

            <p>
            You can move a chart to any location on a worksheet by dragging it. You can also change the size of the chart for a better fit. By using a chart's context menu you can easily change the main chart characteristics (such as the chart type, underlying data, layout, styles, and etc.).
            </p>

            <p>
            In this demo, two charts - of the pie and bar types - are created to visualize information presented in the tables.
            </p>

           ]]>
        </Description>
        <HighlightedDescription>
          Charts can help you display data in ways that are meaningful to your customer. Select from a variety of chart types (such as a bar chart or a line chart) and their subtypes (such as a stacked horizontal pyramid chart or a 3-D line chart).
        </HighlightedDescription>
      </Demo>
      <Demo Key="Images" Title="Images">
        <Description>
          <![CDATA[
          <p>
          The DevExpress ASP.NET Spreadsheet (ASPxSpreadsheet) allows you to insert pictures into a worksheet.
          </p>

          <p>
          To insert a picture, select the cell where you wish to place the picture and click on the <b>Picture</b> item within the user interface Ribbon's Insert tab. The pictures to insert may be located on your computer or on the web. You can also move, transform and delete pictures in a worksheet. 
          </p>

          <p>
          This demo shows how personal photos can be programmatically added to each data row containing employee information.
          </p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="FreezePanes" Title="Freeze Panes" HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/FreezePanes.png" HighlightedTitle="Freeze Panes">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) implements an Excel inspired Freeze Panes functionality. This allows end-users to lock specific rows or columns in one area to keep this area of a worksheet visible while scrolling the worksheet content vertically or horizontally.
</p>
<p>
Using the Freeze Panes command from the View tab on the ribbon, end-users can freeze arbitrary panes (lock rows and/or columns based on the selection), freeze the top row, freeze the first column and unfreeze panes.
</p>
            ]]>
        </Description>
        <HighlightedDescription>
          Specific rows and/or columns in one worksheet area can be locked to keep this area visible while scrolling the worksheet vertically or horizontally.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="SortingAndAutoFilter" Title="Sorting and AutoFilter" HighlightedIndex="4" HighlightedImageUrl="~/Content/DemoIcons/AutoFilter.png" HighlightedTitle="Excel Inspired AutoFilter">
          <Description>
            <![CDATA[
<p>
End-users can use the Excel inspired AutoFilter feature to filter data by columns and to easily display only rows that meet specific conditions. Filtering commands located on the Data tab in the <b>Sort &amp; Filter</b> group can be used to activate filtering, reapply the filter or completely remove all filters in a worksheet. 
</p>
<p>
Once filtering is activated, a drop-down arrow appears on the right side of each column header in the range. An end-user can click the arrow of the required column and select one of predefined filter types in the AutoFilter drop-down menu. The content of the AutoFilter menu depends on the type of data in the filtered column. Three filter types are available: Text Filters, Number Filters and Date Filters. In addition, the Filter by Values option, which allows you to select unique values from columns can be used.
</p>
            ]]>
          </Description>
        <HighlightedDescription>
          A simple way to filter information in a worksheet and find required values quickly.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="PivotTables" Title="PivotTables">
        <Keywords>pivot table</Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) supports the Pivot Tables functionality that allows end-users to calculate, categorize and analyze data in a worksheet. The pivot table displays a summary table that breaks the data into categories and calculates subtotals without typing any formulas. 
</p>

<p>
End-users can specify the pivot table's layout parameters (data fields, columns, rows, summarize function) using the PivotTable Fields window. Various options on the PivotTable Tools ribbon tab also provides end-users ability to modify the pivot table (adjust the report layout, change formatting, specify field settings, etc.).
</p>

<p>
In this demo, the pivot table's report helps summarize sales data located in the Data worksheet. Items in the DATE field are consolidated into two groups - QUARTERS and MONTHS.
</p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="DataValidation" Title="Data Validation" HighlightedIndex="6" HighlightedImageUrl="~/Content/DemoIcons/DataValidation.png" HighlightedTitle="Data Validation">
          <Description>
            <![CDATA[
<p>
An Excel inspired data validation implemented by the DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) helps prevent end-users from entering wrong values into worksheet cells. This feature allows a user to define restrictions and provide notifications on which data can and should be entered into a cell. Data validation is extremely useful when a workbook is shared by multiple users, and you want the data entered in the workbook to be accurate and consistent.
</p>
<p>
This demo displays a simple document with data validation applied. Each column containing validated cells is accommodated with a comment explaining which values can be entered into these cells. To view or modify validation settings, click the Data Validation button on the ribbon to invoke the Data Validation dialog.
</p>
            ]]>
          </Description>
        <HighlightedDescription>
          Data validation helps you keep data accurate and consistent by preventing end-users from entering incorrect values.
        </HighlightedDescription>        
      </Demo>
      <Demo Key="WorksheetDisplayArea" Title="Worksheet Display Area">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) enables you to programmatically specify the worksheet area that is visible in the ASPxSpreadsheet and that allows end-user input. 
</p>
<p>
Use the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxspreadsheet.worksheetdisplayarea.setsize.overloads">SetSize</helplink> method available through the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.WorksheetDisplayArea">WorksheetDisplayArea</helplink> property to limit the maximum number of rows and columns to be displayed in a specific sheet. This restricts end-users from accessing worksheet cells through a control's UI. This restriction, however, is not in effect for programmatic cell manipulation so you can change the content and format of each worksheet cell in code.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="Comments" Title="Comments" HighlightedIndex="7" HighlightedImageUrl="~/Content/DemoIcons/Comments.png" HighlightedTitle="Comments">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) supports the use of Excel inspired comments - additional informational texts for individual cells. Comments are extremely useful when you need to provide additional information, such as reminders, notifications, or feedback in a document without modifying cell content.
</p>
<p>
The ASPxSpreadsheet displays comments in a floating text box anchored to a cell. The cell containing a comment has a red triangular indicator in the corner. 
</p>
<p>
Your end-users can annotate a worksheet by adding new comments, editing, hiding or deleting existing comments, moving and resizing the comment box. End-users can manipulate comments by using context menu items, a specific <b>Review</b> ribbon tab or by dragging comments and their sizing handles.
</p>
          ]]>
        </Description>
        <HighlightedDescription>Comments are useful when you need to provide additional information such as reminders, notifications, or feedback in a document, without modifying cell content. The ASPxSpreadsheet displays comments in a floating text box anchored to a cell.</HighlightedDescription>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="MailMerge" Title="Mail Merge" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="MailMerge" Title="Mail Merging" HighlightedIndex="5" HighlightedImageUrl="~/Content/DemoIcons/MailMerge.png" HighlightedTitle="Mail Merging">
        <Description>
          <![CDATA[
<p>
The Mail Merge functionality provided by the DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) enables you to automatically generate a set of documents based on a common template and fill each document with unique data values retrieved from a data source. This feature can be useful for a variety of business requirements, such as personalizing letters, and composing catalogs and reports.
</p>
<p>
To perform a mail merge, you need a template and a data source. 
</p>
<p>
A <b>template</b> is a spreadsheet document that contains static information (which is the same for all resulting documents) and mail merge fields. A mail merge field is a placeholder in which a value from the specified data source field will appear in a merged document. To insert fields into template cells, use the following special functions in cell formulas: FIELD and FIELDPICTURE.
</p>

<p>
A <b>data source</b> contains data that will be merged into fields in a template to create merged documents. 
</p>
<p>
To bind a template to a data source, use the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.IWorkbook.MailMergeDataSource">IWorkbook.MailMergeDataSource</helplink> and <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.IWorkbook.MailMergeDataMember">IWorkbook.MailMergeDataMember</helplink> properties of the template workbook.
</p>
<p>
Within a template, you can choose a <b>mail merge mode</b> specifying how the result of the mail merge should be generated. The mail merge mode is specified programmatically at the template workbook level, by setting a specific defined name ("MAILMERGEMODE") to a particular string constant ("Worksheets" or "OneWorksheet").
</p>
<ul>
<li>
<b>"OneWorksheet"</b> (Single Sheet) - Merged ranges for all data source records are inserted one after another (vertically or horizontally, depending on the document orientation) into a single worksheet. This mode is used by default.
</li>
<li>
<b>"Worksheets"</b> (Multiple Sheets) - The merged range for each data source record is inserted into a separate worksheet in a single workbook.
</li>
</ul>
<p>
Note that by default, the "MAILMERGEMODE" defined name does not exist in a template workbook and the "Single Sheet" mode is used.
</p>
<p>
To finalize the mail merge process, use the <b>IWorkbook.GenerateMailMergeDocuments</b> method of the template workbook. This method returns a collection of resulting workbooks containing the merged documents (if the "Single Sheet" or "Multiple Sheets" mail merge mode is used, the collection contains a single workbook).
</p>
<p>
In this demo, we illustrate the merging of images along with personal information for contacts from the Northwind database's <i>Employees</i> table.
</p>
	        ]]>
        </Description>
        <HighlightedDescription>
          Whether you wish to generate personalized letters, company directories or interactive business reports, the built-in data merge capabilities offer a variety of runtime options.
        </HighlightedDescription>
      </Demo>
      <Demo Key="DataMerging" Title="Custom Data Merging">
        <Description>
          <![CDATA[
          <p>
          In this demo, a spreadsheet template is loaded into the DevExpress ASP.NET Spreadsheet (ASPxSpreadsheet) and programmatically populated with data taken from an XML file. The template displays the predefined report layout and contains specific aggregate formulas. The data is retrieved from an XML file and merged with the corresponding worksheet cells into an integrated report. As a result, a worksheet represents a complete report calculated automatically.
          </p>
          ]]>
        </Description>
        <SourceFile>~/App_Code/DemoHelpers/ExpensesModel.cs</SourceFile>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="ToolbarsAndUI" Title="Toolbars And UI" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="UICustomization" Title="UI Customization" SeoTitle="Spreadsheet UI Customization">
      <!--<Demo Key="UICustomization" Title="UI Customization" SeoTitle="Spreadsheet UI Customization" HighlightedIndex="8" HighlightedImageUrl="~/Content/DemoIcons/RibbonUI.png" HighlightedTitle="UI Customization" HighlightedTagNames="dx:ASPxSpreadsheet">-->
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) provides a UI experience similar to Microsoft Excel Online. It allows you to create intuitive and easy-to-use spreadsheet apps in the shortest possible time.
</p>
<p>
This demo illustrates the Spreadsheet's main UI elements available for customization through the API provided at different levels - for the whole control or for individual worksheets.
</p>
<p>
At the control level, the following customization options are available:
</p>

<ul>
<li>
The mode of the ribbon-based UI (use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.RibbonMode">RibbonMode</helplink> property)<br/>
The Spreadsheet is designed to fully integrate the DevExpress ASP.NET Ribbon control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink>). Based upon the RibbonMode property setting, the Spreadsheet can use either a built-in ribbon, a built-in one-line toolbar, an external ribbon control, or no ribbon. The RibbonMode property values include:

<ul>
<li><b>Ribbon</b> – The Spreadsheet uses a built-in ribbon; ribbon tabs can be customized using the ASPxSpreadsheet's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.RibbonTabs">RibbonTabs</helplink> collection.</li>
<li><b>One Line Ribbon</b> – The Spreadsheet displays a built-in ribbon used in one-line mode optimized for touch devices; one-line mode related settings can be defined for ribbon groups and ribbon galleries with their OneLineModeSettings properties.</li>
<li><b>ExternalRibbon</b> – The Spreadsheet uses an external <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon">ASPxRibbon</helplink> control, specified by the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.AssociatedRibbonID">AssociatedRibbonID</helplink> property. Ribbon tabs can be customized at the ASPxRibbon control level with the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxRibbon.Tabs">Tabs</helplink> property. The ASPxSpreadsheet's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CreateDefaultRibbonTabs(System.Boolean)">CreateDefaultRibbonTabs</helplink> method can be used to automatically populate the external ribbon with the default ribbon tabs.</li>
<li><b>None</b> – The Spreadsheet does not incorporate or use the ribbon UI.</li>
<li><b>Auto</b> – The Spreadsheet automatically displays a proper built-in ribbon depending upon the client browser type; a standard ribbon is used under desktop browsers and a one-line ribbon is used under the browsers of touch devices.</li>
</ul>
</li>

<li>The <helplink href="https://docs.devexpress.com/AspNet/117334/aspnet-webforms-controls/spreadsheet/visual-elements/formula-bar">Formula Bar</helplink> visibility (use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.ShowFormulaBar">ShowFormulaBar</helplink> property)</li>
<li>The <helplink href="https://docs.devexpress.com/AspNet/17190/aspnet-webforms-controls/spreadsheet/visual-elements/tab-control">Tab Control</helplink> visibility (use the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.ShowSheetTabs">ShowSheetTabs</helplink> property)</li>
</ul>

<p>
At the level of a worksheet, you can programmatically toggle the visibility of the following worksheet elements:
</p>
<ul>
<li>Gridlines (use the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.WorksheetView.ShowGridlines">ShowGridLines</helplink> property)</li>
<li>Headings of rows and columns (use the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.WorksheetView.ShowHeadings">ShowHeadings</helplink> property)</li>
</ul>
<p>
Give the demo a try and see how the Spreadsheet looks and behaves in different UI modes.
</p>
	        ]]>
        </Description>
        <HighlightedDescription>
          The ASPxSpreadsheet's settings allow you to change the control's UI. You can use custom control's appearance or built-in UI experience similar to the one your end-users expect from today's most popular office productivity suite.
        </HighlightedDescription>
      </Demo>
      <Demo Key="ContextMenuCustomization" Title="Context Menu Customization" SeoTitle="Context Menu Customization" HighlightedTagNames="dx:ASPxSpreadsheet">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) enables you to programmatically customize its context menu. By handling the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.PopupMenuShowing">PopupMenuShowing</helplink> client-side event, you can perform the following actions with the ASPxSpreadsheet's context menu:
</p>
<ul>
<li>
Manipulate menu items - add new items, remove or disable existing ones (use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheetPopupMenuShowingEventArgs.menuItems">e.menuItems</helplink> property);
</li>
<li>
Identify a worksheet element (e.g., a cell, row or column header, chart or picture) for which the context menu is invoked (use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheetPopupMenuShowingEventArgs.menuType">e.menuType</helplink> property);
</li>
<li>
Prevent the context menu from being displayed (use the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientCancelEventArgs.cancel">e.cancel</helplink> property).
</li>
</ul>
<p>
This demo illustrates how to implement a custom context menu and display it only for certain sheet cells (these cells are highlighted with the gray background color in the demo). The context menu is dynamically populated in the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.PopupMenuShowing">PopupMenuShowing</helplink> client event with custom menu items depending upon the type of data contained within cells (such as the weight, currency or discount values). The custom menu items are implemented as new items containing custom command names. Clicks on the custom menu items with custom command names are processed by using the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CustomCommandExecuted">CustomCommandExecuted</helplink> client event. Within its handler, the activated custom command is identified and the corresponding action is performed either on the client side or through a callback to the server. For instance, commands for the weight and currency conversions are performed right on the client side and display a hint (ASPxHint) with converted values; and a command for getting information on how discounts are calculated requires sending a callback to the server to obtain additional information.
</p>
<p>
Give the demo a try and see what particular context menu is displayed for different worksheet elements. 
</p>
        ]]>
        </Description>
        <HighlightedDescription>
          The ASPxSpreadsheet's settings allow you to change the control's UI. You can use custom control's appearance or built-in UI experience similar to the one your end-users expect from today's most popular office productivity suite.
        </HighlightedDescription>
        <SourceFile>~/Scripts/ContextMenuCustomization.js</SourceFile>
      </Demo>
      <Demo Key="ReadingViewMode" Title="Reading View Mode">
        <Keywords></Keywords>
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet control's Reading View mode prohibits users from editing document and replaces the ribbon UI with a compact toolbar that has a lightweight render compared to the ribbon. End-users can switch between this view mode and the Editing view mode that enables all editing features using the commands in the ribbon UI and the Reading View toolbar.
</p>

<p>
The Spreadsheet control allows you to specify the control's view mode in code using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.SpreadsheetViewSettings.Mode">Mode</helplink> property on the server, and the <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.GetViewMode">GetViewMode</helplink> and <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.SetViewMode(mode)">SetViewMode</helplink> methods on the client. This control also provides two events that you can use to execute a custom code when changing the view mode using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.ViewModeChanging">ViewModeChanging</helplink> event on the server and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.SpreadsheetClientSideEvents.ViewModeChanged">ViewModeChanged</helplink> on the client. In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.ViewModeChanging">ViewModeChanging</helplink> event is used to add a custom item to the Reading View toolbar.
</p>
                ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="API" Title="API" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="CellValue" Title="Cell Value">
        <Description>
          <![CDATA[
             <p>
			 This example demonstrates how to add data to worksheet cells in code.
			 </p>
       <p>Assign the value to the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange.Value">Value</helplink> property of a <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Cell">Cell</helplink> or <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange">CellRange</helplink> object.
       </p>
			 <p>
			  The <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Worksheet.Range">Range</helplink> property returns a <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange">CellRange</helplink> type object. Use its members to customize the cells' style settings and perform actions, for instance, merge cells.
			 </p>
            ]]>
        </Description>
      </Demo>
      <Demo Key="FunctionsInFormulas" Title="Functions in Formulas">
        <Description>
          <![CDATA[
<p>
This example demonstrates how to programmatically use predefined functions in formulas to perform simple or complex calculations over arguments. Set the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange.Formula">CellRange.Formula</helplink> property to a formula. Follow the rules below to create a formula that uses a function.
</p>
<ul>
<li>Start the formula with the "=" sign, as you usually do when creating formulas.</li>
<li>Specify the function name. See <helplink href="https://docs.devexpress.com/AspNet/16216/aspnet-webforms-controls/spreadsheet/concepts/formulas/functions">Functions</helplink> for a list of the ASPxSpreadsheet functions grouped by categories.</li>
<li>Specify the function arguments in parentheses. Arguments can be numbers, text and logical values, cell references and names, or other functions.</li>
</ul>
            ]]>
        </Description>
      </Demo>
      <Demo Key="CellStyle" Title="Cell Style">
        <Description>
          <![CDATA[
<p>
This example demonstrates how to programmatically modify format characteristics (the background color, font and alignment settings) of an individual cell and how to specify different borders for ranges of cells.
</p>
<p>
To format an individual cell, access the corresponding <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Cell">Cell</helplink> object and modify its formatting properties.
</p>
<p>
To format a range of cells, access and modify the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Formatting">Formatting</helplink> object using the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange.BeginUpdateFormatting">CellRange.BeginUpdateFormatting</helplink> - <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.CellRange.EndUpdateFormatting(DevExpress.Spreadsheet.Formatting)">CellRange.EndUpdateFormatting</helplink> method pair.
</p>
            ]]>
        </Description>
      </Demo>
    <Demo Key="ClientSideEvents" Title="Client-Side Events">
        <Description>
          <![CDATA[
					    <p>
						This sample demonstrates the capabilities of the DevExpress client-side event management technology. All available control-specific client-side events are traced in this demo. Play with the DevExpress ASP.NET Spreadsheet (ASPxSpreadsheet) interface elements, click a hyperlink or select cells within the active sheet to initiate client-side events.
						</p>
					    <p>
						The ASPxSpreadsheet control provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the control's functionality. Thus, they give you complete control over the Spreadsheet client-side behavior.
						</p>
					    <p>
						The following client events are available for the ASPxSpreadsheet:
						</p>
					    <ul>
					    <li>
						<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientControlBase.Init">Init</helplink>. Occurs on the client side after the control has been initialized, but prior to it being displayed within the browser.
						</li>
					    <li>
						<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.SelectionChanged">SelectionChanged</helplink>. Fires when a selection is changed in the Spreadsheet.
						</li>
					    <li>
						<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.HyperlinkClick">HyperlinkClick</helplink>. Fires after a hyperlink is clicked within the Spreadsheet's document.
						</li>
            <li>
            <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.PopupMenuShowing">PopupMenuShowing</helplink>. Occurs before the default context menu is displayed for Spreadsheet elements and allows you to modify the menu or cancel the action.
            </li>
					    <li>
						<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CustomCommandExecuted">CustomCommandExecuted</helplink>. Fires after a custom Spreadsheet command has been executed on the client side.
						</li>
					    <li>
						<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.BeginSynchronization">BeginSynchronization</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.EndSynchronization">EndSynchronization</helplink>. Fires before and after the client-server synchronization is performed to apply changes and synchronize the server and client document models.
						</li>						
					    </ul>
              <p>
                To learn more on client-side events, refer to the <helplink href="https://docs.devexpress.com/AspNet/9448/common-concepts/client-side-functionality/client-side-events">Client-Side Events</helplink> help topic.
              </p>
            ]]>
        </Description>
      </Demo>

      <Demo Key="GlobalCustomFunctions" Title="Global Custom Functions">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) provides the capability to create your own custom functions. Custom functions are available for spreadsheet calculations and can be used in cell formulas in the same manner as built-in functions. A custom function executes a server custom code that performs the required calculation and returns the result.
</p>
<p>
Custom functions supported by the Spreadsheet are global - they can be accessed from all spreadsheet documents opened on the server. To create a custom function, implement the <helplink href="https://docs.devexpress.com/OfficeFileAPI/DevExpress.Spreadsheet.Functions.ICustomFunction">CustomFunction</helplink> interface and register the function using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.RegisterGlobalCustomFunction(DevExpress.Spreadsheet.Functions.ICustomFunction)">RegisterGlobalCustomFunction</helplink> static method. It is recommended to register custom functions only once at the application level. The following demo code illustrates how this can be done in the Global.asax file's Application_Start method.
</p>
<code lang="CSharp">
void Application_Start(object sender, EventArgs e) {
    ...
    ASPxSpreadsheet.RegisterGlobalCustomFunction(new DiscountFunction());
    ...
}
</code>
<p>
In this demo, the DiscountFunction custom function is defined. It is used in the C7 cell to calculate a discount based on the order's Quantity (C5) and Unit Price (C4) values. In the calculation, different discount rates are used depending on the total number of items in the order.
</p>
            ]]>
        </Description>
        <SeeAlso Url="https://docs.devexpress.com/AspNet/117370/aspnet-webforms-controls/spreadsheet/concepts/formulas/functions/user-defined-functions-udf" Title="Documentation: User-Defined Functions (UDF)" />        
        <SourceFile>~/App_Code/DemoHelpers/GlobalCustomFunctions/DiscountFunction.cs</SourceFile>
      </Demo>
      
      <Demo Key="CellValueChanged" Title="CellValueChanged Event">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) enables you to execute custom server code in response to a sheet cell value change. For this purpose, the Spreadsheet provides the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event.
</p>
<p>
The <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event fires on the server side after a cell's content has been changed as a result of end-user interaction. This event is raised for all documents opened within all Spreadsheet instances in a web application. So, to handle the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event, you need to use a static event handler function, which can be accessed globally. It is recommended to subscribe to the Spreadsheet's <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event in the Global.asax file's Application_Start method as the following demo code illustrates.
</p>
<code lang="CSharp">
void Application_Start(object sender, EventArgs e) {
    ...
    ASPxSpreadsheet.CellValueChanged += SpreadsheetGlobalHandlers.OnCellValueChanged;
    ...
}
</code>
<p>
To identify a document for which the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event is raised, use the event's sender parameter. The type of this parameter (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.Office.SpreadsheetDocumentInfo">SpreadsheetDocumentInfo</helplink>) provides the <b>DocumentId</b> property that uniquely identifies the processed document.
</p>
<p>
In this demo, the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet.CellValueChanged">CellValueChanged</helplink> event is handled to respond to entering a shipment tracking number into the C3 data cell and to obtain shipment details from a server data source (which might contain large data in a real application).
</p>
            ]]>
        </Description>
        <SourceFile>~/App_Code/DemoHelpers/Handlers.cs</SourceFile>
        <SourceFile>~/App_Code/DemoHelpers/CellValueChanged/SampleDataSource.cs</SourceFile>
      </Demo>

      <Demo Key="CustomInplaceEditor" Title="Custom In-place Editor">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet control (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) provides provides a client API that you can use to assign a custom in-place editor to worksheet's cells to facilitate and validate user input. This API includes the following members:
</p>

<ul>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CellBeginEdit">CellBeginEdit</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CellEndEdit">CellEndEdit</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CellCancelEdit">CellCancelEdit</helplink> - the events that occur when users start, finish, and cancel editing a cell
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.ApplyCellEdit">ApplyCellEdit</helplink>, <helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.CancelCellEdit">CancelCellEdit</helplink> - the methods that apply or cancel the value stored in the cell's editor
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.SetCellEditorText(text)">SetCellEditorText</helplink> - the method that specifies the cell's editor value while it is edited
</li>

<li>
<helplink href="https://docs.devexpress.com/AspNet/js-ASPxClientSpreadsheet.GetCellBounds(colModelIndex-rowModelIndex)">GetCellBounds</helplink> - the method that receives the cell's bounds
</li>

</ul>

<p>In this demo, custom in-place editors are implemented for the <b>DATE</b> and <b>WHERE</b> columns using the <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxDateEdit">ASPxDateEdit</helplink> and <helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxComboBox">ASPxComboBox</helplink> editors. The client code that renders the editor in place of the edited cell and passes the editor's value to the cell is placed in the <b>ASPxClientSpreadsheetInplaceEditorHelper</b> in a separate file. To assign a DevExpress editor as an in-place editor in your project you can copy the helper's code to your project and call the helper's <b>AssignEditor</b> method to apply the editor to the edited cell.
</p>
            ]]>
        </Description>
        <SourceFile>~/Scripts/CustomInplaceEditor.js</SourceFile>
      </Demo>


    </DemoGroup>
    
    <DemoGroup Key="ApplicationScenarios" Title="Application Scenarios" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="DynamicSheetGeneration" Title="Document Generation">
        <Description>
          <![CDATA[
          <p>
          This demo illustrates how to populate a worksheet programmatically based on the parameters entered into the top panel. The API of the IWorkbook object (accessed via the ASPxSpreadsheet.Document) is used to create data within cells and to perform the required calculations.
          </p>

          <p>
          In the top panel, you can change the loan characteristics. Data is automatically processed when you enter new values, and calculation results are displayed in corresponding cells.
          </p>
           ]]>
        </Description>
        <SourceFile>~/App_Code/DemoHelpers/LoanAmortizationScheduleDemoHelper.cs</SourceFile>
      </Demo>
      <Demo Key="DocumentBrowsing" Title="Custom Document Management">
        <Description>
          <![CDATA[
<p>
Although the DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) provides a built-in means to manage (create, open and save) files via the <b>File</b> ribbon tab, an external file management control can also be used with the Spreadsheet.
</p>
<p>
This demo illustrates how to use an external ASPxFileManager control to navigate a document hierarchy and select a file to open. Documents can be opened from a specific folder on the server ("DocumentBrowsing"), and can also be uploaded to this folder from an end-user's computer. The selected document is opened within the ASPxSpreadsheet by using the <helplink href="https://docs.devexpress.com/AspNet/devexpress.web.aspxspreadsheet.aspxspreadsheet.open.overloads">Open</helplink> method. 
</p>
          ]]>
        </Description>
      </Demo>
    </DemoGroup>

    <DemoGroup Key="SampleDocuments" Title="Sample Documents" HighlightedTagNames="dx:ASPxSpreadsheet">
      <Demo Key="ProfitAndLoss" Title="Profit and Loss">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a profit and loss statement. This demo tracks company income and expenses. You can view how expenses compare against gross profits in the line chart. Change revenue and expense amounts, and notice that the totals are recalculated automatically. The chart is updated as well.
</p>
	        ]]>
        </Description>
      </Demo>
      <Demo Key="Invoice" Title="Invoice">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.  
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing an invoice. Change the amounts in the quantity, price and discount columns, and notice that the totals are recalculated automatically.
</p>
	        ]]>
        </Description>
      </Demo>
      <Demo Key="LoanAmortizationSchedule" Title="Loan Amortization Schedule">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a loan amortization schedule. Change the values of the fields above the table (Loan amount, Annual interest rate, Loan period in years, Number of payments per year, etc.). Notice that the loan schedule is updated automatically, and the table below is recalculated.
</p>
	        ]]>
        </Description>
      </Demo>
      <Demo Key="ExpenseReport" Title="Expense Report">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing an expense report. Change the values in the amount columns, and notice how the totals are recalculated automatically.
</p>
	        ]]>
        </Description>
      </Demo>
      <Demo Key="EmployeeInformation" Title="Employee Information">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing an employee payroll. Use the <b>Employee Information</b> or the <b>Payroll Calculator</b> sheet to modify editable values (values that do not contain formulas), and view the results of your changes in the <b>Individual Paystubs</b> sheet.
</p>
	        ]]>
        </Description>
      </Demo>
      <Demo Key="ShiftSchedule" Title="Shift Schedule">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a shift schedule. The <i>Total</i> column contains array formulas for calculating the total number of work hours per shift, for each employee. Modify the cell values (by adding or deleting "manager", "cashier" or "front desk"). Notice that the <i>Total</i> column is automatically updated.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="SportResults" Title="Sport Results">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a sample application for processing sport results. Select the <b>Results</b> sheet and edit the positions in the Race 1, Race 2 and Race 3 columns of the <b>RESULTS</b> table. The total points scored by drivers and the Top 10 rankings are calculated automatically.
</p>
          ]]>
        </Description>
      </Demo>
      <Demo Key="HomeAccounting" Title="Personal Finance">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a sample application for tracking income and expenses. The workbook contains income and expense columns divided into categories and organized in tabs by month. You can review income and expense records by month, as well as a summary of income and expenses (the last tab to the right), and modify them as required. Aggregate sums are recalculated automatically.
</p>
          ]]>
        </Description>
      </Demo>
    <Demo Key="LeaseVsBuyCalculator" Title="Lease vs Buy Calculator">
        <Description>
          <![CDATA[
<p>
The DevExpress ASP.NET Spreadsheet (<helplink href="https://docs.devexpress.com/AspNet/DevExpress.Web.ASPxSpreadsheet.ASPxSpreadsheet">ASPxSpreadsheet</helplink>) can load a wide variety of formatted Excel documents. The spreadsheet documents used in this demo section are based on popular Microsoft Excel templates that you can download from Microsoft’s <a href="https://templates.office.com/en-US/templates-for-Excel">Templates for Excel</a> page.
</p>
<p>
In this demo, the ASPxSpreadsheet programmatically opens an XLSX document representing a simple form which performs advanced calculations on the data entered. Enter the terms of the vehicle purchase and the vehicle lease to compare, and determine which is better. Try modifying data within the white fields and notice how the grey fields are calculated automatically.
</p>
          ]]>
        </Description>
      </Demo>    
    </DemoGroup>
  </DemoProduct>

  <Search>
    <Synonyms>
      <Group>datasource, databinding, binding, database, databind</Group>
      <Group>grid, gridview, gridviewcontrol, aspxgridview</Group>
      <Group>eXpress, Persistent, xpo</Group>
    </Synonyms>
    <Exclusions>
      <Words>devexpress, dx, asp, devex, asp.net, demo, demos, web</Words>
      <Prefixes>aspx, asp, xtra, client, dx, web</Prefixes>
      <Postfixes>s, ing, control, e, ies</Postfixes>
    </Exclusions>
  </Search>
</Demos>
